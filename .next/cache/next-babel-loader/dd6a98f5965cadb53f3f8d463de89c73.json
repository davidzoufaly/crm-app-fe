{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/AddOrEditField.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport SelectFieldOptions from \"../components/SelectFieldOptions\";\nimport uniqid from \"uniqid\";\n\nconst AddOrEditField = ({\n  fieldObject,\n  changeDisplayComponent\n}) => {\n  const {\n    0: updatedField,\n    1: setUpdatedField\n  } = useState(fieldObject);\n  const {\n    0: options,\n    1: setNewOption\n  } = useState([]);\n\n  const saveField = () => {\n    //todo: post req na fields s editedField\n    setUpdatedField({});\n    changeDisplayComponent();\n  };\n\n  const onNameChange = event => {\n    setUpdatedField(_objectSpread({}, updatedField, {\n      fieldName: event.target.value\n    }));\n  };\n\n  const onSelectChange = event => {\n    console.log(fieldObject);\n    setUpdatedField(_objectSpread({}, updatedField, {\n      fieldType: event.target.options[event.target.options.selectedIndex].value\n    }));\n  };\n\n  const handleInputsSpawn = () => {\n    setNewOption(_objectSpread({}, updatedField, {\n      fieldOptions: {\n        id: uniqid(),\n        value: \"\"\n      }\n    }));\n  };\n\n  const onChange = event => {\n    setNewOption(options.filter(e => event.target.id === e.id ? e.value = event.target.value : e));\n  };\n\n  const onDelete = event => {\n    setNewOption(options.filter(e => event.target.id !== e.id ? e : null));\n  };\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: \"field-name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Field name\"), __jsx(\"input\", {\n    type: \"text\",\n    id: \"field-name\",\n    defaultValue: updatedField.fieldName,\n    onChange: onNameChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), __jsx(\"label\", {\n    htmlFor: \"field-type\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Field type\"), __jsx(\"select\", {\n    id: \"field-type\",\n    onChange: onSelectChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, __jsx(\"option\", {\n    value: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Text\"), __jsx(\"option\", {\n    value: \"select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Select\"), __jsx(\"option\", {\n    value: \"number\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Number\")), __jsx(SelectFieldOptions, {\n    options: updatedField.fieldOptions,\n    onChange: onChange,\n    onDelete: onDelete,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), updatedField.fieldType === \"select\" ? __jsx(\"button\", {\n    onClick: handleInputsSpawn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"New\") : null, __jsx(\"button\", {\n    onClick: saveField,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Save\"), __jsx(\"button\", {\n    onClick: changeDisplayComponent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Cancel\"));\n};\n\nexport default AddOrEditField;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/AddOrEditField.tsx"],"names":["useState","SelectFieldOptions","uniqid","AddOrEditField","fieldObject","changeDisplayComponent","updatedField","setUpdatedField","options","setNewOption","saveField","onNameChange","event","fieldName","target","value","onSelectChange","console","log","fieldType","selectedIndex","handleInputsSpawn","fieldOptions","id","onChange","filter","e","onDelete"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport SelectFieldOptions from \"../components/SelectFieldOptions\";\nimport uniqid from \"uniqid\";\n\nconst AddOrEditField = ({ fieldObject, changeDisplayComponent }: any) => {\n  const [updatedField, setUpdatedField] = useState(fieldObject);\n  const [options, setNewOption]: any = useState([]);\n\n  const saveField = () => {\n    //todo: post req na fields s editedField\n    setUpdatedField({});\n    changeDisplayComponent();\n  };\n\n  const onNameChange = (event: any) => {\n    setUpdatedField({ ...updatedField, fieldName: event.target.value });\n  };\n\n  const onSelectChange = (event: any) => {\n    console.log(fieldObject);\n    setUpdatedField({\n      ...updatedField,\n      fieldType: event.target.options[event.target.options.selectedIndex].value\n    });\n  };\n\n  const handleInputsSpawn = () => {\n    setNewOption({\n      ...updatedField,\n      fieldOptions: { id: uniqid(), value: \"\" }\n    });\n  };\n\n  const onChange = (event: any) => {\n    setNewOption(\n      options.filter((e: any) =>\n        event.target.id === e.id ? (e.value = event.target.value) : e\n      )\n    );\n  };\n\n  const onDelete = (event: any) => {\n    setNewOption(\n      options.filter((e: any) => (event.target.id !== e.id ? e : null))\n    );\n  };\n\n  return (\n    <div>\n      <label htmlFor=\"field-name\">Field name</label>\n      <input\n        type=\"text\"\n        id=\"field-name\"\n        defaultValue={updatedField.fieldName}\n        onChange={onNameChange}\n      />\n      <label htmlFor=\"field-type\">Field type</label>\n      <select id=\"field-type\" onChange={onSelectChange}>\n        <option value=\"text\">Text</option>\n        <option value=\"select\">Select</option>\n        <option value=\"number\">Number</option>\n      </select>\n      <SelectFieldOptions\n        options={updatedField.fieldOptions}\n        onChange={onChange}\n        onDelete={onDelete}\n      />\n      {updatedField.fieldType === \"select\" ? (\n        <button onClick={handleInputsSpawn}>New</button>\n      ) : null}\n      <button onClick={saveField}>Save</button>\n      <button onClick={changeDisplayComponent}>Cancel</button>\n    </div>\n  );\n};\n\nexport default AddOrEditField;\n"]},"metadata":{},"sourceType":"module"}