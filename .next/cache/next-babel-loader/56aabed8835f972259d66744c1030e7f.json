{"ast":null,"code":"import _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nclass stringMethods {\n  constructor(text) {\n    _defineProperty(this, \"text\", void 0);\n\n    _defineProperty(this, \"helperArray\", void 0);\n\n    _defineProperty(this, \"getIndexUpperCase\", () => {\n      const textInArray = _Array$from(this.text);\n\n      for (let i = 0; i < textInArray.length; i++) {\n        if (textInArray[i] === textInArray[i].toUpperCase()) {\n          this.helperArray.push(i);\n        }\n      }\n\n      return this;\n    });\n\n    _defineProperty(this, \"splitStringByIndex\", () => {\n      let arrayText = [];\n\n      for (let i = 0; i <= this.helperArray.length; i++) {\n        if (i === 0) {\n          //first iteration\n          arrayText.push(this.text.substr(0, this.helperArray[i]));\n        } else if (i > 0 && i < this.helperArray.length) {\n          //iteration in the middle\n          arrayText.push(this.text.substr(this.helperArray[i - 1], this.helperArray[i] - this.helperArray[i - 1]));\n        } else if (i === this.helperArray.length) {\n          //last iteration\n          arrayText.push(this.text.substr(this.helperArray[i - 1]));\n        }\n      }\n\n      this.text = arrayText.join(\" \");\n      return this;\n    });\n\n    _defineProperty(this, \"firstCharUpperCase\", () => {\n      let str = this.text.toLowerCase();\n      const firstCharString = str.substr(0, 1).toUpperCase();\n      const restString = str.substr(1);\n      this.text = firstCharString + restString;\n      return this;\n    });\n\n    _defineProperty(this, \"removeSlash\", () => {\n      this.text = this.text.replace('/', '');\n      return this;\n    });\n\n    _defineProperty(this, \"addStringToEnd\", str => {\n      this.text = this.text.contact(str);\n    });\n\n    this.text = text;\n    this.helperArray = [];\n  }\n\n}\n\n;\nexport default stringMethods;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/functions/stringMethods.tsx"],"names":["stringMethods","constructor","text","textInArray","i","length","toUpperCase","helperArray","push","arrayText","substr","join","str","toLowerCase","firstCharString","restString","replace","contact"],"mappings":";;;AAAA,MAAMA,aAAN,CAAoB;AAIhBC,EAAAA,WAAW,CAACC,IAAD,EAAgB;AAAA;;AAAA;;AAAA,+CAKP,MAAM;AACxB,YAAMC,WAAW,GAAG,YAAW,KAAKD,IAAhB,CAApB;;AAEA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAAW,CAACE,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,YAAID,WAAW,CAACC,CAAD,CAAX,KAAmBD,WAAW,CAACC,CAAD,CAAX,CAAeE,WAAf,EAAvB,EAAqD;AACnD,eAAKC,WAAL,CAAiBC,IAAjB,CAAsBJ,CAAtB;AACD;AACF;;AACD,aAAO,IAAP;AACD,KAd0B;;AAAA,gDAgBN,MAAM;AACzB,UAAIK,SAAS,GAAG,EAAhB;;AAEA,WAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,KAAKG,WAAL,CAAiBF,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;AACjD,YAAIA,CAAC,KAAK,CAAV,EAAa;AACX;AACAK,UAAAA,SAAS,CAACD,IAAV,CAAe,KAAKN,IAAL,CAAUQ,MAAV,CAAiB,CAAjB,EAAoB,KAAKH,WAAL,CAAiBH,CAAjB,CAApB,CAAf;AACD,SAHD,MAGO,IAAIA,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAG,KAAKG,WAAL,CAAiBF,MAAlC,EAA0C;AAC/C;AACAI,UAAAA,SAAS,CAACD,IAAV,CAAe,KAAKN,IAAL,CAAUQ,MAAV,CAAiB,KAAKH,WAAL,CAAiBH,CAAC,GAAG,CAArB,CAAjB,EAA0C,KAAKG,WAAL,CAAiBH,CAAjB,IAAsB,KAAKG,WAAL,CAAiBH,CAAC,GAAG,CAArB,CAAhE,CAAf;AACD,SAHM,MAGA,IAAIA,CAAC,KAAK,KAAKG,WAAL,CAAiBF,MAA3B,EAAmC;AACxC;AACAI,UAAAA,SAAS,CAACD,IAAV,CAAe,KAAKN,IAAL,CAAUQ,MAAV,CAAiB,KAAKH,WAAL,CAAiBH,CAAC,GAAG,CAArB,CAAjB,CAAf;AACD;AACF;;AACD,WAAKF,IAAL,GAAYO,SAAS,CAACE,IAAV,CAAe,GAAf,CAAZ;AAEA,aAAO,IAAP;AACD,KAlC0B;;AAAA,gDAoCN,MAAM;AACzB,UAAIC,GAAG,GAAG,KAAKV,IAAL,CAAUW,WAAV,EAAV;AACA,YAAMC,eAAe,GAAGF,GAAG,CAACF,MAAJ,CAAW,CAAX,EAAc,CAAd,EAAiBJ,WAAjB,EAAxB;AACA,YAAMS,UAAU,GAAGH,GAAG,CAACF,MAAJ,CAAW,CAAX,CAAnB;AACA,WAAKR,IAAL,GAAYY,eAAe,GAAGC,UAA9B;AACA,aAAO,IAAP;AACD,KA1C0B;;AAAA,yCA4Cb,MAAM;AAChB,WAAKb,IAAL,GAAY,KAAKA,IAAL,CAAUc,OAAV,CAAkB,GAAlB,EAAuB,EAAvB,CAAZ;AACA,aAAO,IAAP;AACH,KA/C0B;;AAAA,4CAiDTJ,GAAD,IAAkB;AAC/B,WAAKV,IAAL,GAAY,KAAKA,IAAL,CAAUe,OAAV,CAAkBL,GAAlB,CAAZ;AACH,KAnD0B;;AACzB,SAAKV,IAAL,GAAYA,IAAZ;AACA,SAAKK,WAAL,GAAmB,EAAnB;AACD;;AAPe;;AAwDjB;AAED,eAAeP,aAAf","sourcesContent":["class stringMethods {\n    text : string;\n    private helperArray : number[];\n\n    constructor(text : string) {\n      this.text = text;\n      this.helperArray = [];\n    }\n    \n    getIndexUpperCase = () => {\n      const textInArray = Array.from(this.text);\n  \n      for (let i = 0; i < textInArray.length; i++) {\n        if (textInArray[i] === textInArray[i].toUpperCase()) {\n          this.helperArray.push(i);\n        }\n      }\n      return this;\n    };\n  \n    splitStringByIndex = () => {\n      let arrayText = [];\n  \n      for (let i = 0; i <= this.helperArray.length; i++) {\n        if (i === 0) {\n          //first iteration\n          arrayText.push(this.text.substr(0, this.helperArray[i]));\n        } else if (i > 0 && i < this.helperArray.length) {\n          //iteration in the middle\n          arrayText.push(this.text.substr(this.helperArray[i - 1], this.helperArray[i] - this.helperArray[i - 1]));\n        } else if (i === this.helperArray.length) {\n          //last iteration\n          arrayText.push(this.text.substr(this.helperArray[i - 1]));\n        }\n      }\n      this.text = arrayText.join(\" \");\n  \n      return this;\n    };\n  \n    firstCharUpperCase = () => {\n      let str = this.text.toLowerCase();\n      const firstCharString = str.substr(0, 1).toUpperCase();\n      const restString = str.substr(1);\n      this.text = firstCharString + restString;\n      return this;\n    };\n\n    removeSlash = () => {\n        this.text = this.text.replace('/', '');\n        return this;\n    }\n\n    addStringToEnd = (str : string) =>Â {\n        this.text = this.text.contact(str)\n    }\n  };\n\n  export default stringMethods;"]},"metadata":{},"sourceType":"module"}