{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/EmailForm.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport UserContext from \"./UserContext\";\nimport languages from \"../library/languages\";\nimport globalVars from \"../library/globalVariables\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport { Box, Typography, TextField, Button, Grid } from \"@material-ui/core\";\nimport SendIcon from '@material-ui/icons/Send';\nconst useStyles = makeStyles(theme => createStyles({\n  formWrapper: {\n    marginTop: theme.spacing(3),\n    borderRadius: theme.spacing(1),\n    padding: theme.spacing(3),\n    boxShadow: theme.shadows[\"1\"],\n    backgroundColor: theme.palette.grey[\"200\"],\n    width: \"50%\",\n    [theme.breakpoints.down(\"sm\")]: {\n      width: \"100%\"\n    }\n  },\n  textField: {\n    marginTop: theme.spacing(2)\n  }\n}));\n\nconst EmailForm = ({\n  to,\n  isEmailCreated,\n  toggleIsEmailCreated,\n  unCheckAll\n}) => {\n  const initEmail = {\n    to: to,\n    subject: \"\",\n    message: \"\"\n  };\n  const {\n    0: email,\n    1: setEmail\n  } = useState(initEmail);\n  const {\n    0: spinner,\n    1: setSpinner\n  } = useState(false);\n  const user = useContext(UserContext);\n  const classes = useStyles({});\n  useEffect(() => {\n    setEmail(_objectSpread({}, email, {\n      to: to\n    }));\n  }, [to]);\n\n  const sendEmail = async e => {\n    e.preventDefault();\n    setSpinner(true);\n    const res = await axios({\n      method: \"post\",\n      data: email,\n      url: `${globalVars.serverURL}/emails/send`,\n      params: {\n        key: user.user.userkey\n      },\n      responseType: \"json\"\n    });\n    const data = await res.data;\n    data ? setSpinner(false) : null;\n\n    if (data === globalVars.msgSuccess || data === \"Setup your email settings first\") {\n      setEmail(initEmail);\n      toggleIsEmailCreated(); // if email is sending from clients page\n\n      unCheckAll ? unCheckAll() : null;\n      data === globalVars.msgSuccess ? alert(languages.en.yourEmailSentSucces) : alert(languages.en.setupYourEmailSettings);\n    } else {\n      alert(languages.en.somethingWentWrong);\n    }\n  };\n\n  const onChange = e => {\n    setEmail(_objectSpread({}, email, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return isEmailCreated && to.length > 0 ? __jsx(Box, {\n    className: classes.formWrapper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, __jsx(Typography, {\n    component: \"h2\",\n    variant: \"h4\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, languages.en.email), __jsx(\"form\", {\n    onSubmit: sendEmail,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, __jsx(TextField, {\n    type: \"text\",\n    id: \"email-to\",\n    margin: \"normal\",\n    fullWidth: true,\n    multiline: true,\n    label: languages.en.to,\n    name: \"to\",\n    value: email.to,\n    disabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, __jsx(TextField, {\n    type: \"text\",\n    id: \"email-subject\",\n    name: \"subject\",\n    margin: \"normal\",\n    fullWidth: true,\n    label: languages.en.subject,\n    autoFocus: true,\n    value: email.subject,\n    onChange: onChange,\n    disabled: spinner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, __jsx(TextField, {\n    name: \"message\",\n    multiline: true,\n    rows: \"4\",\n    fullWidth: true,\n    label: languages.en.message,\n    onChange: onChange,\n    value: email.message,\n    disabled: spinner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, __jsx(Box, {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    mt: \"2rem\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, spinner ? __jsx(LoadingSpinner, {\n    margin: \"r\",\n    level: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }) : null, __jsx(Button, {\n    onClick: toggleIsEmailCreated,\n    color: \"secondary\",\n    variant: \"contained\",\n    style: {\n      marginRight: \"1rem\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, languages.en.cancel), __jsx(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    variant: \"contained\",\n    disabled: spinner,\n    startIcon: __jsx(SendIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, languages.en.send)))))) : null;\n};\n\nexport default EmailForm;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/EmailForm.tsx"],"names":["useState","useEffect","useContext","axios","UserContext","languages","globalVars","LoadingSpinner","createStyles","makeStyles","Box","Typography","TextField","Button","Grid","SendIcon","useStyles","theme","formWrapper","marginTop","spacing","borderRadius","padding","boxShadow","shadows","backgroundColor","palette","grey","width","breakpoints","down","textField","EmailForm","to","isEmailCreated","toggleIsEmailCreated","unCheckAll","initEmail","subject","message","email","setEmail","spinner","setSpinner","user","classes","sendEmail","e","preventDefault","res","method","data","url","serverURL","params","key","userkey","responseType","msgSuccess","alert","en","yourEmailSentSucces","setupYourEmailSettings","somethingWentWrong","onChange","target","name","value","length","marginRight","cancel","send"],"mappings":"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","sourcesContent":["import { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport UserContext from \"./UserContext\";\nimport languages from \"../library/languages\";\nimport globalVars from \"../library/globalVariables\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { Box, Typography, TextField, Button, Grid } from \"@material-ui/core\";\nimport SendIcon from '@material-ui/icons/Send';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    formWrapper: {\n      marginTop: theme.spacing(3),\n      borderRadius: theme.spacing(1),\n      padding: theme.spacing(3),\n      boxShadow: theme.shadows[\"1\"],\n      backgroundColor: theme.palette.grey[\"200\"],\n      width: \"50%\",\n      [theme.breakpoints.down(\"sm\")]: {\n        width: \"100%\"\n      }\n    },\n    textField: {\n      marginTop: theme.spacing(2)\n    }\n  })\n);\n\nconst EmailForm = ({\n  to,\n  isEmailCreated,\n  toggleIsEmailCreated,\n  unCheckAll\n}: any) => {\n  const initEmail = { to: to, subject: \"\", message: \"\" };\n  const [email, setEmail] = useState(initEmail);\n  const [spinner, setSpinner] = useState(false);\n  const user = useContext(UserContext);\n  const classes = useStyles({});\n\n  useEffect(() => {\n    setEmail({ ...email, to: to });\n  }, [to]);\n\n  const sendEmail = async e => {\n    e.preventDefault();\n    setSpinner(true);\n\n    const res = await axios({\n      method: \"post\",\n      data: email,\n      url: `${globalVars.serverURL}/emails/send`,\n      params: { key: user.user.userkey },\n      responseType: \"json\"\n    });\n\n    const data = await res.data;\n    data ? setSpinner(false) : null;\n    if (\n      data === globalVars.msgSuccess ||\n      data === \"Setup your email settings first\"\n    ) {\n      setEmail(initEmail);\n      toggleIsEmailCreated();\n      // if email is sending from clients page\n      unCheckAll ? unCheckAll() : null;\n      data === globalVars.msgSuccess\n        ? alert(languages.en.yourEmailSentSucces)\n        : alert(languages.en.setupYourEmailSettings);\n    } else {\n      alert(languages.en.somethingWentWrong);\n    }\n  };\n\n  const onChange = e => {\n    setEmail({ ...email, [e.target.name]: e.target.value });\n  };\n\n  return isEmailCreated && to.length > 0 ? (\n    <Box className={classes.formWrapper}>\n      <Typography component=\"h2\" variant=\"h4\" gutterBottom>\n        {languages.en.email}\n      </Typography>\n      <form onSubmit={sendEmail}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <TextField\n              type=\"text\"\n              id=\"email-to\"\n              margin=\"normal\"\n              fullWidth\n              multiline\n              label={languages.en.to}\n              name=\"to\"\n              value={email.to}\n              disabled\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              type=\"text\"\n              id=\"email-subject\"\n              name=\"subject\"\n              margin=\"normal\"\n              fullWidth\n              label={languages.en.subject}\n              autoFocus={true}\n              value={email.subject}\n              onChange={onChange}\n              disabled={spinner}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              name=\"message\"\n              multiline\n              rows=\"4\"\n              fullWidth\n              label={languages.en.message}\n              onChange={onChange}\n              value={email.message}\n              disabled={spinner}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Box display=\"flex\" justifyContent=\"flex-end\" mt=\"2rem\">\n              {spinner ? <LoadingSpinner margin={\"r\"} level={2} /> : null}\n              <Button\n                onClick={toggleIsEmailCreated}\n                color=\"secondary\"\n                variant=\"contained\"\n                style={{marginRight: \"1rem\"}}\n              >\n                {languages.en.cancel}\n              </Button>\n              <Button type=\"submit\" color=\"primary\" variant=\"contained\" disabled={spinner} startIcon={<SendIcon/>}>\n                {languages.en.send}\n              </Button>\n            </Box>\n          </Grid>\n        </Grid>\n      </form>\n    </Box>\n  ) : null;\n};\n\nexport default EmailForm;\n"]},"metadata":{},"sourceType":"module"}