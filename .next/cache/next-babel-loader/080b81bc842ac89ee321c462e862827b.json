{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/pages/clients/[id].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Header from \"../../components/Header\";\nimport axios from \"axios\";\nimport { useEffect } from \"react\"; // import stringMethods from \"../../library/stringMethods\";\n\nimport globalVars from \"../../library/globalVariables\"; //TODO: SKRÝVÁNÍ POLÍ CO NEJSOU V DB\n\nvar Client = function Client(_ref) {\n  var clientData = _ref.clientData,\n      fieldsData = _ref.fieldsData;\n  var firstName = clientData.firstName,\n      lastName = clientData.lastName;\n  useEffect(function () {\n    document.title = \"\".concat(name, \" \").concat(globalVars.titleSubText); // console.log(clientData);\n    // console.log(fieldsData);\n  });\n\n  var showAllProperities = function showAllProperities() {\n    var list = [];\n    fieldsData.map(function (field) {\n      for (var key in clientData) {\n        // const field.fieldName = new stringMethods(key)\n        //   .camelStringToText()\n        //   .firstCharUpperCase()\n        //   .getString();\n        switch (field.fieldType) {\n          case \"text\":\n            list.push(__jsx(\"li\", {\n              key: field.fieldName,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 30\n              },\n              __self: this\n            }, field.fieldName, __jsx(\"textarea\", {\n              value: clientData[key],\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 32\n              },\n              __self: this\n            })));\n            break;\n\n          case \"number\":\n            list.push(__jsx(\"li\", {\n              key: field.fieldName,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 38\n              },\n              __self: this\n            }, field.fieldName, \":\", __jsx(\"input\", {\n              type: \"number\",\n              value: clientData[key],\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 39\n              },\n              __self: this\n            })));\n            break;\n\n          case \"select\":\n            list.push(__jsx(\"li\", {\n              key: key,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 45\n              },\n              __self: this\n            }, field.fieldName, \":\", __jsx(\"select\", {\n              value: clientData[key],\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 46\n              },\n              __self: this\n            })));\n        }\n      }\n    });\n    return list;\n  };\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, firstName, \" \", lastName), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, showAllProperities()));\n};\n\nClient.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(context) {\n    var id, resClient, clientData, resFields, fieldsData;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            id = context.query.id;\n            _context.next = 3;\n            return axios({\n              method: \"get\",\n              url: \"\".concat(globalVars.serverURL, \"/clients/\").concat(id),\n              responseType: \"json\"\n            });\n\n          case 3:\n            resClient = _context.sent;\n            _context.next = 6;\n            return resClient.data;\n\n          case 6:\n            clientData = _context.sent;\n            _context.next = 9;\n            return axios({\n              method: \"get\",\n              url: \"\".concat(globalVars.serverURL, \"/fields\"),\n              responseType: \"json\"\n            });\n\n          case 9:\n            resFields = _context.sent;\n            _context.next = 12;\n            return resFields.data;\n\n          case 12:\n            fieldsData = _context.sent;\n            return _context.abrupt(\"return\", {\n              clientData: clientData,\n              fieldsData: fieldsData\n            });\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default Client;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/pages/clients/[id].tsx"],"names":["Header","axios","useEffect","globalVars","Client","clientData","fieldsData","firstName","lastName","document","title","name","titleSubText","showAllProperities","list","map","field","key","fieldType","push","fieldName","getInitialProps","context","id","query","method","url","serverURL","responseType","resClient","data","resFields"],"mappings":"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","sourcesContent":["import Header from \"../../components/Header\";\nimport axios from \"axios\";\nimport { useEffect } from \"react\";\n// import stringMethods from \"../../library/stringMethods\";\nimport globalVars from \"../../library/globalVariables\";\n\n//TODO: SKRÝVÁNÍ POLÍ CO NEJSOU V DB\n\nconst Client = ({ clientData, fieldsData }: any) => {\n  const { firstName, lastName } = clientData;\n\n  useEffect(() => {\n    document.title = `${name} ${globalVars.titleSubText}`;\n    // console.log(clientData);\n    // console.log(fieldsData);\n  });\n\n  const showAllProperities = () => {\n    const list = [];\n\n    fieldsData.map(field => {\n      for (let key in clientData) {\n        // const field.fieldName = new stringMethods(key)\n        //   .camelStringToText()\n        //   .firstCharUpperCase()\n        //   .getString();\n          switch (field.fieldType) {\n            case \"text\":\n              list.push(\n                <li key={field.fieldName}>\n                  {field.fieldName}\n                  <textarea value={clientData[key]} />\n                </li>\n              );\n              break;\n            case \"number\":\n              list.push(\n                <li key={field.fieldName}>\n                  {field.fieldName}:<input type=\"number\" value={clientData[key]} />\n                </li>\n              );\n            break;\n            case \"select\":\n              list.push(\n                <li key={key}>\n                  {field.fieldName}:<select value={clientData[key]}></select>\n                </li>\n              )\n          }\n      }\n    });\n    return list;\n  };\n\n  return (\n    <div>\n      <Header />\n      <h1>\n        {firstName} {lastName}\n      </h1>\n      <ul>{showAllProperities()}</ul>\n    </div>\n  );\n};\n\nClient.getInitialProps = async (context: any) => {\n  const { id } = context.query;\n  const resClient = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/clients/${id}`,\n    responseType: \"json\"\n  });\n  const clientData = await resClient.data;\n\n  const resFields = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/fields`,\n    responseType: \"json\"\n  });\n  const fieldsData = await resFields.data;\n\n  return { clientData, fieldsData };\n};\n\nexport default Client;\n"]},"metadata":{},"sourceType":"module"}