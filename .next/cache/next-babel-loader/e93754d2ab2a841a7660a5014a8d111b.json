{"ast":null,"code":"var _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/clients/ClientForm.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport globalVars from \"../../library/globalVariables\";\nimport { MenuItem, Select, InputLabel, FormControl, TextField, Grid } from \"@material-ui/core\";\n\nconst ClientForm = ({\n  fields,\n  onChange,\n  newClient\n}) => {\n  const inputs = fields.map(e => {\n    if (e.fieldName !== globalVars.permanentFields.dateAdded && e.fieldName !== globalVars.permanentFields.lastModified) {\n      if (e.fieldType === \"text\") {\n        return __jsx(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          key: e.fieldName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        }, __jsx(TextField, {\n          type: \"text\",\n          key: e.fieldName,\n          label: e.fieldName,\n          id: e.fieldName,\n          autoFocus: e.fieldName === globalVars.permanentFields.fistName,\n          name: e.fieldName,\n          margin: \"normal\",\n          fullWidth: true,\n          onChange: () => onChange(e.fieldType, event),\n          defaultValue: newClient[e.fieldName],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }));\n      } else if (e.fieldType === \"number\") {\n        return __jsx(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          key: e.fieldName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }, __jsx(TextField, {\n          id: e.fieldName,\n          key: e.fieldName,\n          label: e.fieldName,\n          margin: \"normal\",\n          fullWidth: true,\n          type: \"number\",\n          name: e.fieldName,\n          onChange: () => onChange(e.fieldType, event),\n          defaultValue: newClient[e.fieldName],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        }));\n      } else if (e.fieldType === \"select\") {\n        return __jsx(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          key: e.fieldName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }, __jsx(FormControl, {\n          margin: \"normal\",\n          fullWidth: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }, __jsx(InputLabel, {\n          htmlFor: e.fieldName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, e.fieldName), __jsx(Select, {\n          id: e.fieldName,\n          name: e.fieldName,\n          onChange: () => onChange(e.fieldType, event),\n          value: newClient[e.fieldName] ? newClient[e.fieldName] : \"\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, __jsx(MenuItem, {\n          value: \"\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, globalVars.blankOption), e.fieldOptions.map(e => {\n          return __jsx(MenuItem, {\n            value: e.value,\n            key: e.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 64\n            },\n            __self: this\n          }, e.value);\n        }))));\n      }\n    }\n  });\n  return __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, inputs);\n};\n\nexport default ClientForm;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/clients/ClientForm.tsx"],"names":["globalVars","MenuItem","Select","InputLabel","FormControl","TextField","Grid","ClientForm","fields","onChange","newClient","inputs","map","e","fieldName","permanentFields","dateAdded","lastModified","fieldType","fistName","event","blankOption","fieldOptions","value","id"],"mappings":"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","sourcesContent":["import globalVars from \"../../library/globalVariables\";\nimport {\n  MenuItem,\n  Select,\n  InputLabel,\n  FormControl,\n  TextField,\n  Grid\n} from \"@material-ui/core\";\n\nconst ClientForm = ({ fields, onChange, newClient }: any) => {\n  const inputs = fields.map((e: any) => {\n    if (\n      e.fieldName !== globalVars.permanentFields.dateAdded &&\n      e.fieldName !== globalVars.permanentFields.lastModified\n    ) {\n      if (e.fieldType === \"text\") {\n        return (\n          <Grid item xs={12} sm={6} key={e.fieldName}>\n            <TextField\n              type=\"text\"\n              key={e.fieldName}\n              label={e.fieldName}\n              id={e.fieldName}\n              autoFocus={e.fieldName === globalVars.permanentFields.fistName}\n              name={e.fieldName}\n              margin=\"normal\"\n              fullWidth\n              onChange={() => onChange(e.fieldType, event)}\n              defaultValue={newClient[e.fieldName]}\n            />\n          </Grid>\n        );\n      } else if (e.fieldType === \"number\") {\n        return (\n          <Grid item xs={12} sm={6} key={e.fieldName}>\n            <TextField\n              id={e.fieldName}\n              key={e.fieldName}\n              label={e.fieldName}\n              margin=\"normal\"\n              fullWidth\n              type=\"number\"\n              name={e.fieldName}\n              onChange={() => onChange(e.fieldType, event)}\n              defaultValue={newClient[e.fieldName]}\n            />\n          </Grid>\n        );\n      } else if (e.fieldType === \"select\") {\n        return (\n          <Grid item xs={12} sm={6} key={e.fieldName}>\n            <FormControl margin=\"normal\" fullWidth>\n              <InputLabel htmlFor={e.fieldName}>{e.fieldName}</InputLabel>\n              <Select\n                id={e.fieldName}\n                name={e.fieldName}\n                onChange={() => onChange(e.fieldType, event)}\n                value={newClient[e.fieldName] ? newClient[e.fieldName] : \"\"}\n              >\n                <MenuItem value=\"\">{globalVars.blankOption}</MenuItem>\n                {e.fieldOptions.map((e: any) => {\n                  return (\n                    <MenuItem value={e.value} key={e.id}>\n                      {e.value}\n                    </MenuItem>\n                  );\n                })}\n              </Select>\n            </FormControl>\n          </Grid>\n        );\n      }\n    }\n  });\n  return (\n    <Grid container spacing={3}>\n      {inputs}\n    </Grid>\n  );\n};\n\nexport default ClientForm;\n"]},"metadata":{},"sourceType":"module"}