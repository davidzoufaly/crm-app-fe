{"ast":null,"code":"var _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/settings/webform/WebForm.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport WebFormSelect from \"./WebFormSelect\";\nimport { useReducer } from \"react\";\n\nvar WebForm = function WebForm(_ref) {\n  var fields = _ref.fields;\n\n  var _useReducer = useReducer(function (state, action) {\n    switch (action.type) {\n      case \"added\":\n        return state.map(function (field) {\n          return field.fieldName === action.payload;\n        });\n\n      default:\n        return state;\n    }\n  }, fields),\n      webFields = _useReducer[0];\n\n  var addedToForm = function addedToForm() {};\n\n  return __jsx(React.Fragment, null, __jsx(WebFormSelect, {\n    webFields: webFields,\n    addedToForm: addedToForm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }));\n};\n\nexport default WebForm;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/settings/webform/WebForm.tsx"],"names":["WebFormSelect","useReducer","WebForm","fields","state","action","type","map","field","fieldName","payload","webFields","addedToForm"],"mappings":";;;AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AACA,SAASC,UAAT,QAA2B,OAA3B;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAgB;AAAA,MAAbC,MAAa,QAAbA,MAAa;;AAAA,oBACVF,UAAU,CAAC,UAACG,KAAD,EAAQC,MAAR,EAAmB;AAChD,YAAQA,MAAM,CAACC,IAAf;AACE,WAAK,OAAL;AACE,eAAOF,KAAK,CAACG,GAAN,CAAU,UAAAC,KAAK;AAAA,iBAAIA,KAAK,CAACC,SAAN,KAAoBJ,MAAM,CAACK,OAA/B;AAAA,SAAf,CAAP;;AACF;AACE,eAAON,KAAP;AAJJ;AAMD,GAP6B,EAO3BD,MAP2B,CADA;AAAA,MACvBQ,SADuB;;AAU9B,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM,CAEzB,CAFD;;AAIA,SACE,4BACE,MAAC,aAAD;AAAe,IAAA,SAAS,EAAED,SAA1B;AAAqC,IAAA,WAAW,EAAEC,WAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAnBD;;AAqBA,eAAeV,OAAf","sourcesContent":["import WebFormSelect from \"./WebFormSelect\";\nimport { useReducer } from \"react\";\n\nconst WebForm = ({ fields }) => {\n  const [webFields] = useReducer((state, action) => {\n    switch (action.type) {\n      case \"added\": \n        return state.map(field => field.fieldName === action.payload)\n      default:\n        return state;\n    }\n  }, fields);\n\n  const addedToForm = () => {\n\n  }\n\n  return (\n    <>\n      <WebFormSelect webFields={webFields} addedToForm={addedToForm} />\n    </>\n  );\n};\n\nexport default WebForm;\n"]},"metadata":{},"sourceType":"module"}