{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/pages/settings/[key].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Header from \"../../components/Header\";\nimport { useRouter } from \"next/router\";\nimport { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport UserContext from \"../../components/UserContext\";\nimport DefaultFieldsSection from \"../../components/settings/DefaultFieldsSection\";\nimport CustomFieldsSection from \"../../components/settings/customFields/CustomFieldsSection\";\nimport LoadingSpinner from \"../../components/LoadingSpinner\";\nimport EmailSettingsSection from \"../../components/settings/emailSettings/EmailSettingsSection\";\nimport WebFormSection from \"../../components/settings/webform/WebFormSection\";\nimport globalVars from \"../../library/globalVariables\";\nimport stringMethods from \"../../library/stringMethods\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst Settings = ({\n  dataFields,\n  username,\n  pass\n}) => {\n  const router = useRouter();\n  const {\n    0: fields,\n    1: setField\n  } = useState(dataFields);\n  const {\n    0: initialized,\n    1: setInitialized\n  } = useState(false);\n  const {\n    0: sections,\n    1: setSection\n  } = useState({});\n  const user = useContext(UserContext);\n\n  const toggleSection = e => {\n    setSection(_objectSpread({}, sections, {\n      [e.target.name]: e.target.checked\n    }));\n  };\n\n  useEffect(() => {\n    console.log(fields);\n  }, [fields]);\n\n  const addField = obj => {\n    setField(fields.some(field => field._id === obj._id) ? fields.map(field => field._id === obj._id ? obj : field) : [...fields, obj]);\n  };\n\n  const removeField = id => {\n    setField(fields.filter(field => field._id !== id));\n  };\n\n  useEffect(() => {\n    //title from url\n    const title = new stringMethods(router.pathname).removeSlash().removeSlashAndTextAfter().firstCharUpperCase().addStringToEnd(globalVars.titleSubText).getString();\n    document.title = title; //componendDidMount effect\n\n    setInitialized(true);\n    user.checkUser();\n  }, [router]);\n  const h1 = new stringMethods(router.pathname).removeSlash().removeSlashAndTextAfter().firstCharUpperCase().getString();\n  return !user.user.signedIn && !initialized ? __jsx(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }) : __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), __jsx(Typography, {\n    variant: \"h3\",\n    component: \"h1\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, h1), __jsx(DefaultFieldsSection, {\n    fields: fields,\n    toggleSection: toggleSection,\n    sections: sections,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), __jsx(CustomFieldsSection, {\n    fields: fields,\n    removeField: removeField,\n    addField: addField,\n    sections: sections,\n    toggleSection: toggleSection,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), __jsx(EmailSettingsSection, {\n    username: username,\n    pass: pass,\n    toggleSection: toggleSection,\n    sections: sections,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), __jsx(WebFormSection, {\n    fields: fields,\n    toggleSection: toggleSection,\n    sections: sections,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }));\n};\n\nSettings.getInitialProps = async context => {\n  const resFields = await axios({\n    method: \"GET\",\n    params: {\n      key: context.query.key\n    },\n    url: `${globalVars.serverURL}/fields`,\n    responseType: \"json\"\n  });\n  const dataFields = await resFields.data;\n  const resEmailSettings = await axios({\n    method: \"GET\",\n    params: {\n      key: context.query.key\n    },\n    url: `${globalVars.serverURL}/emails/email-settings`,\n    responseType: \"json\"\n  });\n  const dataEmailSettings = await resEmailSettings.data;\n  const {\n    username,\n    pass\n  } = await dataEmailSettings;\n  return {\n    dataFields,\n    username,\n    pass\n  };\n};\n\nexport default Settings;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/pages/settings/[key].tsx"],"names":["Header","useRouter","useState","useEffect","useContext","axios","UserContext","DefaultFieldsSection","CustomFieldsSection","LoadingSpinner","EmailSettingsSection","WebFormSection","globalVars","stringMethods","Typography","Settings","dataFields","username","pass","router","fields","setField","initialized","setInitialized","sections","setSection","user","toggleSection","e","target","name","checked","console","log","addField","obj","some","field","_id","map","removeField","id","filter","title","pathname","removeSlash","removeSlashAndTextAfter","firstCharUpperCase","addStringToEnd","titleSubText","getString","document","checkUser","h1","signedIn","getInitialProps","context","resFields","method","params","key","query","url","serverURL","responseType","data","resEmailSettings","dataEmailSettings"],"mappings":"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","sourcesContent":["import Header from \"../../components/Header\";\nimport { useRouter } from \"next/router\";\nimport { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport UserContext from \"../../components/UserContext\";\nimport DefaultFieldsSection from \"../../components/settings/DefaultFieldsSection\";\nimport CustomFieldsSection from \"../../components/settings/customFields/CustomFieldsSection\";\nimport LoadingSpinner from \"../../components/LoadingSpinner\";\nimport EmailSettingsSection from \"../../components/settings/emailSettings/EmailSettingsSection\";\nimport WebFormSection from \"../../components/settings/webform/WebFormSection\";\nimport globalVars from \"../../library/globalVariables\";\nimport stringMethods from \"../../library/stringMethods\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst Settings = ({ dataFields, username, pass }: any) => {\n  const router = useRouter();\n  const [fields, setField] = useState(dataFields);\n  const [initialized, setInitialized] = useState(false);\n  const [sections, setSection] = useState({});\n  const user = useContext(UserContext);\n\n  const toggleSection = e => {\n    setSection({\n      ...sections,\n      [e.target.name]: e.target.checked\n    });\n  };\n\n  useEffect(() => {\n    console.log(fields);\n  }, [fields]);\n\n  const addField = obj => {\n    setField(\n      fields.some(field => field._id === obj._id)\n        ? fields.map(field => (field._id === obj._id ? obj : field))\n        : [...fields, obj]\n    );\n  };\n\n  const removeField = id => {\n    setField(\n      fields.filter(field => field._id !== id)\n    )\n  }\n\n  useEffect(() => {\n    //title from url\n    const title = new stringMethods(router.pathname)\n      .removeSlash()\n      .removeSlashAndTextAfter()\n      .firstCharUpperCase()\n      .addStringToEnd(globalVars.titleSubText)\n      .getString();\n    document.title = title;\n    //componendDidMount effect\n    setInitialized(true);\n    user.checkUser();\n  }, [router]);\n\n  const h1 = new stringMethods(router.pathname)\n    .removeSlash()\n    .removeSlashAndTextAfter()\n    .firstCharUpperCase()\n    .getString();\n\n  return !user.user.signedIn && !initialized ? (\n    <LoadingSpinner />\n  ) : (\n    <div>\n      <Header />\n      <Typography variant=\"h3\" component=\"h1\" gutterBottom>\n        {h1}\n      </Typography>\n      <DefaultFieldsSection\n        fields={fields}\n        toggleSection={toggleSection}\n        sections={sections}\n      />\n      <CustomFieldsSection\n        fields={fields}\n        removeField={removeField}\n        addField={addField}\n        sections={sections}\n        toggleSection={toggleSection}\n      />\n      <EmailSettingsSection\n        username={username}\n        pass={pass}\n        toggleSection={toggleSection}\n        sections={sections}\n      />\n      <WebFormSection\n        fields={fields}\n        toggleSection={toggleSection}\n        sections={sections}\n      />\n    </div>\n  );\n};\n\nSettings.getInitialProps = async (context: any) => {\n  const resFields = await axios({\n    method: \"GET\",\n    params: { key: context.query.key },\n    url: `${globalVars.serverURL}/fields`,\n    responseType: \"json\"\n  });\n  const dataFields = await resFields.data;\n\n  const resEmailSettings = await axios({\n    method: \"GET\",\n    params: { key: context.query.key },\n    url: `${globalVars.serverURL}/emails/email-settings`,\n    responseType: \"json\"\n  });\n\n  const dataEmailSettings = await resEmailSettings.data;\n  const { username, pass } = await dataEmailSettings;\n\n  return { dataFields, username, pass };\n};\n\nexport default Settings;\n"]},"metadata":{},"sourceType":"module"}