{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState, useContext } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport Header from \"../../components/Header\";\nimport ShowRecordsNumber from \"../../components/dashboard/ShowRecordsNumber\";\nimport LoadingSpinner from \"../../components/LoadingSpinner\";\nimport UserContext from \"../../components/UserContext\";\nimport globalVars from \"../../library/globalVariables\";\nimport stringMethods from \"../../library/stringMethods\";\nimport languages from \"../../library/languages\";\nimport { Typography, Grid } from \"@material-ui/core\";\n\nconst Dashboard = ({\n  lastCampaign,\n  clientsLastWeek,\n  clientCounter,\n  fieldCounter,\n  emailsCounter\n}) => {\n  const router = useRouter();\n  const {\n    0: initialized,\n    1: setInitialized\n  } = useState(false);\n  const user = useContext(UserContext);\n  useEffect(() => {\n    const title = new stringMethods(router.pathname).removeSlash().removeSlashAndTextAfter().firstCharUpperCase().addStringToEnd(globalVars.titleSubText).getString();\n    document.title = title;\n    setInitialized(true);\n    user.checkUser();\n  }, [router]);\n  const h1 = new stringMethods(router.pathname).removeSlash().removeSlashAndTextAfter().firstCharUpperCase().getString();\n  const campaignStr = lastCampaign.length > 0 ? `${languages.en.last} ${languages.en.sent} ${lastCampaign[0].date} ${languages.en.to.toLowerCase()} ${lastCampaign[0].to.length} ${lastCampaign[0].to.length > 1 ? languages.en.clients : languages.en.client}` : \"\";\n  const lastWeekStr = `${clientsLastWeek > 0 ? \"+\" : \"\"} ${clientsLastWeek} ${languages.en.pastSevenDays}`;\n  return !initialized && !user.user.signedIn ? __jsx(LoadingSpinner, null) : __jsx(React.Fragment, null, __jsx(Header, null), __jsx(Typography, {\n    component: \"h1\",\n    variant: \"h3\",\n    gutterBottom: true\n  }, h1), __jsx(Grid, {\n    container: true,\n    justify: \"space-around\",\n    alignItems: \"stretch\",\n    spacing: 4\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 4\n  }, __jsx(ShowRecordsNumber, {\n    data: clientCounter,\n    string: languages.en.clientsSaved,\n    buttonString: languages.en.clients,\n    subData: lastWeekStr,\n    link: \"/clients\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 4\n  }, __jsx(ShowRecordsNumber, {\n    data: fieldCounter.custom,\n    string: languages.en.customClientFields,\n    buttonString: languages.en.customClientFields,\n    subData: `${fieldCounter.permanent + fieldCounter.custom} ${languages.en.total}`,\n    link: \"/settings\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 4\n  }, __jsx(ShowRecordsNumber, {\n    data: emailsCounter,\n    string: languages.en.emailsSent,\n    buttonString: languages.en.emails,\n    subData: campaignStr,\n    link: \"/emails\"\n  }))));\n};\n\nDashboard.getInitialProps = async context => {\n  const resLastCampaign = await axios(`${globalVars.serverURL}/emails/last?key=${context.query.key}`);\n  const resLastWeekNumber = await axios(`${globalVars.serverURL}/clients/last-week?key=${context.query.key}`);\n  const resClientCount = await axios(`${globalVars.serverURL}/clients/count?key=${context.query.key}`);\n  const resFieldsData = await axios(`${globalVars.serverURL}/fields/count?key=${context.query.key}`);\n  const resEmailsCount = await axios(`${globalVars.serverURL}/emails/count?key=${context.query.key}`);\n  const lastCampaign = await resLastCampaign.data;\n  const clientsLastWeek = await resLastWeekNumber.data;\n  const clientCounter = await resClientCount.data;\n  const fieldCounter = await resFieldsData.data;\n  const emailsCounter = await resEmailsCount.data;\n  return {\n    lastCampaign,\n    clientsLastWeek,\n    clientCounter,\n    fieldCounter,\n    emailsCounter\n  };\n};\n\nexport default Dashboard;","map":null,"metadata":{},"sourceType":"module"}