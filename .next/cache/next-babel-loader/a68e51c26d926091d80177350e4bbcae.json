{"ast":null,"code":"var _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/clients/ClientForm.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport stringMethods from \"../../library/stringMethods\";\n\nvar ClientForm = function ClientForm(_ref) {\n  var fields = _ref.fields,\n      _onChange = _ref.onChange,\n      newClient = _ref.newClient;\n  var inputs = fields.map(function (e) {\n    if (e.fieldName !== \"dateAdded\" && e.fieldName !== \"dateModified\") {\n      if (e.fieldType === \"text\") {\n        return __jsx(\"div\", {\n          key: e.fieldName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 8\n          },\n          __self: this\n        }, __jsx(\"label\", {\n          htmlFor: e.fieldName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 9\n          },\n          __self: this\n        }, new stringMethods(e.fieldName).camelStringToText().firstCharUpperCase().getString()), __jsx(\"input\", {\n          type: \"text\",\n          id: e.fieldName,\n          name: e.fieldName,\n          onChange: function onChange() {\n            return _onChange(e.fieldType, event);\n          } // value={newClient[e.fieldName]}\n          ,\n          defaultValue: newClient[e.fieldName],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 15\n          },\n          __self: this\n        }));\n      } else if (e.fieldType === \"number\") {\n        return __jsx(\"div\", {\n          key: e.fieldName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        }, __jsx(\"label\", {\n          htmlFor: e.fieldName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        }, \" \", new stringMethods(e.fieldName).camelStringToText().firstCharUpperCase().getString()), __jsx(\"input\", {\n          id: e.fieldName,\n          type: \"number\",\n          name: e.fieldName,\n          onChange: function onChange() {\n            return _onChange(e.fieldType, event);\n          },\n          value: newClient[e.fieldName],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }));\n      } else if (e.fieldType === \"select\") {\n        return __jsx(\"div\", {\n          key: e.fieldName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, __jsx(\"label\", {\n          htmlFor: e.fieldName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, \" \", new stringMethods(e.fieldName).camelStringToText().firstCharUpperCase().getString()), __jsx(\"select\", {\n          id: e.fieldName,\n          name: e.fieldName,\n          onChange: function onChange() {\n            return _onChange(e.fieldType, event);\n          },\n          value: newClient[e.fieldName],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, __jsx(\"option\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, \"---\"), e.fieldOptions.map(function (e) {\n          return __jsx(\"option\", {\n            value: e.value,\n            key: e.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63\n            },\n            __self: this\n          }, e.value);\n        })));\n      }\n    }\n  });\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, inputs);\n};\n\nexport default ClientForm;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/clients/ClientForm.tsx"],"names":["stringMethods","ClientForm","fields","onChange","newClient","inputs","map","e","fieldName","fieldType","camelStringToText","firstCharUpperCase","getString","event","fieldOptions","value","id"],"mappings":"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","sourcesContent":["import stringMethods from \"../../library/stringMethods\";\n\nconst ClientForm = ({ fields, onChange, newClient }: any) => {\n  const inputs = fields.map((e: any) => {\n    if (e.fieldName !== \"dateAdded\" && e.fieldName !== \"dateModified\") {\n      if (e.fieldType === \"text\") {\n        return (\n          <div key={e.fieldName}>\n            <label htmlFor={e.fieldName}>\n              {new stringMethods(e.fieldName)\n                .camelStringToText()\n                .firstCharUpperCase()\n                .getString()}\n            </label>\n            <input\n              type=\"text\"\n              id={e.fieldName}\n              name={e.fieldName}\n              onChange={() => onChange(e.fieldType, event)}\n              // value={newClient[e.fieldName]}\n              defaultValue={newClient[e.fieldName]}\n            />\n          </div>\n        );\n      } else if (e.fieldType === \"number\") {\n        return (\n          <div key={e.fieldName}>\n            <label htmlFor={e.fieldName}>\n              {\" \"}\n              {new stringMethods(e.fieldName)\n                .camelStringToText()\n                .firstCharUpperCase()\n                .getString()}\n            </label>\n            <input\n              id={e.fieldName}\n              type=\"number\"\n              name={e.fieldName}\n              onChange={() => onChange(e.fieldType, event)}\n              value={newClient[e.fieldName]}\n            />\n          </div>\n        );\n      } else if (e.fieldType === \"select\") {\n        return (\n          <div key={e.fieldName}>\n            <label htmlFor={e.fieldName}>\n              {\" \"}\n              {new stringMethods(e.fieldName)\n                .camelStringToText()\n                .firstCharUpperCase()\n                .getString()}\n            </label>\n            <select\n              id={e.fieldName}\n              name={e.fieldName}\n              onChange={() => onChange(e.fieldType, event)}\n              value={newClient[e.fieldName]}\n            >\n              <option>---</option>\n              {e.fieldOptions.map((e: any) => {\n                return (\n                  <option value={e.value} key={e.id}>\n                    {e.value}\n                  </option>\n                );\n              })}\n            </select>\n          </div>\n        );\n      }\n    }\n  });\n  return <div>{inputs}</div>;\n};\n\nexport default ClientForm;\n"]},"metadata":{},"sourceType":"module"}