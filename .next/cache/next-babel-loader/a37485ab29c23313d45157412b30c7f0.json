{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useReducer, useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport UserContext from \"../../UserContext\";\nimport WebFormSelect from \"./WebFormSelect\";\nimport WebFormList from \"./WebFormList\";\nimport WebFormVisibleOrNot from \"./WebFormVisibleOrNot\";\nimport WebFormSubSelect from \"./WebFormSubSelect\";\nimport WebFormButtons from \"./WebFormButtons\";\nimport globalVars from \"../../../library/globalVariables\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport { Box } from \"@material-ui/core\";\nconst useStyles = makeStyles(theme => createStyles({\n  formWrapper: {\n    marginTop: theme.spacing(3),\n    borderRadius: theme.spacing(1),\n    boxShadow: theme.shadows[\"1\"],\n    padding: theme.spacing(3),\n    backgroundColor: theme.palette.grey[\"200\"],\n    width: \"50%\",\n    [theme.breakpoints.down(\"sm\")]: {\n      width: \"100%\"\n    }\n  },\n  textField: {\n    marginTop: theme.spacing(2)\n  }\n}));\n\nconst WebForm = ({\n  fields\n}) => {\n  const initCounterValue = fields.map(e => e.order).sort((a, b) => b > a ? 1 : -1)[0];\n  const classes = useStyles({});\n  const user = useContext(UserContext);\n  const {\n    0: counter,\n    1: setCounter\n  } = useState(initCounterValue);\n  const {\n    0: webFields,\n    1: setWebFields\n  } = useReducer((state, action) => {\n    switch (action.type) {\n      case \"add\":\n        return state.map(field => field.fieldName === action.payload.fieldName ? _objectSpread({}, field, {\n          fieldInForm: true,\n          order: counter\n        }) : field);\n\n      case \"addVisibleSelect\":\n        return state.map(field => field.fieldName === action.payload.fieldName ? _objectSpread({}, field, {\n          fieldInForm: true,\n          fieldFormVisible: true,\n          pause: false,\n          order: counter\n        }) : field);\n\n      case \"addNotVisibleValue\":\n        return state.map(field => field.pause ? _objectSpread({}, field, {\n          fieldFormVisible: false\n        }) : field);\n\n      case \"addHiddenSelect\":\n        return state.map(field => field.pause ? _objectSpread({}, field, {\n          fieldInForm: true,\n          pause: false,\n          order: counter,\n          fieldOptions: field.fieldOptions.map(option => option.value === action.payload.optionValue ? _objectSpread({}, option, {\n            preselected: true\n          }) : option)\n        }) : field);\n\n      case \"pauseSelect\":\n        return state.map(field => field.fieldName === action.payload.fieldName ? _objectSpread({}, field, {\n          pause: true\n        }) : field);\n\n      case \"remove\":\n        return state.map(field => field.fieldName === action.payload.fieldName ? _objectSpread({}, field, {\n          fieldInForm: false,\n          fieldFormVisible: null,\n          fieldOptions: field.fieldOptions.map(option => option.preselected ? _objectSpread({}, option, {\n            preselected: null\n          }) : option)\n        }) : field);\n\n      default:\n        return state;\n    }\n  }, fields);\n\n  const addNotSelect = e => {\n    webFields.map(field => {\n      if (field.fieldName === e.target.value) {\n        if (field.fieldType !== \"select\") {\n          setWebFields({\n            type: \"add\",\n            payload: {\n              fieldName: e.target.value\n            }\n          });\n          setCounter(prevCount => prevCount + 1);\n        } else {\n          setWebFields({\n            type: \"pauseSelect\",\n            payload: {\n              fieldName: e.target.value\n            }\n          });\n        }\n      }\n    });\n  };\n\n  const addVisibleSelect = e => {\n    setWebFields({\n      type: \"addVisibleSelect\",\n      payload: {\n        fieldName: e.currentTarget.id\n      }\n    });\n    setCounter(prevCount => prevCount + 1);\n  };\n\n  const addHiddenSelect = e => {\n    setWebFields({\n      type: \"addHiddenSelect\",\n      payload: {\n        optionValue: e.target.value\n      }\n    });\n    setCounter(prevCount => prevCount + 1);\n  };\n\n  const removeFromList = e => {\n    setWebFields({\n      type: \"remove\",\n      payload: {\n        fieldName: e.currentTarget.id\n      }\n    });\n  };\n\n  const showOptionsOnClick = () => {\n    setWebFields({\n      type: \"addNotVisibleValue\"\n    });\n  };\n\n  const saveFormAuto = async () => {\n    await axios({\n      method: \"PUT\",\n      url: `${globalVars.serverURL}/fields`,\n      params: {\n        key: user.user.userkey\n      },\n      data: webFields,\n      responseType: \"json\"\n    });\n  };\n\n  useEffect(() => {\n    //save fields (form) on change\n    webFields !== fields ? saveFormAuto() : null;\n  }, [webFields]);\n  return __jsx(Box, {\n    className: classes.formWrapper\n  }, __jsx(\"form\", null, __jsx(WebFormSelect, {\n    webFields: webFields,\n    addNotSelect: addNotSelect\n  }), __jsx(WebFormVisibleOrNot, {\n    webFields: webFields,\n    addVisibleSelect: addVisibleSelect,\n    showOptionsOnClick: showOptionsOnClick\n  }), __jsx(WebFormSubSelect, {\n    webFields: webFields,\n    addHiddenSelect: addHiddenSelect\n  }), __jsx(WebFormList, {\n    webFields: webFields,\n    removeFromList: removeFromList\n  }), __jsx(WebFormButtons, {\n    webFields: webFields\n  })));\n};\n\nexport default WebForm;","map":null,"metadata":{},"sourceType":"module"}