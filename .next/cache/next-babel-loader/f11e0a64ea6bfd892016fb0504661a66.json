{"ast":null,"code":"var _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/settings/webform/WebFormOptionSelect.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nvar webFormOptionSelect = function webFormOptionSelect(_ref) {\n  var optionSelect = _ref.optionSelect,\n      webFields = _ref.webFields,\n      addVisibleSelect = _ref.addVisibleSelect,\n      showOptions = _ref.showOptions;\n  var insertIntoForm = webFields.map(function (field) {\n    return optionSelect === field.fieldName ? __jsx(\"div\", {\n      key: field.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5\n      },\n      __self: this\n    }, \"Should be \", __jsx(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 6\n      },\n      __self: this\n    }, field.fieldName), \" visible in form?\"), __jsx(\"button\", {\n      id: field.fieldName,\n      onClick: addVisibleSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8\n      },\n      __self: this\n    }, \"YES\"), __jsx(\"button\", {\n      id: field.fieldName,\n      onClick: showOptions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, \"NO\")) : null;\n  });\n  return __jsx(React.Fragment, null, insertIntoForm);\n};\n\nexport default webFormOptionSelect;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/settings/webform/WebFormOptionSelect.tsx"],"names":["webFormOptionSelect","optionSelect","webFields","addVisibleSelect","showOptions","insertIntoForm","map","field","fieldName","id"],"mappings":";;;;AAAA,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,OAAgE;AAAA,MAA7DC,YAA6D,QAA7DA,YAA6D;AAAA,MAA/CC,SAA+C,QAA/CA,SAA+C;AAAA,MAApCC,gBAAoC,QAApCA,gBAAoC;AAAA,MAAlBC,WAAkB,QAAlBA,WAAkB;AAC1F,MAAMC,cAAc,GAAGH,SAAS,CAACI,GAAV,CAAc,UAAAC,KAAK;AAAA,WACxCN,YAAY,KAAKM,KAAK,CAACC,SAAvB,GACE;AAAK,MAAA,GAAG,EAAED,KAAK,CAACE,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAASF,KAAK,CAACC,SAAf,CADZ,sBADF,EAIE;AAAQ,MAAA,EAAE,EAAED,KAAK,CAACC,SAAlB;AAA6B,MAAA,OAAO,EAAEL,gBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAJF,EAOE;AAAQ,MAAA,EAAE,EAAEI,KAAK,CAACC,SAAlB;AAA6B,MAAA,OAAO,EAAEJ,WAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,CADF,GAYI,IAboC;AAAA,GAAnB,CAAvB;AAgBA,SACE,4BACGC,cADH,CADF;AAKD,CAtBD;;AAwBA,eAAeL,mBAAf","sourcesContent":["const webFormOptionSelect = ({ optionSelect, webFields, addVisibleSelect, showOptions }) => {\n  const insertIntoForm = webFields.map(field =>\n    optionSelect === field.fieldName ? (\n      <div key={field.id}>\n        <p>\n          Should be <strong>{field.fieldName}</strong> visible in form?\n        </p>\n        <button id={field.fieldName} onClick={addVisibleSelect}>\n          YES\n        </button>\n        <button id={field.fieldName} onClick={showOptions}>\n          NO\n        </button>\n      </div>\n    ) : null\n  );\n\n  return (\n    <>\n      {insertIntoForm}\n    </>\n  );\n};\n\nexport default webFormOptionSelect;\n"]},"metadata":{},"sourceType":"module"}