{"ast":null,"code":"var _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/CustomClientFields.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport stringMethods from \"../library/stringMethods\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\"; // import CardActions from \"@material-ui/core/CardActions\";\n\nimport CardContent from \"@material-ui/core/CardContent\"; // import Button from \"@material-ui/core/Button\";\n\nimport Typography from \"@material-ui/core/Typography\";\nvar useStyles = makeStyles({\n  card: {\n    minWidth: 275\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\"\n  },\n  title: {\n    fontSize: 14\n  },\n  pos: {\n    marginBottom: 12\n  }\n});\n\nvar CustomClientFields = function CustomClientFields(_ref) {\n  var fields = _ref.fields;\n  var classes = useStyles();\n  var customFields = fields.filter(function (_ref2) {\n    var fieldPermanent = _ref2.fieldPermanent;\n    return !fieldPermanent;\n  }).map(function (_ref3) {\n    var fieldName = _ref3.fieldName,\n        _id = _ref3._id,\n        fieldType = _ref3.fieldType,\n        fieldOptions = _ref3.fieldOptions;\n    var customFieldNameFormated = new stringMethods(fieldName).camelStringToText().firstCharUpperCase().getString();\n    var customFieldTypeFormated = new stringMethods(fieldType).camelStringToText().getString();\n\n    var optionsMap = function optionsMap() {\n      return fieldOptions.map(function (e) {\n        var optionFormatedKey = new stringMethods(e).textToCamelString().replaceStringDiacritics().getString();\n        return __jsx(ListItem, {\n          key: optionFormatedKey,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, __jsx(ListItemText, {\n          primary: e.toLowerCase(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }));\n      });\n    };\n\n    return __jsx(Card, {\n      className: classes.card,\n      key: _id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, __jsx(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, __jsx(Typography, {\n      variant: \"h5\",\n      component: \"h3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, customFieldNameFormated), __jsx(Typography, {\n      className: classes.pos,\n      color: \"textSecondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"(\", customFieldTypeFormated.toLowerCase(), \")\"), fieldType === \"select\" ? __jsx(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, optionsMap()) : null));\n  });\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Custom Client Fields\"), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, customFields));\n};\n\nexport default CustomClientFields;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/CustomClientFields.tsx"],"names":["stringMethods","makeStyles","Card","CardContent","Typography","useStyles","card","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","CustomClientFields","fields","classes","customFields","filter","fieldPermanent","map","fieldName","_id","fieldType","fieldOptions","customFieldNameFormated","camelStringToText","firstCharUpperCase","getString","customFieldTypeFormated","optionsMap","e","optionFormatedKey","textToCamelString","replaceStringDiacritics","toLowerCase"],"mappings":"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","sourcesContent":["import stringMethods from \"../library/stringMethods\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\n// import CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\n// import Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles({\n  card: {\n    minWidth: 275\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\"\n  },\n  title: {\n    fontSize: 14\n  },\n  pos: {\n    marginBottom: 12\n  }\n});\n\nconst CustomClientFields = ({ fields }: any) => {\n  const classes = useStyles();\n  const customFields = fields\n    .filter(({ fieldPermanent }: any) => !fieldPermanent)\n    .map(({ fieldName, _id, fieldType, fieldOptions }: any) => {\n      const customFieldNameFormated = new stringMethods(fieldName)\n        .camelStringToText()\n        .firstCharUpperCase()\n        .getString();\n\n      const customFieldTypeFormated = new stringMethods(fieldType)\n        .camelStringToText()\n        .getString();\n\n      const optionsMap = () => {\n        return fieldOptions.map((e: string) => {\n          const optionFormatedKey = new stringMethods(e)\n            .textToCamelString()\n            .replaceStringDiacritics()\n            .getString();\n\n          return <ListItem key={optionFormatedKey}><ListItemText primary={e.toLowerCase()} /></ListItem>\n        });\n      };\n\n      return (\n        <Card className={classes.card} key={_id}>\n          <CardContent>\n          <Typography variant=\"h5\" component=\"h3\">\n            {customFieldNameFormated}\n          </Typography>\n          <Typography className={classes.pos} color=\"textSecondary\">\n            ({customFieldTypeFormated.toLowerCase()})\n          </Typography>\n            {fieldType === \"select\" ? <ul>{optionsMap()}</ul> : null}\n          </CardContent>\n        </Card>\n      );\n    });\n\n  return (\n    <div>\n      <h2>Custom Client Fields</h2>\n      <div>{customFields}</div>\n    </div>\n  );\n};\n\nexport default CustomClientFields;\n"]},"metadata":{},"sourceType":"module"}