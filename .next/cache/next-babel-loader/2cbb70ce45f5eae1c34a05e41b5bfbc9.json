{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/settings/customFields/CustomFields.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useReducer, useContext } from \"react\";\nimport axios from \"axios\";\nimport uniqid from \"uniqid\";\nimport AddOrEditField from \"./AddOrEditField\";\nimport UserContext from \"../../UserContext\";\nimport CustomFieldsList from \"./CustomFieldsList\";\nimport SelectFieldOptions from \"./SelectFieldOptions\";\nimport globalVars from \"../../../library/globalVariables\";\nimport { Box } from \"@material-ui/core\";\n\nvar CustomClientFields = function CustomClientFields(_ref) {\n  var fetchedFields = _ref.fetchedFields,\n      refreshList = _ref.refreshList;\n  var blankFieldObject = {\n    fieldName: \"\",\n    fieldType: \"text\",\n    fieldOptions: [],\n    fieldFormVisible: null\n  };\n  var user = useContext(UserContext);\n\n  var _useState = useState(fetchedFields),\n      fields = _useState[0],\n      setFields = _useState[1];\n\n  var _useState2 = useState(false),\n      displayComponent = _useState2[0],\n      setDisplayComponent = _useState2[1];\n\n  var _useReducer = useReducer(function (state, action) {\n    switch (action.type) {\n      case \"fieldNameChange\":\n        return _objectSpread({}, state, {\n          fieldName: action.payload.value\n        });\n\n      case \"selectValueChange\":\n        return _objectSpread({}, state, {\n          fieldType: action.payload.value\n        });\n\n      case \"newOptionSpawn\":\n        return _objectSpread({}, state, {\n          fieldOptions: [].concat(_toConsumableArray(state.fieldOptions), [{\n            id: uniqid(),\n            value: \"\"\n          }])\n        });\n\n      case \"clear\":\n        return blankFieldObject;\n\n      case \"optionValueChange\":\n        return _objectSpread({}, state, {\n          fieldOptions: state.fieldOptions.map(function (el) {\n            return el.id === action.payload.id ? _objectSpread({}, el, {\n              value: action.payload.value\n            }) : el;\n          })\n        });\n\n      case \"optionDelete\":\n        return _objectSpread({}, state, {\n          fieldOptions: state.fieldOptions.filter(function (e) {\n            return action.payload.id !== e.id;\n          })\n        });\n\n      case \"setWithPaylod\":\n        return action.payload.obj;\n\n      default:\n        return state;\n    }\n  }, blankFieldObject),\n      editedField = _useReducer[0],\n      setEditedField = _useReducer[1];\n\n  var fieldMethods = {\n    onNameChange: function onNameChange(event) {\n      setEditedField({\n        type: \"fieldNameChange\",\n        payload: {\n          value: event.target.value\n        }\n      });\n    },\n    onSelectChange: function onSelectChange(event) {\n      setEditedField({\n        type: \"selectValueChange\",\n        payload: {\n          value: event.target.value\n        }\n      });\n    },\n    handleOptionSpawn: function handleOptionSpawn(e) {\n      e.preventDefault();\n      setEditedField({\n        type: \"newOptionSpawn\"\n      });\n    },\n    toggleDisplayComponent: function toggleDisplayComponent() {\n      displayComponent ? setDisplayComponent(false) : setDisplayComponent(true);\n      setEditedField({\n        type: \"clear\"\n      });\n    },\n    onOptionDelete: function onOptionDelete(event) {\n      setEditedField({\n        type: \"optionDelete\",\n        payload: {\n          id: event.currentTarget.id\n        }\n      });\n    },\n    onOptionChange: function onOptionChange(id, event) {\n      setEditedField({\n        type: \"optionValueChange\",\n        payload: {\n          value: event.target.value,\n          id: id\n        }\n      });\n    },\n    setupEditedField: function setupEditedField(obj) {\n      setEditedField({\n        type: \"setWithPaylod\",\n        payload: {\n          obj: obj\n        }\n      });\n      !displayComponent ? setDisplayComponent(true) : null;\n    },\n    saveEditedField: function saveEditedField(e) {\n      e.preventDefault();\n      setFields([].concat(_toConsumableArray(fields), [editedField]));\n\n      var fieldIsUpdated =\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee() {\n          var fieldName, fieldType, fieldOptions, id, res, data;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  fieldName = editedField.fieldName, fieldType = editedField.fieldType, fieldOptions = editedField.fieldOptions, id = editedField.id;\n                  _context.next = 3;\n                  return axios({\n                    method: \"PUT\",\n                    url: \"\".concat(globalVars.serverURL, \"/fields/\").concat(id),\n                    params: {\n                      key: user.user.userkey\n                    },\n                    data: {\n                      fieldName: fieldName,\n                      fieldType: fieldType,\n                      fieldOptions: fieldOptions\n                    },\n                    responseType: \"json\"\n                  });\n\n                case 3:\n                  res = _context.sent;\n                  _context.next = 6;\n                  return res.data;\n\n                case 6:\n                  data = _context.sent;\n\n                  if (data.msg === globalVars.msgSuccess) {\n                    reset();\n                  }\n\n                case 8:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function fieldIsUpdated() {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n\n      var fieldIsCreated =\n      /*#__PURE__*/\n      function () {\n        var _ref3 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee2() {\n          var res, data;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return axios({\n                    method: \"POST\",\n                    params: {\n                      key: user.user.userkey\n                    },\n                    url: \"\".concat(globalVars.serverURL, \"/fields/\"),\n                    data: editedField,\n                    responseType: \"json\"\n                  });\n\n                case 2:\n                  res = _context2.sent;\n                  _context2.next = 5;\n                  return res.data;\n\n                case 5:\n                  data = _context2.sent;\n\n                  if (data.msg === globalVars.msgSuccess) {\n                    reset();\n                  }\n\n                case 7:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function fieldIsCreated() {\n          return _ref3.apply(this, arguments);\n        };\n      }();\n\n      !editedField.id ? fieldIsCreated() : fieldIsUpdated();\n    }\n  };\n\n  var reset = function reset() {\n    setDisplayComponent(false);\n    setEditedField({\n      type: \"clear\"\n    }); // refreshList();\n  };\n\n  var deleteField =\n  /*#__PURE__*/\n  function () {\n    var _ref4 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3(id) {\n      var res, resData;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return axios({\n                method: \"DELETE\",\n                params: {\n                  key: user.user.userkey\n                },\n                url: \"\".concat(globalVars.serverURL, \"/fields/\").concat(id),\n                responseType: \"json\"\n              });\n\n            case 2:\n              res = _context3.sent;\n              _context3.next = 5;\n              return res.data;\n\n            case 5:\n              resData = _context3.sent;\n              resData.msg === globalVars.msgSuccess ? refreshList() : null;\n\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function deleteField(_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Box, {\n    mt: \"1rem\",\n    mb: \"5rem\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, __jsx(CustomFieldsList, {\n    deleteField: deleteField,\n    fields: fields,\n    setupEditedField: fieldMethods.setupEditedField,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }), __jsx(AddOrEditField, {\n    editedField: editedField,\n    displayComponent: displayComponent,\n    fieldMethods: fieldMethods,\n    handleOption: __jsx(SelectFieldOptions, {\n      options: editedField.fieldOptions,\n      fieldMethods: fieldMethods,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }));\n};\n\nexport default CustomClientFields;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/settings/customFields/CustomFields.tsx"],"names":["useState","useReducer","useContext","axios","uniqid","AddOrEditField","UserContext","CustomFieldsList","SelectFieldOptions","globalVars","Box","CustomClientFields","fetchedFields","refreshList","blankFieldObject","fieldName","fieldType","fieldOptions","fieldFormVisible","user","fields","setFields","displayComponent","setDisplayComponent","state","action","type","payload","value","id","map","el","filter","e","obj","editedField","setEditedField","fieldMethods","onNameChange","event","target","onSelectChange","handleOptionSpawn","preventDefault","toggleDisplayComponent","onOptionDelete","currentTarget","onOptionChange","setupEditedField","saveEditedField","fieldIsUpdated","method","url","serverURL","params","key","userkey","data","responseType","res","msg","msgSuccess","reset","fieldIsCreated","deleteField","resData"],"mappings":"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","sourcesContent":["import { useState, useReducer, useContext } from \"react\";\nimport axios from \"axios\";\nimport uniqid from \"uniqid\";\nimport AddOrEditField from \"./AddOrEditField\";\nimport UserContext from \"../../UserContext\";\nimport CustomFieldsList from \"./CustomFieldsList\";\nimport SelectFieldOptions from \"./SelectFieldOptions\";\nimport globalVars from \"../../../library/globalVariables\";\nimport { Box } from \"@material-ui/core\";\n\nconst CustomClientFields = ({ fetchedFields, refreshList }: any) => {\n  const blankFieldObject = {\n    fieldName: \"\",\n    fieldType: \"text\",\n    fieldOptions: [],\n    fieldFormVisible: null\n  };\n\n  const user = useContext(UserContext);\n  const [fields, setFields] = useState(fetchedFields);\n  const [displayComponent, setDisplayComponent] = useState(false);\n\n  const [editedField, setEditedField] = useReducer((state, action) => {\n    switch (action.type) {\n      case \"fieldNameChange\":\n        return {\n          ...state,\n          fieldName: action.payload.value\n        };\n      case \"selectValueChange\":\n        return {\n          ...state,\n          fieldType: action.payload.value\n        };\n      case \"newOptionSpawn\":\n        return {\n          ...state,\n          fieldOptions: [...state.fieldOptions, { id: uniqid(), value: \"\" }]\n        };\n      case \"clear\":\n        return blankFieldObject;\n      case \"optionValueChange\":\n        return {\n          ...state,\n          fieldOptions: state.fieldOptions.map((el: any) =>\n            el.id === action.payload.id\n              ? { ...el, value: action.payload.value }\n              : el\n          )\n        };\n      case \"optionDelete\":\n        return {\n          ...state,\n          fieldOptions: state.fieldOptions.filter(\n            (e: any) => action.payload.id !== e.id\n          )\n        };\n      case \"setWithPaylod\":\n        return action.payload.obj;\n\n      default:\n        return state;\n    }\n  }, blankFieldObject);\n\n  const fieldMethods = {\n    onNameChange(event: any) {\n      setEditedField({\n        type: \"fieldNameChange\",\n        payload: { value: event.target.value }\n      });\n    },\n    onSelectChange(event: any) {\n      setEditedField({\n        type: \"selectValueChange\",\n        payload: { value: event.target.value }\n      });\n    },\n    handleOptionSpawn(e) {\n      e.preventDefault();\n      setEditedField({\n        type: \"newOptionSpawn\"\n      });\n    },\n    toggleDisplayComponent() {\n      displayComponent ? setDisplayComponent(false) : setDisplayComponent(true);\n      setEditedField({ type: \"clear\" });\n    },\n    onOptionDelete(event: any) {\n      setEditedField({\n        type: \"optionDelete\",\n        payload: { id: event.currentTarget.id }\n      });\n    },\n    onOptionChange(id, event) {\n      setEditedField({\n        type: \"optionValueChange\",\n        payload: { value: event.target.value, id }\n      });\n    },\n    setupEditedField(obj: any) {\n      setEditedField({\n        type: \"setWithPaylod\",\n        payload: { obj }\n      });\n      !displayComponent ? setDisplayComponent(true) : null;\n    },\n    saveEditedField(e) {\n      e.preventDefault();\n      setFields(\n        [...fields, editedField]\n      )\n\n      const fieldIsUpdated = async () => {\n        const { fieldName, fieldType, fieldOptions, id } = editedField;\n        const res = await axios({\n          method: \"PUT\",\n          url: `${globalVars.serverURL}/fields/${id}`,\n          params: { key: user.user.userkey },\n          data: { fieldName, fieldType, fieldOptions },\n          responseType: \"json\"\n        });\n        const data = await res.data;\n        if (data.msg === globalVars.msgSuccess) {\n          reset();\n        }\n      };\n\n      const fieldIsCreated = async () => {\n        const res = await axios({\n          method: \"POST\",\n          params: { key: user.user.userkey },\n          url: `${globalVars.serverURL}/fields/`,\n          data: editedField,\n          responseType: \"json\"\n        });\n        const data = await res.data;\n        if (data.msg === globalVars.msgSuccess) {\n          reset();\n        }\n      };\n      !editedField.id ? fieldIsCreated() : fieldIsUpdated();\n    }\n  };\n\n  const reset = () => {\n    setDisplayComponent(false);\n    setEditedField({ type: \"clear\" });\n    // refreshList();\n  };\n\n  const deleteField = async (id: any) => {\n    const res = await axios({\n      method: \"DELETE\",\n      params: { key: user.user.userkey },\n      url: `${globalVars.serverURL}/fields/${id}`,\n      responseType: \"json\"\n    });\n    const resData = await res.data;\n    resData.msg === globalVars.msgSuccess ? refreshList() : null;\n  };\n\n  return (\n    <Box mt=\"1rem\" mb=\"5rem\">\n      <CustomFieldsList\n        deleteField={deleteField}\n        fields={fields}\n        setupEditedField={fieldMethods.setupEditedField}\n      />\n      <AddOrEditField\n        editedField={editedField}\n        displayComponent={displayComponent}\n        fieldMethods={fieldMethods}\n        handleOption={\n          <SelectFieldOptions\n            options={editedField.fieldOptions}\n            fieldMethods={fieldMethods}\n          />\n        }\n      />\n    </Box>\n  );\n};\n\nexport default CustomClientFields;\n"]},"metadata":{},"sourceType":"module"}