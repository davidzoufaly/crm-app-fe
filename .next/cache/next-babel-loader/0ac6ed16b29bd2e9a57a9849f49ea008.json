{"ast":null,"code":"var _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/CustomClientFields.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport stringMethods from \"../library/stringMethods\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useState } from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ListItemText from '@material-ui/core/ListItemText';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Grid from '@material-ui/core/Grid';\nimport AddOrEditField from \"../components/AddOrEditField\";\nconst useStyles = makeStyles({\n  card: {\n    textAlign: \"center\",\n    height: \"100%\",\n    minWidth: \"300px\"\n  },\n  list: {\n    listStyleType: \"disc\"\n  },\n  title: {\n    fontSize: 14\n  },\n  pos: {\n    marginBottom: 12\n  }\n});\n\nconst CustomClientFields = ({\n  fields,\n  deleteField\n}) => {\n  const {\n    0: displayComponent,\n    1: setDisplayComponent\n  } = useState(false);\n  const {\n    0: editedField\n  } = useState({\n    fieldName: \"\",\n    fieldType: \"text\",\n    fieldPermanent: false,\n    field\n  });\n  const classes = useStyles({});\n\n  const changeDisplayComponent = () => {\n    displayComponent ? setDisplayComponent(false) : setDisplayComponent(true);\n  };\n\n  const customFields = fields.filter(({\n    fieldPermanent\n  }) => !fieldPermanent).map(({\n    fieldName,\n    _id,\n    fieldType,\n    fieldOptions\n  }) => {\n    const customFieldNameFormated = new stringMethods(fieldName.toLowerCase()).firstCharUpperCase().getString();\n\n    const optionsMap = () => {\n      return fieldOptions.map(e => {\n        const optionFormatedKey = new stringMethods(e).textToCamelString().replaceStringDiacritics().getString();\n        return __jsx(ListItem, {\n          key: optionFormatedKey,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, __jsx(ListItemText, {\n          primary: e.toLowerCase(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }));\n      });\n    };\n\n    return __jsx(Grid, {\n      item: true,\n      key: _id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, __jsx(Card, {\n      className: classes.card,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, __jsx(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, __jsx(Typography, {\n      variant: \"h5\",\n      component: \"h3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, customFieldNameFormated), __jsx(Typography, {\n      className: classes.pos,\n      color: \"textSecondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"(\", fieldType.toLowerCase(), \")\"), fieldType === \"select\" ? __jsx(List, {\n      className: classes.list,\n      dense: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, optionsMap()) : null, __jsx(\"button\", {\n      onClick: changeDisplayComponent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Edit field\"), __jsx(\"button\", {\n      onClick: deleteField,\n      id: _id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Delete field\"))));\n  });\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Custom Client Fields\"), __jsx(Grid, {\n    container: true,\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, customFields), !displayComponent ? __jsx(\"button\", {\n    onClick: changeDisplayComponent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Add new field\") : __jsx(AddOrEditField, {\n    fieldObject: editedField,\n    changeDisplayComponent: changeDisplayComponent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }));\n};\n\nexport default CustomClientFields;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/CustomClientFields.tsx"],"names":["stringMethods","makeStyles","useState","Card","CardContent","Typography","ListItemText","List","ListItem","Grid","AddOrEditField","useStyles","card","textAlign","height","minWidth","list","listStyleType","title","fontSize","pos","marginBottom","CustomClientFields","fields","deleteField","displayComponent","setDisplayComponent","editedField","fieldName","fieldType","fieldPermanent","field","classes","changeDisplayComponent","customFields","filter","map","_id","fieldOptions","customFieldNameFormated","toLowerCase","firstCharUpperCase","getString","optionsMap","e","optionFormatedKey","textToCamelString","replaceStringDiacritics"],"mappings":"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","sourcesContent":["import stringMethods from \"../library/stringMethods\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useState } from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ListItemText from '@material-ui/core/ListItemText';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Grid from '@material-ui/core/Grid';\nimport AddOrEditField from \"../components/AddOrEditField\";\n\nconst useStyles = makeStyles({\n  card: {\n    textAlign: \"center\",\n    height: \"100%\",\n    minWidth: \"300px\"\n  },\n  list: {\n      listStyleType: \"disc\"\n  },\n  title: {\n    fontSize: 14\n  },\n  pos: {\n    marginBottom: 12\n  }\n});\n\nconst CustomClientFields = ({ fields, deleteField }: any) => {\n  const [displayComponent, setDisplayComponent] = useState(false);\n  const [editedField] = useState({\n    fieldName: \"\",\n    fieldType: \"text\",\n    fieldPermanent: false,\n    field\n  })\n\n  const classes = useStyles({});\n\n  const changeDisplayComponent = () => {\n    displayComponent ? setDisplayComponent(false) : setDisplayComponent(true);\n  }\n\n  const customFields = fields\n    .filter(({ fieldPermanent }: any) => !fieldPermanent)\n    .map(({ fieldName, _id, fieldType, fieldOptions }: any) => {\n      const customFieldNameFormated = new stringMethods(fieldName.toLowerCase())\n        .firstCharUpperCase()\n        .getString();\n\n      const optionsMap = () => {\n        return fieldOptions.map((e: string) => {\n          const optionFormatedKey = new stringMethods(e)\n            .textToCamelString()\n            .replaceStringDiacritics()\n            .getString();\n\n          return <ListItem key={optionFormatedKey}><ListItemText primary={e.toLowerCase()} /></ListItem>\n        });\n      };\n\n      return (\n        <Grid item key={_id}>\n            <Card className={classes.card}>\n            <CardContent>\n            <Typography variant=\"h5\" component=\"h3\">\n                {customFieldNameFormated}\n            </Typography>\n            <Typography className={classes.pos} color=\"textSecondary\">\n                ({fieldType.toLowerCase()})\n            </Typography>\n                {fieldType === \"select\" ? <List className={classes.list} dense={true}>{optionsMap()}</List> : null}\n            <button onClick={changeDisplayComponent}>Edit field</button>\n            <button onClick={deleteField} id={_id}>Delete field</button>\n            </CardContent>\n            </Card>\n        </Grid>  \n      );\n    });\n\n  return (\n    <div>\n      <h2>Custom Client Fields</h2>\n      <Grid container spacing={2}>\n      {customFields}\n      </Grid>\n      {!displayComponent ? <button onClick={changeDisplayComponent}>Add new field</button> : <AddOrEditField fieldObject={editedField} changeDisplayComponent={changeDisplayComponent} />}\n    </div>\n  );\n};\n\nexport default CustomClientFields;\n"]},"metadata":{},"sourceType":"module"}