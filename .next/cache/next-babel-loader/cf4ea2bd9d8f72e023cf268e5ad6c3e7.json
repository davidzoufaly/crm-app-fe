{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/CustomFields.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport AddOrEditField from \"./AddOrEditField\";\nimport axios from \"axios\";\nimport globalVars from \"../library/globalVariables\";\nimport uniqid from \"uniqid\";\nimport CustomFieldsList from \"./CustomFieldsList\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SelectFieldOptions from \"./SelectFieldOptions\"; //TODO: EDIT OPTIONU SE PRERENDEROVAVA\n//TODO: TO much baskspace u optionu uplne odstranÃ­ pole\n\nconst CustomClientFields = ({\n  fields,\n  refreshList\n}) => {\n  const blankFieldObject = {\n    fieldName: \"\",\n    fieldType: \"text\",\n    fieldOptions: []\n  };\n  const {\n    0: editedField,\n    1: setEditedField\n  } = useState(blankFieldObject);\n  const {\n    0: displayComponent,\n    1: setDisplayComponent\n  } = useState(false);\n  const fieldMethods = {\n    onNameChange(event) {\n      setEditedField(_objectSpread({}, editedField, {\n        fieldName: event.target.value\n      }));\n    },\n\n    onSelectChange(event) {\n      setEditedField(_objectSpread({}, editedField, {\n        fieldType: event.target.options[event.target.options.selectedIndex].value\n      }));\n    },\n\n    handleOptionSpawn() {\n      setEditedField(_objectSpread({}, editedField, {\n        fieldOptions: [...editedField.fieldOptions, {\n          id: uniqid(),\n          value: \"\"\n        }]\n      }));\n    },\n\n    toggleDisplayComponent() {\n      displayComponent ? setDisplayComponent(false) : setDisplayComponent(true);\n      setEditedField(blankFieldObject);\n    },\n\n    saveEditedField() {\n      const fieldIsUpdated = async () => {\n        const {\n          fieldName,\n          fieldType,\n          fieldOptions,\n          id\n        } = editedField;\n        const res = await axios({\n          method: \"put\",\n          url: `${globalVars.serverURL}/fields/${id}`,\n          data: {\n            fieldName,\n            fieldType,\n            fieldOptions\n          },\n          responseType: \"json\"\n        });\n        const data = await res.data;\n\n        if (data.msg === \"Success\") {\n          reset();\n        }\n      };\n\n      const fieldIsCreated = async () => {\n        const res = await axios({\n          method: \"post\",\n          url: `${globalVars.serverURL}/fields/`,\n          data: editedField,\n          responseType: \"json\"\n        });\n        const data = await res.data;\n\n        if (data.msg === \"Success\") {\n          reset();\n        }\n      };\n\n      !editedField.id ? fieldIsCreated() : fieldIsUpdated();\n    }\n\n  };\n\n  const reset = () => {\n    setDisplayComponent(false);\n    setEditedField(blankFieldObject);\n    refreshList();\n  };\n\n  const deleteField = async id => {\n    const res = await axios({\n      method: \"delete\",\n      url: `${globalVars.serverURL}/fields/${id}`,\n      responseType: \"json\"\n    });\n    const resData = await res.data;\n    resData.msg === \"Success\" ? refreshList() : null;\n  };\n\n  const onOptionChange = event => {\n    setEditedField(_objectSpread({}, editedField, {\n      fieldOptions: editedField.fieldOptions.filter(e => event.target.id === e.id ? e.value = event.target.value : e)\n    }));\n  };\n\n  const onOptionDelete = event => {\n    setEditedField(_objectSpread({}, editedField, {\n      fieldOptions: editedField.fieldOptions.filter(e => event.target.id !== e.id ? e : null)\n    }));\n  };\n\n  const setupEditedField = obj => {\n    setEditedField(obj);\n    !displayComponent ? setDisplayComponent(true) : null;\n  };\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"h4\",\n    component: \"h2\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \"Custom Client Fields\"), __jsx(CustomFieldsList, {\n    deleteField: deleteField,\n    fields: fields,\n    setupEditedField: setupEditedField,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }), __jsx(AddOrEditField, {\n    editedField: editedField,\n    displayComponent: displayComponent,\n    fieldMethods: fieldMethods,\n    handleOption: __jsx(SelectFieldOptions, {\n      options: editedField.fieldOptions,\n      onOptionChange: onOptionChange,\n      onOptionDelete: onOptionDelete,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }));\n};\n\nexport default CustomClientFields;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/CustomFields.tsx"],"names":["useState","AddOrEditField","axios","globalVars","uniqid","CustomFieldsList","Typography","SelectFieldOptions","CustomClientFields","fields","refreshList","blankFieldObject","fieldName","fieldType","fieldOptions","editedField","setEditedField","displayComponent","setDisplayComponent","fieldMethods","onNameChange","event","target","value","onSelectChange","options","selectedIndex","handleOptionSpawn","id","toggleDisplayComponent","saveEditedField","fieldIsUpdated","res","method","url","serverURL","data","responseType","msg","reset","fieldIsCreated","deleteField","resData","onOptionChange","filter","e","onOptionDelete","setupEditedField","obj"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport AddOrEditField from \"./AddOrEditField\";\nimport axios from \"axios\";\nimport globalVars from \"../library/globalVariables\";\nimport uniqid from \"uniqid\";\nimport CustomFieldsList from \"./CustomFieldsList\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SelectFieldOptions from \"./SelectFieldOptions\";\n\n//TODO: EDIT OPTIONU SE PRERENDEROVAVA\n//TODO: TO much baskspace u optionu uplne odstranÃ­ pole\n\nconst CustomClientFields = ({ fields, refreshList }: any) => {\n  const blankFieldObject = {\n    fieldName: \"\",\n    fieldType: \"text\",\n    fieldOptions: []\n  };\n\n  const [editedField, setEditedField] = useState<any>(blankFieldObject);\n  const [displayComponent, setDisplayComponent] = useState(false);\n\n  const fieldMethods = {\n    onNameChange(event: any) {\n      setEditedField({ ...editedField, fieldName: event.target.value });\n    },\n    onSelectChange(event: any) {\n      setEditedField({\n        ...editedField,\n        fieldType:\n          event.target.options[event.target.options.selectedIndex].value\n      });\n    },\n    handleOptionSpawn() {\n      setEditedField({\n        ...editedField,\n        fieldOptions: [...editedField.fieldOptions, { id: uniqid(), value: \"\" }]\n      });\n    },\n    toggleDisplayComponent() {\n      displayComponent ? setDisplayComponent(false) : setDisplayComponent(true);\n      setEditedField(blankFieldObject);\n    },\n    saveEditedField() {\n      const fieldIsUpdated = async () => {\n        const { fieldName, fieldType, fieldOptions, id } = editedField;\n        const res = await axios({\n          method: \"put\",\n          url: `${globalVars.serverURL}/fields/${id}`,\n          data: { fieldName, fieldType, fieldOptions },\n          responseType: \"json\"\n        });\n        const data = await res.data;\n        if (data.msg === \"Success\") {\n          reset();\n        }\n      };\n\n      const fieldIsCreated = async () => {\n        const res = await axios({\n          method: \"post\",\n          url: `${globalVars.serverURL}/fields/`,\n          data: editedField,\n          responseType: \"json\"\n        });\n        const data = await res.data;\n        if (data.msg === \"Success\") {\n          reset();\n        }\n      };\n      !editedField.id ? fieldIsCreated() : fieldIsUpdated();\n    }\n  };\n\n  const reset = () => {\n    setDisplayComponent(false);\n    setEditedField(blankFieldObject);\n    refreshList();\n  };\n\n  const deleteField = async (id: any) => {\n    const res = await axios({\n      method: \"delete\",\n      url: `${globalVars.serverURL}/fields/${id}`,\n      responseType: \"json\"\n    });\n    const resData = await res.data;\n    resData.msg === \"Success\" ? refreshList() : null;\n  };\n\n  const onOptionChange = (event: any) => {\n    setEditedField({\n      ...editedField,\n      fieldOptions: editedField.fieldOptions.filter((e: any) =>\n        event.target.id === e.id ? (e.value = event.target.value) : e\n      )\n    });\n  };\n\n  const onOptionDelete = (event: any) => {\n    setEditedField({\n      ...editedField,\n      fieldOptions: editedField.fieldOptions.filter((e: any) =>\n        event.target.id !== e.id ? e : null\n      )\n    });\n  };\n\n  const setupEditedField = (obj: any) => {\n    setEditedField(obj);\n    !displayComponent ? setDisplayComponent(true) : null;\n  };\n\n  return (\n    <div>\n      <Typography variant=\"h4\" component=\"h2\" gutterBottom>\n        Custom Client Fields\n      </Typography>\n      <CustomFieldsList\n        deleteField={deleteField}\n        fields={fields}\n        setupEditedField={setupEditedField}\n      />\n      <AddOrEditField\n        editedField={editedField}\n        displayComponent={displayComponent}\n        fieldMethods={fieldMethods}\n        handleOption={\n          <SelectFieldOptions\n            options={editedField.fieldOptions}\n            onOptionChange={onOptionChange}\n            onOptionDelete={onOptionDelete}\n          />\n        }\n      />\n    </div>\n  );\n};\n\nexport default CustomClientFields;\n"]},"metadata":{},"sourceType":"module"}