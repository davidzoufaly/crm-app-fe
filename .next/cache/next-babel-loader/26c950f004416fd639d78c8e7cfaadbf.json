{"ast":null,"code":"var _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/SingleClientData.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport stringMethods from \"../library/stringMethods\";\n\nconst SingleClientData = () => {\n  const list = [];\n  fieldsData.map(field => {\n    switch (field.fieldType) {\n      case \"text\":\n        list.push(__jsx(\"li\", {\n          key: field.fieldName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 9\n          },\n          __self: this\n        }, new stringMethods(field.fieldName).camelStringToText().firstCharUpperCase().getString(), __jsx(\"textarea\", {\n          value: client[field.fieldName],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 14\n          },\n          __self: this\n        })));\n        break;\n\n      case \"number\":\n        list.push(__jsx(\"li\", {\n          key: field.fieldName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }, new stringMethods(field.fieldName).camelStringToText().firstCharUpperCase().getString(), __jsx(\"input\", {\n          type: \"number\",\n          value: client[field.fieldName],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        })));\n        break;\n\n      case \"select\":\n        list.push(__jsx(\"li\", {\n          key: field.fieldName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }, new stringMethods(field.fieldName).camelStringToText().firstCharUpperCase().getString(), __jsx(\"select\", {\n          value: client[field.fieldName],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }, field.fieldOptions.map(option => __jsx(\"option\", {\n          key: option.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }, option.value)))));\n    }\n  });\n  return SingleClientData;\n};\n\nexport default SingleClientData;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/SingleClientData.tsx"],"names":["stringMethods","SingleClientData","list","fieldsData","map","field","fieldType","push","fieldName","camelStringToText","firstCharUpperCase","getString","client","fieldOptions","option","id","value"],"mappings":";;;AAAA,OAAOA,aAAP,MAA0B,0BAA1B;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAC3B,QAAMC,IAAI,GAAG,EAAb;AACAC,EAAAA,UAAU,CAACC,GAAX,CAAeC,KAAK,IAAI;AACtB,YAAQA,KAAK,CAACC,SAAd;AACE,WAAK,MAAL;AACEJ,QAAAA,IAAI,CAACK,IAAL,CACE;AAAI,UAAA,GAAG,EAAEF,KAAK,CAACG,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG,IAAIR,aAAJ,CAAkBK,KAAK,CAACG,SAAxB,EACEC,iBADF,GAEEC,kBAFF,GAGEC,SAHF,EADH,EAKE;AAAU,UAAA,KAAK,EAAEC,MAAM,CAACP,KAAK,CAACG,SAAP,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UALF,CADF;AASA;;AACF,WAAK,QAAL;AACEN,QAAAA,IAAI,CAACK,IAAL,CACE;AAAI,UAAA,GAAG,EAAEF,KAAK,CAACG,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG,IAAIR,aAAJ,CAAkBK,KAAK,CAACG,SAAxB,EACEC,iBADF,GAEEC,kBAFF,GAGEC,SAHF,EADH,EAKE;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,KAAK,EAAEC,MAAM,CAACP,KAAK,CAACG,SAAP,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UALF,CADF;AASA;;AACF,WAAK,QAAL;AACEN,QAAAA,IAAI,CAACK,IAAL,CACE;AAAI,UAAA,GAAG,EAAEF,KAAK,CAACG,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG,IAAIR,aAAJ,CAAkBK,KAAK,CAACG,SAAxB,EACEC,iBADF,GAEEC,kBAFF,GAGEC,SAHF,EADH,EAKE;AAAQ,UAAA,KAAK,EAAEC,MAAM,CAACP,KAAK,CAACG,SAAP,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGH,KAAK,CAACQ,YAAN,CAAmBT,GAAnB,CAAuBU,MAAM,IAC5B;AAAQ,UAAA,GAAG,EAAEA,MAAM,CAACC,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAyBD,MAAM,CAACE,KAAhC,CADD,CADH,CALF,CADF;AAxBJ;AAsCD,GAvCD;AAwCA,SAAOf,gBAAP;AACD,CA3CH;;AA6CE,eAAeA,gBAAf","sourcesContent":["import stringMethods from \"../library/stringMethods\";\n\nconst SingleClientData = () => {\n    const list = [];\n    fieldsData.map(field => {\n      switch (field.fieldType) {\n        case \"text\":\n          list.push(\n            <li key={field.fieldName}>\n              {new stringMethods(field.fieldName)\n                .camelStringToText()\n                .firstCharUpperCase()\n                .getString()}\n              <textarea value={client[field.fieldName]} />\n            </li>\n          );\n          break;\n        case \"number\":\n          list.push(\n            <li key={field.fieldName}>\n              {new stringMethods(field.fieldName)\n                .camelStringToText()\n                .firstCharUpperCase()\n                .getString()}\n              <input type=\"number\" value={client[field.fieldName]} />\n            </li>\n          );\n          break;\n        case \"select\":\n          list.push(\n            <li key={field.fieldName}>\n              {new stringMethods(field.fieldName)\n                .camelStringToText()\n                .firstCharUpperCase()\n                .getString()}\n              <select value={client[field.fieldName]}>\n                {field.fieldOptions.map(option => (\n                  <option key={option.id}>{option.value}</option>\n                ))}\n              </select>\n            </li>\n          );\n      }\n    });\n    return SingleClientData;\n  };\n\n  export default SingleClientData;"]},"metadata":{},"sourceType":"module"}