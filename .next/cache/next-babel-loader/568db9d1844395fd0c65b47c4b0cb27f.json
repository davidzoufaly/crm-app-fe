{"ast":null,"code":"var _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/pages/emails/[key].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState, useContext } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport generateUniqueId from \"generate-unique-id\";\nimport Header from \"../../components/Header\";\nimport LoadingSpinner from \"../../components/LoadingSpinner\";\nimport UserContext from \"../../components/UserContext\";\nimport stringMethods from \"../../library/stringMethods\";\nimport globalVars from \"../../library/globalVariables\";\nimport languages from \"../../library/languages\";\nimport { TableHead, TableBody, Typography, Table, TableCell, TableRow, Box } from \"@material-ui/core\";\n\nconst Emails = ({\n  data,\n  emailsCount\n}) => {\n  const {\n    0: initialized,\n    1: setInitialized\n  } = useState(false);\n  const router = useRouter();\n  const user = useContext(UserContext);\n  useEffect(() => {\n    const title = new stringMethods(router.pathname).removeSlash().removeSlashAndTextAfter().firstCharUpperCase().addStringToEnd(globalVars.titleSubText).getString();\n    document.title = title;\n    setInitialized(true);\n    user.checkUser();\n  }, [router]);\n  const tableBody = data.map(email => __jsx(TableRow, {\n    key: generateUniqueId(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, email.date), __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, email.to.map(e => __jsx(\"p\", {\n    key: generateUniqueId(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, e))), __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, email.subject), __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, email.message.length > 50 ? `${email.message.slice(0, 50)}...` : email.message))).reverse();\n  const h1 = new stringMethods(router.pathname).removeSlash().removeSlashAndTextAfter().firstCharUpperCase().getString();\n  return !user.user.signedIn && !initialized ? __jsx(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }) : __jsx(React.Fragment, null, __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), __jsx(Typography, {\n    component: \"h1\",\n    variant: \"h3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, h1), __jsx(Typography, {\n    variant: \"h5\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, new stringMethods(languages.en.sent).firstCharUpperCase().getString(), \" \", emailsCount), __jsx(Box, {\n    width: \"1\",\n    overflow: \"auto\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, __jsx(Table, {\n    size: \"small\",\n    style: {\n      backgroundColor: \"white\",\n      border: \"1px solid #e0e0e0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, __jsx(TableHead, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, __jsx(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, languages.en.dateAndTime)), __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, languages.en.to)), __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, languages.en.subject)), __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, languages.en.message)))), __jsx(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, tableBody))));\n};\n\nEmails.getInitialProps = async context => {\n  const res = await axios({\n    method: \"get\",\n    params: {\n      key: context.query.key\n    },\n    url: `${globalVars.serverURL}/emails`,\n    responseType: \"json\"\n  });\n  const resEmailsCount = await axios(`${globalVars.serverURL}/emails/count?key=${context.query.key}`);\n  const emailsCount = await resEmailsCount.data;\n  const data = await res.data;\n  return {\n    data,\n    emailsCount\n  };\n};\n\nexport default Emails;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/pages/emails/[key].tsx"],"names":["useEffect","useState","useContext","useRouter","axios","generateUniqueId","Header","LoadingSpinner","UserContext","stringMethods","globalVars","languages","TableHead","TableBody","Typography","Table","TableCell","TableRow","Box","Emails","data","emailsCount","initialized","setInitialized","router","user","title","pathname","removeSlash","removeSlashAndTextAfter","firstCharUpperCase","addStringToEnd","titleSubText","getString","document","checkUser","tableBody","map","email","date","to","e","subject","message","length","slice","reverse","h1","signedIn","en","sent","backgroundColor","border","dateAndTime","getInitialProps","context","res","method","params","key","query","url","serverURL","responseType","resEmailsCount"],"mappings":"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","sourcesContent":["import { useEffect, useState, useContext } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport generateUniqueId from \"generate-unique-id\";\nimport Header from \"../../components/Header\";\nimport LoadingSpinner from \"../../components/LoadingSpinner\";\nimport UserContext from \"../../components/UserContext\";\nimport stringMethods from \"../../library/stringMethods\";\nimport globalVars from \"../../library/globalVariables\";\nimport moment from \"moment\";\nimport languages from \"../../library/languages\";\nimport {\n  TableHead,\n  TableBody,\n  Typography,\n  Table,\n  TableCell,\n  TableRow,\n  Box\n} from \"@material-ui/core\";\n\nconst Emails = ({ data, emailsCount }) => {\n  const [initialized, setInitialized] = useState(false);\n  const router = useRouter();\n  const user = useContext(UserContext);\n\n  useEffect(() => {\n    const title = new stringMethods(router.pathname)\n      .removeSlash()\n      .removeSlashAndTextAfter()\n      .firstCharUpperCase()\n      .addStringToEnd(globalVars.titleSubText)\n      .getString();\n    document.title = title;\n    setInitialized(true);\n    user.checkUser();\n  }, [router]);\n\n  const tableBody = data\n    .map(email => (\n      <TableRow key={generateUniqueId()}>\n        <TableCell>\n        {email.date}\n        </TableCell>\n        <TableCell>\n          {email.to.map(e => (\n            <p key={generateUniqueId()}>{e}</p>\n          ))}\n        </TableCell>\n        <TableCell>{email.subject}</TableCell>\n        <TableCell>\n            {email.message.length > 50\n              ? `${email.message.slice(0, 50)}...`\n              : email.message}\n        </TableCell>\n      </TableRow>\n    ))\n    .reverse();\n\n  const h1 = new stringMethods(router.pathname)\n    .removeSlash()\n    .removeSlashAndTextAfter()\n    .firstCharUpperCase()\n    .getString();\n\n  return !user.user.signedIn && !initialized ? (\n    <LoadingSpinner />\n  ) : (\n    <>\n      <Header />\n      <Typography component=\"h1\" variant=\"h3\">\n        {h1}\n      </Typography>\n      <Typography variant=\"h5\" gutterBottom>\n        {new stringMethods(languages.en.sent).firstCharUpperCase().getString()}{\" \"}\n        {emailsCount}\n      </Typography>\n      <Box width=\"1\" overflow=\"auto\">\n      <Table\n        size=\"small\"\n        style={{ backgroundColor: \"white\", border: \"1px solid #e0e0e0\" }}\n      >\n        <TableHead>\n          <TableRow>\n            <TableCell>\n              <Typography variant=\"button\">\n                {languages.en.dateAndTime}\n              </Typography>\n            </TableCell>\n            <TableCell>\n              <Typography variant=\"button\">{languages.en.to}</Typography>\n            </TableCell>\n            <TableCell>\n              <Typography variant=\"button\">{languages.en.subject}</Typography>\n            </TableCell>\n            <TableCell>\n              <Typography variant=\"button\">{languages.en.message}</Typography>\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>{tableBody}</TableBody>\n      </Table>\n      </Box>\n    </>\n  );\n};\n\nEmails.getInitialProps = async (context: any) => {\n  const res = await axios({\n    method: \"get\",\n    params: { key: context.query.key },\n    url: `${globalVars.serverURL}/emails`,\n    responseType: \"json\"\n  });\n\n  const resEmailsCount = await axios(\n    `${globalVars.serverURL}/emails/count?key=${context.query.key}`\n  );\n\n  const emailsCount = await resEmailsCount.data;\n  const data = await res.data;\n  return { data, emailsCount };\n};\n\nexport default Emails;\n"]},"metadata":{},"sourceType":"module"}