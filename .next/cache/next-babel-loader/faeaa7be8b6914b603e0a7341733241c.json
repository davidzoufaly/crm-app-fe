{"ast":null,"code":"var _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/clients/TableBody.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from \"next/link\";\nimport uniqid from \"uniqid\";\nimport UserContext from \"../UserContext\";\nimport languages from \"../../library/languages\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport { useContext } from \"react\";\n\nvar TableBody = function TableBody(_ref) {\n  var clients = _ref.clients,\n      reverse = _ref.reverse,\n      sort = _ref.sort,\n      fields = _ref.fields,\n      handleCheckbox = _ref.handleCheckbox;\n\n  if (fields.some(function (e) {\n    return e.fieldName === sort && e.fieldType === \"number\";\n  })) {\n    if (reverse) {\n      clients.sort(function (a, b) {\n        return b[sort] - a[sort];\n      });\n    } else {\n      clients.sort(function (a, b) {\n        return a[sort] - b[sort];\n      });\n    }\n  } else {\n    if (reverse) {\n      clients.sort(function (a, b) {\n        return b[sort] > a[sort] ? -1 : 1;\n      });\n    } else {\n      clients.sort(function (a, b) {\n        return b[sort] < a[sort] ? -1 : 1;\n      });\n    }\n  }\n\n  var user = useContext(UserContext);\n  var fieldNames = [];\n  fields.forEach(function (e) {\n    return fieldNames.push(e.fieldName);\n  });\n  var tableClients = clients.map(function (client) {\n    var items = [];\n\n    for (var i = 0; i < fieldNames.length; i++) {\n      items[i] = null;\n    }\n\n    var tableItem = function tableItem() {\n      for (var key in client) {\n        //show only clients data with existing fields\n        if (client[key] !== client._id && fieldNames.includes(key)) {\n          items[fieldNames.indexOf(key)] = __jsx(TableCell, {\n            key: uniqid(),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55\n            },\n            __self: this\n          }, client[key]);\n        }\n      } // add checkbox at first position\n\n\n      items.unshift(__jsx(TableCell, {\n        padding: \"checkbox\",\n        key: uniqid(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, __jsx(\"input\", {\n        type: \"checkbox\",\n        checked: client.isChecked === undefined ? false : client.isChecked,\n        onChange: function onChange() {\n          return handleCheckbox(client._id);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }))); // add profile link at last position\n\n      items.push(__jsx(TableCell, {\n        key: uniqid(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, __jsx(Link, {\n        href: \"/clients/[id]\",\n        as: \"/clients/\".concat(client._id, \"?Api_KEY=\").concat(user.user.userkey),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, __jsx(\"a\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, languages.en.go))));\n      items = items.map(function (e) {\n        return e === null ? __jsx(TableCell, {\n          key: uniqid(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }) : e;\n      });\n      return items;\n    };\n\n    return __jsx(TableRow, {\n      key: client._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, tableItem());\n  });\n  return tableClients;\n};\n\nexport default TableBody;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/clients/TableBody.tsx"],"names":["Link","uniqid","UserContext","languages","TableCell","TableRow","useContext","TableBody","clients","reverse","sort","fields","handleCheckbox","some","e","fieldName","fieldType","a","b","user","fieldNames","forEach","push","tableClients","map","client","items","i","length","tableItem","key","_id","includes","indexOf","unshift","isChecked","undefined","userkey","en","go"],"mappings":"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","sourcesContent":["import Link from \"next/link\";\nimport uniqid from \"uniqid\";\nimport UserContext from \"../UserContext\";\nimport languages from \"../../library/languages\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport { useContext } from \"react\";\n\ninterface IProps {\n  clients: any;\n  reverse: boolean;\n  sort: string;\n  fields: any;\n  handleCheckbox: any;\n}\n\nconst TableBody = ({\n  clients,\n  reverse,\n  sort,\n  fields,\n  handleCheckbox\n}: IProps) => {\n  if (fields.some(e => e.fieldName === sort && e.fieldType === \"number\")) {\n    if (reverse) {\n      clients.sort((a: any, b: any) => b[sort] - a[sort]);\n    } else {\n      clients.sort((a: any, b: any) => a[sort] - b[sort]);\n    }\n  } else {\n    if (reverse) {\n      clients.sort((a: any, b: any) => (b[sort] > a[sort] ? -1 : 1));\n    } else {\n      clients.sort((a: any, b: any) => (b[sort] < a[sort] ? -1 : 1));\n    }\n  }\n\n  const user = useContext(UserContext);\n\n  const fieldNames = [];\n  fields.forEach((e: any) => fieldNames.push(e.fieldName));\n\n  const tableClients = clients.map((client: any) => {\n    let items = [];\n\n    for (let i = 0; i < fieldNames.length; i++) {\n      items[i] = null;\n    }\n\n    const tableItem = () => {\n      for (let key in client) {\n        //show only clients data with existing fields\n        if (client[key] !== client._id && fieldNames.includes(key)) {\n          items[fieldNames.indexOf(key)] = (\n            <TableCell key={uniqid()}>{client[key]}</TableCell>\n          );\n        }\n      }\n      // add checkbox at first position\n      items.unshift(\n        <TableCell padding=\"checkbox\" key={uniqid()}>\n          <input\n            type=\"checkbox\"\n            checked={client.isChecked === undefined ? false : client.isChecked}\n            onChange={() => handleCheckbox(client._id)}\n          />\n        </TableCell>\n      );\n      // add profile link at last position\n      items.push(\n        <TableCell key={uniqid()}>\n          <Link href=\"/clients/[id]\" as={`/clients/${client._id}?Api_KEY=${user.user.userkey}`}>\n            <a>{languages.en.go}</a>\n          </Link>\n        </TableCell>\n      );\n\n      items = items.map(e => (e === null ?  <TableCell key={uniqid()}></TableCell> : e));\n\n      return items;\n    };\n\n    return <TableRow key={client._id}>{tableItem()}</TableRow>;\n  });\n  return tableClients;\n};\n\nexport default TableBody;\n"]},"metadata":{},"sourceType":"module"}