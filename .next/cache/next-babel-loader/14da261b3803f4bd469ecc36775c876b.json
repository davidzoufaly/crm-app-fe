{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/pages/emails/[key].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState, useContext } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport generateUniqueId from \"generate-unique-id\";\nimport Header from \"../../components/Header\";\nimport LoadingSpinner from \"../../components/LoadingSpinner\";\nimport UserContext from \"../../components/UserContext\";\nimport stringMethods from \"../../library/stringMethods\";\nimport globalVars from \"../../library/globalVariables\";\nimport languages from \"../../library/languages\";\nimport { TableHead, TableBody, Typography, Table, TableCell, TableRow } from \"@material-ui/core\";\n\nvar Emails = function Emails(_ref) {\n  var data = _ref.data,\n      emailsCount = _ref.emailsCount;\n\n  var _useState = useState(false),\n      initialized = _useState[0],\n      setInitialized = _useState[1];\n\n  var router = useRouter();\n  var user = useContext(UserContext);\n  useEffect(function () {\n    var title = new stringMethods(router.pathname).removeSlash().removeSlashAndTextAfter().firstCharUpperCase().addStringToEnd(globalVars.titleSubText).getString();\n    document.title = title;\n    setInitialized(true);\n    user.checkUser();\n  }, [router]);\n  var tableBody = data.map(function (email) {\n    return __jsx(TableRow, {\n      key: generateUniqueId(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, __jsx(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, email.date), __jsx(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, email.to.map(function (e) {\n      return __jsx(\"p\", {\n        key: generateUniqueId(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, e);\n    })), __jsx(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, email.subject), __jsx(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, email.message.length > 50 ? \"\".concat(email.message.slice(0, 50), \"...\") : email.message));\n  }).reverse();\n  var h1 = new stringMethods(router.pathname).removeSlash().removeSlashAndTextAfter().firstCharUpperCase().getString();\n  return !user.user.signedIn && !initialized ? __jsx(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }) : __jsx(React.Fragment, null, __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), __jsx(Typography, {\n    component: \"h1\",\n    variant: \"h3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, h1), __jsx(Typography, {\n    variant: \"h5\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, new stringMethods(languages.en.sent).firstCharUpperCase().getString(), \" \", emailsCount), __jsx(Table, {\n    size: \"small\",\n    style: {\n      backgroundColor: \"white\",\n      border: \"1px solid #e0e0e0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, __jsx(TableHead, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, __jsx(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, languages.en.dateAndTime)), __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, languages.en.to)), __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, languages.en.subject)), __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, languages.en.message)))), __jsx(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, tableBody)));\n};\n\nEmails.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(context) {\n    var res, resEmailsCount, emailsCount, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios({\n              method: \"get\",\n              params: {\n                key: context.query.key\n              },\n              url: \"\".concat(globalVars.serverURL, \"/emails\"),\n              responseType: \"json\"\n            });\n\n          case 2:\n            res = _context.sent;\n            _context.next = 5;\n            return axios(\"\".concat(globalVars.serverURL, \"/emails/count?key=\").concat(context.query.key));\n\n          case 5:\n            resEmailsCount = _context.sent;\n            _context.next = 8;\n            return resEmailsCount.data;\n\n          case 8:\n            emailsCount = _context.sent;\n            _context.next = 11;\n            return res.data;\n\n          case 11:\n            data = _context.sent;\n            return _context.abrupt(\"return\", {\n              data: data,\n              emailsCount: emailsCount\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default Emails;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/pages/emails/[key].tsx"],"names":["useEffect","useState","useContext","useRouter","axios","generateUniqueId","Header","LoadingSpinner","UserContext","stringMethods","globalVars","languages","TableHead","TableBody","Typography","Table","TableCell","TableRow","Emails","data","emailsCount","initialized","setInitialized","router","user","title","pathname","removeSlash","removeSlashAndTextAfter","firstCharUpperCase","addStringToEnd","titleSubText","getString","document","checkUser","tableBody","map","email","date","to","e","subject","message","length","slice","reverse","h1","signedIn","en","sent","backgroundColor","border","dateAndTime","getInitialProps","context","method","params","key","query","url","serverURL","responseType","res","resEmailsCount"],"mappings":";;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,UAAP,MAAuB,+BAAvB;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SACEC,SADF,EAEEC,SAFF,EAGEC,UAHF,EAIEC,KAJF,EAKEC,SALF,EAMEC,QANF,QAOO,mBAPP;;AASA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAA2B;AAAA,MAAxBC,IAAwB,QAAxBA,IAAwB;AAAA,MAAlBC,WAAkB,QAAlBA,WAAkB;;AAAA,kBACFnB,QAAQ,CAAC,KAAD,CADN;AAAA,MACjCoB,WADiC;AAAA,MACpBC,cADoB;;AAExC,MAAMC,MAAM,GAAGpB,SAAS,EAAxB;AACA,MAAMqB,IAAI,GAAGtB,UAAU,CAACM,WAAD,CAAvB;AAEAR,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMyB,KAAK,GAAG,IAAIhB,aAAJ,CAAkBc,MAAM,CAACG,QAAzB,EACXC,WADW,GAEXC,uBAFW,GAGXC,kBAHW,GAIXC,cAJW,CAIIpB,UAAU,CAACqB,YAJf,EAKXC,SALW,EAAd;AAMAC,IAAAA,QAAQ,CAACR,KAAT,GAAiBA,KAAjB;AACAH,IAAAA,cAAc,CAAC,IAAD,CAAd;AACAE,IAAAA,IAAI,CAACU,SAAL;AACD,GAVQ,EAUN,CAACX,MAAD,CAVM,CAAT;AAYA,MAAMY,SAAS,GAAGhB,IAAI,CACnBiB,GADe,CACX,UAAAC,KAAK;AAAA,WACR,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEhC,gBAAgB,EAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACCgC,KAAK,CAACC,IADP,CADF,EAIE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,KAAK,CAACE,EAAN,CAASH,GAAT,CAAa,UAAAI,CAAC;AAAA,aACb;AAAG,QAAA,GAAG,EAAEnC,gBAAgB,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA6BmC,CAA7B,CADa;AAAA,KAAd,CADH,CAJF,EASE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAYH,KAAK,CAACI,OAAlB,CATF,EAUE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKJ,KAAK,CAACK,OAAN,CAAcC,MAAd,GAAuB,EAAvB,aACMN,KAAK,CAACK,OAAN,CAAcE,KAAd,CAAoB,CAApB,EAAuB,EAAvB,CADN,WAEGP,KAAK,CAACK,OAHd,CAVF,CADQ;AAAA,GADM,EAmBfG,OAnBe,EAAlB;AAqBA,MAAMC,EAAE,GAAG,IAAIrC,aAAJ,CAAkBc,MAAM,CAACG,QAAzB,EACRC,WADQ,GAERC,uBAFQ,GAGRC,kBAHQ,GAIRG,SAJQ,EAAX;AAMA,SAAO,CAACR,IAAI,CAACA,IAAL,CAAUuB,QAAX,IAAuB,CAAC1B,WAAxB,GACL,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,GAGL,4BACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,UAAD;AAAY,IAAA,SAAS,EAAC,IAAtB;AAA2B,IAAA,OAAO,EAAC,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGyB,EADH,CAFF,EAKE,MAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAyB,IAAA,YAAY,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,IAAIrC,aAAJ,CAAkBE,SAAS,CAACqC,EAAV,CAAaC,IAA/B,EAAqCpB,kBAArC,GAA0DG,SAA1D,EADH,EAC0E,GAD1E,EAEGZ,WAFH,CALF,EASE,MAAC,KAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,KAAK,EAAE;AAAE8B,MAAAA,eAAe,EAAE,OAAnB;AAA4BC,MAAAA,MAAM,EAAE;AAApC,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,IAAA,OAAO,EAAC,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGxC,SAAS,CAACqC,EAAV,CAAaI,WADhB,CADF,CADF,EAME,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,IAAA,OAAO,EAAC,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8BzC,SAAS,CAACqC,EAAV,CAAaT,EAA3C,CADF,CANF,EASE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,IAAA,OAAO,EAAC,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8B5B,SAAS,CAACqC,EAAV,CAAaP,OAA3C,CADF,CATF,EAYE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,IAAA,OAAO,EAAC,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8B9B,SAAS,CAACqC,EAAV,CAAaN,OAA3C,CADF,CAZF,CADF,CAJF,EAsBE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYP,SAAZ,CAtBF,CATF,CAHF;AAsCD,CAlFD;;AAoFAjB,MAAM,CAACmC,eAAP;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAyB,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACLlD,KAAK,CAAC;AACtBmD,cAAAA,MAAM,EAAE,KADc;AAEtBC,cAAAA,MAAM,EAAE;AAAEC,gBAAAA,GAAG,EAAEH,OAAO,CAACI,KAAR,CAAcD;AAArB,eAFc;AAGtBE,cAAAA,GAAG,YAAKjD,UAAU,CAACkD,SAAhB,YAHmB;AAItBC,cAAAA,YAAY,EAAE;AAJQ,aAAD,CADA;;AAAA;AACjBC,YAAAA,GADiB;AAAA;AAAA,mBAQM1D,KAAK,WAC7BM,UAAU,CAACkD,SADkB,+BACYN,OAAO,CAACI,KAAR,CAAcD,GAD1B,EARX;;AAAA;AAQjBM,YAAAA,cARiB;AAAA;AAAA,mBAYGA,cAAc,CAAC5C,IAZlB;;AAAA;AAYjBC,YAAAA,WAZiB;AAAA;AAAA,mBAaJ0C,GAAG,CAAC3C,IAbA;;AAAA;AAajBA,YAAAA,IAbiB;AAAA,6CAchB;AAAEA,cAAAA,IAAI,EAAJA,IAAF;AAAQC,cAAAA,WAAW,EAAXA;AAAR,aAdgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzB;;AAAA;AAAA;AAAA;AAAA;;AAiBA,eAAeF,MAAf","sourcesContent":["import { useEffect, useState, useContext } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport generateUniqueId from \"generate-unique-id\";\nimport Header from \"../../components/Header\";\nimport LoadingSpinner from \"../../components/LoadingSpinner\";\nimport UserContext from \"../../components/UserContext\";\nimport stringMethods from \"../../library/stringMethods\";\nimport globalVars from \"../../library/globalVariables\";\nimport moment from \"moment\";\nimport languages from \"../../library/languages\";\nimport {\n  TableHead,\n  TableBody,\n  Typography,\n  Table,\n  TableCell,\n  TableRow\n} from \"@material-ui/core\";\n\nconst Emails = ({ data, emailsCount }) => {\n  const [initialized, setInitialized] = useState(false);\n  const router = useRouter();\n  const user = useContext(UserContext);\n\n  useEffect(() => {\n    const title = new stringMethods(router.pathname)\n      .removeSlash()\n      .removeSlashAndTextAfter()\n      .firstCharUpperCase()\n      .addStringToEnd(globalVars.titleSubText)\n      .getString();\n    document.title = title;\n    setInitialized(true);\n    user.checkUser();\n  }, [router]);\n\n  const tableBody = data\n    .map(email => (\n      <TableRow key={generateUniqueId()}>\n        <TableCell>\n        {email.date}\n        </TableCell>\n        <TableCell>\n          {email.to.map(e => (\n            <p key={generateUniqueId()}>{e}</p>\n          ))}\n        </TableCell>\n        <TableCell>{email.subject}</TableCell>\n        <TableCell>\n            {email.message.length > 50\n              ? `${email.message.slice(0, 50)}...`\n              : email.message}\n        </TableCell>\n      </TableRow>\n    ))\n    .reverse();\n\n  const h1 = new stringMethods(router.pathname)\n    .removeSlash()\n    .removeSlashAndTextAfter()\n    .firstCharUpperCase()\n    .getString();\n\n  return !user.user.signedIn && !initialized ? (\n    <LoadingSpinner />\n  ) : (\n    <>\n      <Header />\n      <Typography component=\"h1\" variant=\"h3\">\n        {h1}\n      </Typography>\n      <Typography variant=\"h5\" gutterBottom>\n        {new stringMethods(languages.en.sent).firstCharUpperCase().getString()}{\" \"}\n        {emailsCount}\n      </Typography>\n      <Table\n        size=\"small\"\n        style={{ backgroundColor: \"white\", border: \"1px solid #e0e0e0\" }}\n      >\n        <TableHead>\n          <TableRow>\n            <TableCell>\n              <Typography variant=\"button\">\n                {languages.en.dateAndTime}\n              </Typography>\n            </TableCell>\n            <TableCell>\n              <Typography variant=\"button\">{languages.en.to}</Typography>\n            </TableCell>\n            <TableCell>\n              <Typography variant=\"button\">{languages.en.subject}</Typography>\n            </TableCell>\n            <TableCell>\n              <Typography variant=\"button\">{languages.en.message}</Typography>\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>{tableBody}</TableBody>\n      </Table>\n    </>\n  );\n};\n\nEmails.getInitialProps = async (context: any) => {\n  const res = await axios({\n    method: \"get\",\n    params: { key: context.query.key },\n    url: `${globalVars.serverURL}/emails`,\n    responseType: \"json\"\n  });\n\n  const resEmailsCount = await axios(\n    `${globalVars.serverURL}/emails/count?key=${context.query.key}`\n  );\n\n  const emailsCount = await resEmailsCount.data;\n  const data = await res.data;\n  return { data, emailsCount };\n};\n\nexport default Emails;\n"]},"metadata":{},"sourceType":"module"}