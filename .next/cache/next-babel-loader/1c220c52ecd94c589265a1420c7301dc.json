{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/homepage/RegisterForm.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport TextInput from \"./TextInput\";\nimport Button from \"./Button\";\nimport globalVars from \"../../library/globalVariables\";\nimport languages from \"../../library/languages\";\nimport stringMethods from \"../../library/stringMethods\";\nimport { Typography, Box } from '@material-ui/core';\n\nconst RegisterForm = ({\n  changeToLogin\n}) => {\n  const {\n    0: regUser,\n    1: setRegUser\n  } = useState({\n    username: \"\",\n    password: \"\",\n    repeatPassword: \"\"\n  });\n\n  const onChange = e => {\n    setRegUser(_objectSpread({}, regUser, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const sentFormToBe = async () => {\n    const {\n      username,\n      password\n    } = regUser;\n    const userRes = await axios({\n      method: \"POST\",\n      data: {\n        username,\n        password\n      },\n      url: `${globalVars.serverURL}/users`,\n      responseType: \"json\"\n    });\n    const userData = await userRes.data;\n\n    switch (userData.msg) {\n      case globalVars.msgSuccess:\n        alert(languages.en.success);\n        changeToLogin();\n        break;\n\n      case \"Exist\":\n        alert(languages.en.userAlreadyExists);\n        break;\n\n      default:\n        alert(languages.en.somethingWentWrong);\n    }\n  };\n\n  const onRegister = () => {\n    regUser.password === regUser.repeatPassword ? sentFormToBe() : alert(languages.en.passwordsDoesNotMatch);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Typography, {\n    component: \"h2\",\n    variant: \"h4\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, new stringMethods(languages.en.register).firstCharUpperCase().getString()), __jsx(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, __jsx(TextInput, {\n    onChange: onChange,\n    type: \"text\",\n    value: regUser.username,\n    text: \"username\",\n    title: new stringMethods(languages.en.username).firstCharUpperCase().getString(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), __jsx(TextInput, {\n    onChange: onChange,\n    type: \"password\",\n    value: regUser.password,\n    text: \"password\",\n    title: languages.en.password,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), __jsx(TextInput, {\n    onChange: onChange,\n    type: \"password\",\n    value: regUser.repeatPassword,\n    text: \"repeatPassword\",\n    title: new stringMethods(languages.en.repeatPassword).firstCharUpperCase().getString(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), __jsx(Box, {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    mt: \"2rem\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, __jsx(Button, {\n    onClick: onRegister,\n    text: languages.en.register,\n    variant: \"contained\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }))));\n};\n\nexport default RegisterForm;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/homepage/RegisterForm.tsx"],"names":["useState","axios","TextInput","Button","globalVars","languages","stringMethods","Typography","Box","RegisterForm","changeToLogin","regUser","setRegUser","username","password","repeatPassword","onChange","e","target","name","value","sentFormToBe","userRes","method","data","url","serverURL","responseType","userData","msg","msgSuccess","alert","en","success","userAlreadyExists","somethingWentWrong","onRegister","passwordsDoesNotMatch","register","firstCharUpperCase","getString"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport axios from \"axios\";\nimport TextInput from \"./TextInput\";\nimport Button from \"./Button\";\nimport globalVars from \"../../library/globalVariables\";\nimport languages from \"../../library/languages\";\nimport stringMethods from \"../../library/stringMethods\";\nimport { Typography, Box } from '@material-ui/core';\n\nconst RegisterForm = ({ changeToLogin }) => {\n  const [regUser, setRegUser] = useState({\n    username: \"\",\n    password: \"\",\n    repeatPassword: \"\"\n  });\n\n  const onChange = e => {\n    setRegUser({ ...regUser, [e.target.name]: e.target.value });\n  };\n\n  const sentFormToBe = async () => {\n    const { username, password } = regUser;\n\n    const userRes = await axios({\n      method: \"POST\",\n      data: { username, password },\n      url: `${globalVars.serverURL}/users`,\n      responseType: \"json\"\n    });\n    const userData = await userRes.data;\n\n    switch (userData.msg) {\n      case globalVars.msgSuccess:\n        alert(languages.en.success);\n        changeToLogin();\n        break;\n      case \"Exist\":\n        alert(languages.en.userAlreadyExists);\n        break;\n      default:\n        alert(languages.en.somethingWentWrong);\n    }\n  };\n\n  const onRegister = () => {\n    regUser.password === regUser.repeatPassword\n      ? sentFormToBe()\n      : alert(languages.en.passwordsDoesNotMatch);\n  };\n\n  return (\n    <>\n      <Typography component=\"h2\" variant=\"h4\" gutterBottom>\n        {new stringMethods(languages.en.register)\n          .firstCharUpperCase()\n          .getString()\n        }\n      </Typography>\n      <form>\n        <TextInput\n          onChange={onChange}\n          type=\"text\"\n          value={regUser.username}\n          text=\"username\"\n          title={new stringMethods(languages.en.username)\n            .firstCharUpperCase()\n            .getString()}\n        />\n        <TextInput\n          onChange={onChange}\n          type=\"password\"\n          value={regUser.password}\n          text=\"password\"\n          title={languages.en.password}\n        />\n        <TextInput\n          onChange={onChange}\n          type=\"password\"\n          value={regUser.repeatPassword}\n          text=\"repeatPassword\"\n          title={new stringMethods(languages.en.repeatPassword)\n            .firstCharUpperCase()\n            .getString()}\n        />\n        <Box display=\"flex\" justifyContent=\"flex-end\" mt=\"2rem\">\n          <Button onClick={onRegister} text={languages.en.register} variant=\"contained\" />\n        </Box>\n      </form>\n    </>\n  );\n};\n\nexport default RegisterForm;\n"]},"metadata":{},"sourceType":"module"}