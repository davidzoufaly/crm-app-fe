{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useReducer, useEffect, useState, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport generateUniqueId from \"generate-unique-id\";\nimport UserContext from \"../UserContext\";\nimport ClientForm from \"./ClientForm\";\nimport globalVars from \"../../library/globalVariables\";\nimport languages from \"../../library/languages\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nconst useStyles = makeStyles(theme => createStyles({\n  formWrapper: {\n    marginTop: theme.spacing(3),\n    borderRadius: theme.spacing(1),\n    padding: theme.spacing(3),\n    backgroundColor: theme.palette.grey[\"200\"],\n    boxShadow: theme.shadows[\"1\"],\n    width: \"50%\",\n    [theme.breakpoints.down(\"sm\")]: {\n      width: \"100%\"\n    }\n  },\n  textField: {\n    marginTop: theme.spacing(2)\n  }\n}));\n\nconst CreateClient = ({\n  fields,\n  isClientAdded,\n  toggleIsClientAdded,\n  addNewClientToState\n}) => {\n  const classes = useStyles({});\n  const initialNewClientState = fields.map(e => e.fieldName).reduce((o, key) => _Object$assign(o, {\n    [key]: \"\"\n  }), {});\n  const user = useContext(UserContext);\n  const {\n    0: submitting,\n    1: setSubmitting\n  } = useState(false);\n  const {\n    0: newClient,\n    1: setNewClient\n  } = useReducer((state, action) => {\n    switch (action.type) {\n      case \"onChange\":\n        return _objectSpread({}, state, {\n          [action.payload.fieldName]: action.payload.fieldType === globalVars.fieldTypes.number ? _parseInt(action.payload.value) : action.payload.value\n        });\n\n      case \"addId\":\n        return _objectSpread({}, state, {\n          _id: generateUniqueId({\n            length: 24,\n            useNumbers: true,\n            useLetters: false,\n            includeSymbols: [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n          })\n        });\n\n      case \"addDate\":\n        return _objectSpread({}, state, {\n          [\"Date added\"]: moment().format(\"llll\")\n        });\n\n      case \"clear\":\n        return {\n          initialNewClientState\n        };\n\n      default:\n        return state;\n    }\n  }, initialNewClientState);\n\n  const onChange = event => {\n    setNewClient({\n      type: \"onChange\",\n      payload: {\n        fieldName: event.target.name,\n        value: event.target.value,\n        fieldType: event.target.type\n      }\n    });\n  };\n\n  useEffect(() => {\n    //trigger side effect when submitting state is changed and its is true\n    submitting ? submitNewClient() : null;\n  }, [submitting]);\n\n  const onSubmit = e => {\n    // on Button Click prepare client object to be ready to send\n    e.preventDefault();\n    setNewClient({\n      type: \"addDate\"\n    });\n    setNewClient({\n      type: \"addId\"\n    }); // change submitting state to trigger effect with POST req.\n\n    setSubmitting(true);\n  };\n\n  const submitNewClient = async () => {\n    //post req to DB\n    const clientRes = await axios({\n      method: \"POST\",\n      data: newClient,\n      url: `${globalVars.serverURL}/clients`,\n      params: {\n        key: user.user.userkey\n      },\n      responseType: \"json\"\n    });\n    const clientData = await clientRes.data;\n\n    if (clientData.msg === globalVars.msgSuccess) {\n      // add client data to clients state for table update\n      addNewClientToState(newClient); // reset newClient state\n\n      setNewClient({\n        type: \"clear\"\n      }); // hide form\n\n      toggleIsClientAdded(); //reset submitting\n\n      setSubmitting(false);\n    } else {\n      alert(languages.en.somethingWentWrong);\n    }\n  };\n\n  const onCancel = () => {\n    setNewClient({\n      type: \"clear\"\n    });\n    toggleIsClientAdded();\n  };\n\n  return isClientAdded ? __jsx(Box, {\n    className: classes.formWrapper\n  }, __jsx(Typography, {\n    variant: \"h4\",\n    component: \"h2\",\n    gutterBottom: true\n  }, languages.en.addNewClient), __jsx(\"form\", {\n    onSubmit: onSubmit\n  }, __jsx(ClientForm, {\n    fields: fields,\n    onChange: onChange,\n    newClient: newClient\n  }), __jsx(Box, {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    mt: \"2rem\"\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    style: {\n      marginRight: \"1rem\"\n    },\n    onClick: onCancel\n  }, languages.en.cancel), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\"\n  }, languages.en.save)))) : null;\n};\n\nexport default CreateClient;","map":null,"metadata":{},"sourceType":"module"}