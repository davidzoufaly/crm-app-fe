{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/CustomFields.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useReducer, useEffect } from \"react\";\nimport AddOrEditField from \"./AddOrEditField\";\nimport axios from \"axios\";\nimport globalVars from \"../library/globalVariables\";\nimport uniqid from \"uniqid\";\nimport CustomFieldsList from \"./CustomFieldsList\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SelectFieldOptions from \"./SelectFieldOptions\"; //TODO: EDIT OPTIONU SE PRERENDEROVAVA\n//TODO: TO much baskspace u optionu uplne odstran√≠ pole\n\nvar CustomClientFields = function CustomClientFields(_ref) {\n  var fields = _ref.fields,\n      refreshList = _ref.refreshList;\n  var blankFieldObject = {\n    fieldName: \"\",\n    fieldType: \"text\",\n    fieldOptions: []\n  };\n  useEffect(function () {// console.log(editedField);\n  });\n\n  var _useState = useState(false),\n      displayComponent = _useState[0],\n      setDisplayComponent = _useState[1];\n\n  var _useReducer = useReducer(function (state, action) {\n    switch (action.type) {\n      case \"fieldNameChange\":\n        return _objectSpread({}, state, {\n          fieldName: action.payload.value\n        });\n\n      case \"selectValueChange\":\n        return _objectSpread({}, state, {\n          fieldType: action.payload.options[action.payload.options.selectedIndex].value\n        });\n\n      case \"newOptionSpawn\":\n        return _objectSpread({}, state, {\n          fieldOptions: [].concat(_toConsumableArray(state.fieldOptions), [{\n            id: action.payload.id,\n            value: \"\"\n          }])\n        });\n\n      case \"clear\":\n        return blankFieldObject;\n\n      case \"optionValueChange\":\n        return _objectSpread({}, state, {\n          fieldOptions: state.fieldOptions.filter(function (el) {\n            return action.payload.target.id === el.id ? el.value = action.payload.target.value : el;\n          })\n        });\n\n      case \"optionDelete\":\n        return _objectSpread({}, state, {\n          fieldOptions: state.fieldOptions.filter(function (e) {\n            return action.payload.id !== e.id;\n          })\n        });\n\n      case \"setWithPaylod\":\n        return action.payload.obj;\n\n      default:\n        return state;\n    }\n  }, blankFieldObject),\n      editedField = _useReducer[0],\n      setEditedField = _useReducer[1];\n\n  var fieldMethods = {\n    onNameChange: function onNameChange(event) {\n      setEditedField({\n        type: \"fieldNameChange\",\n        payload: {\n          value: event.target.value\n        }\n      });\n    },\n    onSelectChange: function onSelectChange(event) {\n      setEditedField({\n        type: \"selectValueChange\",\n        payload: {\n          options: event.target.options\n        }\n      });\n    },\n    handleOptionSpawn: function handleOptionSpawn(e) {\n      e.preventDefault();\n      setEditedField({\n        type: \"newOptionSpawn\",\n        payload: {\n          id: uniqid()\n        }\n      });\n    },\n    toggleDisplayComponent: function toggleDisplayComponent() {\n      displayComponent ? setDisplayComponent(false) : setDisplayComponent(true);\n      setEditedField({\n        type: \"clear\"\n      });\n    },\n    onOptionDelete: function onOptionDelete(event) {\n      setEditedField({\n        type: \"optionDelete\",\n        payload: {\n          id: event.target.id\n        }\n      });\n    },\n    onOptionChange: function onOptionChange(event) {\n      setEditedField({\n        type: \"optionValueChange\",\n        payload: {\n          target: event.target\n        }\n      });\n    },\n    setupEditedField: function setupEditedField(obj) {\n      setEditedField({\n        type: \"setWithPaylod\",\n        payload: {\n          obj: obj\n        }\n      });\n      !displayComponent ? setDisplayComponent(true) : null;\n    },\n    saveEditedField: function saveEditedField(e) {\n      e.preventDefault();\n\n      var fieldIsUpdated =\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee() {\n          var fieldName, fieldType, fieldOptions, id, res, data;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  fieldName = editedField.fieldName, fieldType = editedField.fieldType, fieldOptions = editedField.fieldOptions, id = editedField.id;\n                  _context.next = 3;\n                  return axios({\n                    method: \"put\",\n                    url: \"\".concat(globalVars.serverURL, \"/fields/\").concat(id),\n                    data: {\n                      fieldName: fieldName,\n                      fieldType: fieldType,\n                      fieldOptions: fieldOptions\n                    },\n                    responseType: \"json\"\n                  });\n\n                case 3:\n                  res = _context.sent;\n                  _context.next = 6;\n                  return res.data;\n\n                case 6:\n                  data = _context.sent;\n\n                  if (data.msg === \"Success\") {\n                    reset();\n                  }\n\n                case 8:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function fieldIsUpdated() {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n\n      var fieldIsCreated =\n      /*#__PURE__*/\n      function () {\n        var _ref3 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee2() {\n          var res, data;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return axios({\n                    method: \"post\",\n                    url: \"\".concat(globalVars.serverURL, \"/fields/\"),\n                    data: editedField,\n                    responseType: \"json\"\n                  });\n\n                case 2:\n                  res = _context2.sent;\n                  _context2.next = 5;\n                  return res.data;\n\n                case 5:\n                  data = _context2.sent;\n\n                  if (data.msg === \"Success\") {\n                    reset();\n                  }\n\n                case 7:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function fieldIsCreated() {\n          return _ref3.apply(this, arguments);\n        };\n      }();\n\n      !editedField.id ? fieldIsCreated() : fieldIsUpdated();\n    }\n  };\n\n  var reset = function reset() {\n    setDisplayComponent(false);\n    setEditedField({\n      type: \"clear\"\n    });\n    refreshList();\n  };\n\n  var deleteField =\n  /*#__PURE__*/\n  function () {\n    var _ref4 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3(id) {\n      var res, resData;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return axios({\n                method: \"delete\",\n                url: \"\".concat(globalVars.serverURL, \"/fields/\").concat(id),\n                responseType: \"json\"\n              });\n\n            case 2:\n              res = _context3.sent;\n              _context3.next = 5;\n              return res.data;\n\n            case 5:\n              resData = _context3.sent;\n              resData.msg === \"Success\" ? refreshList() : null;\n\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function deleteField(_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"h4\",\n    component: \"h2\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, \"Custom Client Fields\"), __jsx(CustomFieldsList, {\n    deleteField: deleteField,\n    fields: fields,\n    setupEditedField: fieldMethods.setupEditedField,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }), __jsx(AddOrEditField, {\n    editedField: editedField,\n    displayComponent: displayComponent,\n    fieldMethods: fieldMethods,\n    handleOption: __jsx(SelectFieldOptions, {\n      options: editedField.fieldOptions,\n      fieldMethods: fieldMethods,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }));\n};\n\nexport default CustomClientFields;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/CustomFields.tsx"],"names":["useState","useReducer","useEffect","AddOrEditField","axios","globalVars","uniqid","CustomFieldsList","Typography","SelectFieldOptions","CustomClientFields","fields","refreshList","blankFieldObject","fieldName","fieldType","fieldOptions","displayComponent","setDisplayComponent","state","action","type","payload","value","options","selectedIndex","id","filter","el","target","e","obj","editedField","setEditedField","fieldMethods","onNameChange","event","onSelectChange","handleOptionSpawn","preventDefault","toggleDisplayComponent","onOptionDelete","onOptionChange","setupEditedField","saveEditedField","fieldIsUpdated","method","url","serverURL","data","responseType","res","msg","reset","fieldIsCreated","deleteField","resData"],"mappings":"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","sourcesContent":["import { useState, useReducer, useEffect } from \"react\";\nimport AddOrEditField from \"./AddOrEditField\";\nimport axios from \"axios\";\nimport globalVars from \"../library/globalVariables\";\nimport uniqid from \"uniqid\";\nimport CustomFieldsList from \"./CustomFieldsList\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SelectFieldOptions from \"./SelectFieldOptions\";\n\n//TODO: EDIT OPTIONU SE PRERENDEROVAVA\n//TODO: TO much baskspace u optionu uplne odstran√≠ pole\n\nconst CustomClientFields = ({ fields, refreshList }: any) => {\n  const blankFieldObject = {\n    fieldName: \"\",\n    fieldType: \"text\",\n    fieldOptions: []\n  };\n\n  useEffect(() => {\n    // console.log(editedField);\n  });\n\n  const [displayComponent, setDisplayComponent] = useState(false);\n\n  const [editedField, setEditedField] = useReducer((state, action) => {\n    switch (action.type) {\n      case \"fieldNameChange\":\n        return {\n          ...state,\n          fieldName: action.payload.value\n        };\n      case \"selectValueChange\":\n        return {\n          ...state,\n          fieldType:\n            action.payload.options[action.payload.options.selectedIndex].value\n        };\n      case \"newOptionSpawn\":\n        return {\n          ...state,\n          fieldOptions: [...state.fieldOptions, { id: action.payload.id, value: \"\" }]\n        };\n      case \"clear\":\n        return blankFieldObject;\n      case \"optionValueChange\":\n        return {\n          ...state,\n          fieldOptions: state.fieldOptions.filter((el: any) =>\n            action.payload.target.id === el.id\n              ? (el.value = action.payload.target.value)\n              : el\n          )\n        };\n      case \"optionDelete\":\n        return {\n          ...state,\n          fieldOptions: state.fieldOptions.filter(\n            (e: any) => action.payload.id !== e.id\n          )\n        };\n      case \"setWithPaylod\":\n        return action.payload.obj;\n\n      default:\n        return state;\n    }\n  }, blankFieldObject);\n\n  const fieldMethods = {\n    onNameChange(event: any) {\n      setEditedField({\n        type: \"fieldNameChange\",\n        payload: { value: event.target.value }\n      });\n    },\n    onSelectChange(event: any) {\n      setEditedField({\n        type: \"selectValueChange\",\n        payload: { options: event.target.options }\n      });\n    },\n    handleOptionSpawn(e) {\n      e.preventDefault()\n      setEditedField({\n        type: \"newOptionSpawn\",\n        payload: {id: uniqid()}\n      });\n    },\n    toggleDisplayComponent() {\n      displayComponent ? setDisplayComponent(false) : setDisplayComponent(true);\n      setEditedField({ type: \"clear\" });\n    },\n    onOptionDelete(event: any) {\n      setEditedField({\n        type: \"optionDelete\",\n        payload: { id: event.target.id }\n      });\n    },\n    onOptionChange(event: any) {\n      setEditedField({\n        type: \"optionValueChange\",\n        payload: { target: event.target }\n      });\n    },\n    setupEditedField(obj: any) {\n      setEditedField({\n        type: \"setWithPaylod\",\n        payload: { obj }\n      });\n      !displayComponent ? setDisplayComponent(true) : null;\n    },\n    saveEditedField(e) {\n      e.preventDefault();\n\n      const fieldIsUpdated = async () => {\n        const { fieldName, fieldType, fieldOptions, id } = editedField;\n        const res = await axios({\n          method: \"put\",\n          url: `${globalVars.serverURL}/fields/${id}`,\n          data: { fieldName, fieldType, fieldOptions },\n          responseType: \"json\"\n        });\n        const data = await res.data;\n        if (data.msg === \"Success\") {\n          reset();\n        }\n      };\n\n      const fieldIsCreated = async () => {\n        const res = await axios({\n          method: \"post\",\n          url: `${globalVars.serverURL}/fields/`,\n          data: editedField,\n          responseType: \"json\"\n        });\n        const data = await res.data;\n        if (data.msg === \"Success\") {\n          reset();\n        }\n      };\n      !editedField.id ? fieldIsCreated() : fieldIsUpdated();\n    }\n  };\n\n  const reset = () => {\n    setDisplayComponent(false);\n    setEditedField({ type: \"clear\" });\n    refreshList();\n  };\n\n  const deleteField = async (id: any) => {\n    const res = await axios({\n      method: \"delete\",\n      url: `${globalVars.serverURL}/fields/${id}`,\n      responseType: \"json\"\n    });\n    const resData = await res.data;\n    resData.msg === \"Success\" ? refreshList() : null;\n  };\n\n\n  return (\n    <div>\n      <Typography variant=\"h4\" component=\"h2\" gutterBottom>\n        Custom Client Fields\n      </Typography>\n      <CustomFieldsList\n        deleteField={deleteField}\n        fields={fields}\n        setupEditedField={fieldMethods.setupEditedField}\n      />\n      <AddOrEditField\n        editedField={editedField}\n        displayComponent={displayComponent}\n        fieldMethods={fieldMethods}\n        handleOption={\n          <SelectFieldOptions\n            options={editedField.fieldOptions}\n            fieldMethods={fieldMethods}\n          />\n        }\n      />\n    </div>\n  );\n};\n\nexport default CustomClientFields;\n"]},"metadata":{},"sourceType":"module"}