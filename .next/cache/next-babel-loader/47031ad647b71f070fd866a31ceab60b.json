{"ast":null,"code":"var _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/settings/webform/webFormOptionSelect.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect } from \"react\";\n\nconst webFormOptionSelect = ({\n  optionSelect,\n  webFields,\n  addVisibleSelect\n}) => {\n  const fieldOptionsArray = [];\n\n  const showPreselectOptions = () => {\n    return webFields.map(field => field.fieldType === \"select\" ? field.fieldOptions.forEach(option => fieldOptionsArray.push(__jsx(\"option\", {\n      key: option.id,\n      value: option.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, option.value))) : null);\n  };\n\n  useEffect(() => {\n    console.log(\"prerendered\");\n  });\n  const insertIntoForm = webFields.map(field => optionSelect === field.fieldName ? __jsx(\"div\", {\n    key: field.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Should be \", __jsx(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, field.fieldName), \" visible in form?\"), __jsx(\"button\", {\n    id: field.fieldName,\n    onClick: addVisibleSelect,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"YES\"), __jsx(\"button\", {\n    id: field.fieldName,\n    onClick: showPreselectOptions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"NO\")) : null);\n  return __jsx(React.Fragment, null, insertIntoForm, __jsx(\"select\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, fieldOptionsArray));\n};\n\nexport default webFormOptionSelect;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/settings/webform/webFormOptionSelect.tsx"],"names":["useEffect","webFormOptionSelect","optionSelect","webFields","addVisibleSelect","fieldOptionsArray","showPreselectOptions","map","field","fieldType","fieldOptions","forEach","option","push","id","value","console","log","insertIntoForm","fieldName"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA,SAAhB;AAA2BC,EAAAA;AAA3B,CAAD,KAAmD;AAE7E,QAAMC,iBAAiB,GAAG,EAA1B;;AAEA,QAAMC,oBAAoB,GAAG,MAAM;AACjC,WAAOH,SAAS,CAACI,GAAV,CAAcC,KAAK,IACtBA,KAAK,CAACC,SAAN,KAAoB,QAApB,GACID,KAAK,CAACE,YAAN,CAAmBC,OAAnB,CAA2BC,MAAM,IACjCP,iBAAiB,CAACQ,IAAlB,CACI;AAAQ,MAAA,GAAG,EAAED,MAAM,CAACE,EAApB;AAAwB,MAAA,KAAK,EAAEF,MAAM,CAACG,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGH,MAAM,CAACG,KADV,CADJ,CADA,CADJ,GAQI,IATD,CAAP;AAWD,GAZD;;AAcAf,EAAAA,SAAS,CAAC,MAAM;AACZgB,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACH,GAFQ,CAAT;AAIA,QAAMC,cAAc,GAAGf,SAAS,CAACI,GAAV,CAAcC,KAAK,IACxCN,YAAY,KAAKM,KAAK,CAACW,SAAvB,GACE;AAAK,IAAA,GAAG,EAAEX,KAAK,CAACM,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAASN,KAAK,CAACW,SAAf,CADZ,sBADF,EAIE;AAAQ,IAAA,EAAE,EAAEX,KAAK,CAACW,SAAlB;AAA6B,IAAA,OAAO,EAAEf,gBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAJF,EAOE;AAAQ,IAAA,EAAE,EAAEI,KAAK,CAACW,SAAlB;AAA6B,IAAA,OAAO,EAAEb,oBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAPF,CADF,GAYI,IAbiB,CAAvB;AAgBA,SACE,4BACGY,cADH,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAASb,iBAAT,CAFF,CADF;AAMD,CA5CD;;AA8CA,eAAeJ,mBAAf","sourcesContent":["import { useEffect } from \"react\";\n\nconst webFormOptionSelect = ({ optionSelect, webFields, addVisibleSelect }) => {\n  \n  const fieldOptionsArray = [];\n\n  const showPreselectOptions = () => {\n    return webFields.map(field =>\n        field.fieldType === \"select\"\n          ? field.fieldOptions.forEach(option =>\n            fieldOptionsArray.push(\n                <option key={option.id} value={option.value}>\n                  {option.value}\n                </option>\n              )\n            )\n          : null\n      );\n  }\n\n  useEffect(() => {\n      console.log(\"prerendered\");\n  })\n\n  const insertIntoForm = webFields.map(field =>\n    optionSelect === field.fieldName ? (\n      <div key={field.id}>\n        <p>\n          Should be <strong>{field.fieldName}</strong> visible in form?\n        </p>\n        <button id={field.fieldName} onClick={addVisibleSelect}>\n          YES\n        </button>\n        <button id={field.fieldName} onClick={showPreselectOptions}>\n          NO\n        </button>\n      </div>\n    ) : null\n  );\n\n  return (\n    <>\n      {insertIntoForm}\n      <select>{fieldOptionsArray}</select>\n    </>\n  );\n};\n\nexport default webFormOptionSelect;\n"]},"metadata":{},"sourceType":"module"}