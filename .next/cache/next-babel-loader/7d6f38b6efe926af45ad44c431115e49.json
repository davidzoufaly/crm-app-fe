{"ast":null,"code":"var _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/pages/emails.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport generateUniqueId from \"generate-unique-id\";\nimport Header from \"../components/Header\";\nimport LoadingSpinner from \"../components/LoadingSpinner\";\nimport stringMethods from \"../library/stringMethods\";\nimport globalVars from \"../library/globalVariables\";\nimport languages from \"../library/languages\";\n\nconst Emails = ({\n  data\n}) => {\n  const {\n    0: initialized,\n    1: setInitialized\n  } = useState(false);\n  const router = useRouter();\n  useEffect(() => {\n    const title = new stringMethods(router.pathname).removeSlash().firstCharUpperCase().addStringToEnd(globalVars.titleSubText).getString();\n    document.title = title;\n    setInitialized(true);\n  }, [router]);\n  const tableBody = data.map(email => __jsx(\"tr\", {\n    key: generateUniqueId(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, __jsx(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, email.date), __jsx(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, email.to.map(e => __jsx(\"p\", {\n    key: generateUniqueId(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, e))), __jsx(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, email.subject), __jsx(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, email.message.length > 50 ? `${email.message.slice(0, 50)}...` : email.message))).reverse();\n  const h1 = new stringMethods(router.pathname).removeSlash().firstCharUpperCase().getString();\n  return !initialized ? __jsx(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }) : __jsx(React.Fragment, null, __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, h1), __jsx(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, __jsx(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, __jsx(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, __jsx(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, languages.en.dateAndTime), __jsx(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, languages.en.to), __jsx(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, languages.en.subject), __jsx(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, languages.en.message))), __jsx(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, tableBody)));\n};\n\nEmails.getInitialProps = async () => {\n  const res = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/emails`,\n    responseType: \"json\"\n  });\n  const data = await res.data;\n  return {\n    data\n  };\n};\n\nexport default Emails;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/pages/emails.tsx"],"names":["useEffect","useState","useRouter","axios","generateUniqueId","Header","LoadingSpinner","stringMethods","globalVars","languages","Emails","data","initialized","setInitialized","router","title","pathname","removeSlash","firstCharUpperCase","addStringToEnd","titleSubText","getString","document","tableBody","map","email","date","to","e","subject","message","length","slice","reverse","h1","en","dateAndTime","getInitialProps","res","method","url","serverURL","responseType"],"mappings":"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","sourcesContent":["import {useEffect, useState} from \"react\";\nimport {useRouter} from \"next/router\"\nimport axios from \"axios\";\nimport generateUniqueId from \"generate-unique-id\";\nimport Header from \"../components/Header\";\nimport LoadingSpinner from \"../components/LoadingSpinner\";\nimport stringMethods from \"../library/stringMethods\";\nimport globalVars from \"../library/globalVariables\";\nimport languages from \"../library/languages\";\n\nconst Emails = ({ data }) => {\n    const [initialized, setInitialized] = useState(false)\n    const router = useRouter();\n\n    useEffect(() => {\n        const title = new stringMethods(router.pathname)\n          .removeSlash()\n          .firstCharUpperCase()\n          .addStringToEnd(globalVars.titleSubText)\n          .getString();\n        document.title = title;\n        setInitialized(true);\n      }, [router]);\n\n  const tableBody = data.map(email => (\n    <tr key={generateUniqueId()}>\n      <td>{email.date}</td>\n      <td>{email.to.map(e => <p key={generateUniqueId()}>{e}</p>)}</td>\n      <td>{email.subject}</td>\n      <td>{email.message.length > 50 ? `${email.message.slice(0, 50)}...` : email.message}</td>\n    </tr>\n  )).reverse();\n\n  const h1 = new stringMethods(router.pathname)\n    .removeSlash()\n    .firstCharUpperCase()\n    .getString();\n\n  return !initialized ? <LoadingSpinner/> : (\n    <>\n      <Header />\n      <h1>{h1}</h1>\n      <table>\n        <thead>\n          <tr>\n            <td>{languages.en.dateAndTime}</td>\n            <td>{languages.en.to}</td>\n            <td>{languages.en.subject}</td>\n            <td>{languages.en.message}</td>\n          </tr>\n        </thead>\n        <tbody>{tableBody}</tbody>\n      </table>\n    </>\n  );\n};\n\nEmails.getInitialProps = async () => {\n  const res = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/emails`,\n    responseType: \"json\"\n  });\n  const data = await res.data;\n  return { data };\n};\n\nexport default Emails;\n"]},"metadata":{},"sourceType":"module"}