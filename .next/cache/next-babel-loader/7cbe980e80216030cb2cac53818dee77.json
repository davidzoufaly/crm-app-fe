{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useContext, useState, useEffect } from \"react\";\nimport Link from \"next/link\";\nimport languages from \"../library/languages\";\nimport UserContext from \"./UserContext\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\nimport PeopleAltIcon from \"@material-ui/icons/PeopleAlt\";\nimport EmailIcon from \"@material-ui/icons/Email\";\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport { Grid, Button, Toolbar, AppBar, Box, IconButton } from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nconst useStyles = makeStyles(theme => createStyles({\n  menuButton: {\n    marginRight: theme.spacing(2),\n    color: \"white\"\n  },\n  title: {\n    flexGrow: 1\n  },\n  toolBar: {\n    padding: 0\n  },\n  mobilMenuButton: {\n    color: \"white\",\n    display: \"none\",\n    [theme.breakpoints.down(\"sm\")]: {\n      display: \"block\"\n    }\n  },\n  menuGrid: {\n    flexDirection: \"row\",\n    [theme.breakpoints.down(\"sm\")]: {\n      flexDireciton: \"column\"\n    }\n  },\n  navMobil: {\n    position: \"absolute\",\n    left: 0,\n    backgroundColor: \"black\",\n    display: \"block\",\n    width: \"100%\",\n    top: \"100%\",\n    zIndex: -1,\n    padding: \"2rem\"\n  },\n  navDesktop: {\n    position: \"relative\",\n    display: \"none\",\n    [theme.breakpoints.up(\"md\")]: {\n      display: \"block\"\n    }\n  }\n}));\n\nconst Header = () => {\n  const classes = useStyles({});\n  const theme = useTheme();\n  const user = useContext(UserContext);\n  const matches = useMediaQuery(theme.breakpoints.down('sm'));\n  const {\n    0: mobilMenu,\n    1: setMobilMenu\n  } = useState(false);\n\n  const toggleMenu = () => {\n    setMobilMenu(prevState => !prevState);\n  };\n\n  useEffect(() => {\n    !matches ? setMobilMenu(false) : null;\n  }, [matches]);\n  return __jsx(AppBar, {\n    position: \"fixed\"\n  }, __jsx(Container, {\n    maxWidth: \"lg\"\n  }, __jsx(Toolbar, {\n    className: classes.toolBar,\n    style: {\n      position: \"relative\"\n    }\n  }, __jsx(Box, {\n    display: \"flex\",\n    width: \"100%\",\n    justifyContent: \"space-between\"\n  }, __jsx(IconButton, {\n    onClick: toggleMenu,\n    className: classes.mobilMenuButton\n  }, !mobilMenu ? __jsx(MenuIcon, null) : __jsx(CloseIcon, null)), __jsx(Box, {\n    component: \"nav\",\n    className: mobilMenu ? classes.navMobil : classes.navDesktop\n  }, __jsx(Grid, {\n    container: true,\n    direction: mobilMenu ? \"column\" : \"row\",\n    justify: \"center\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(Link, {\n    href: \"/dashboard/[key]\",\n    as: `/dashboard/${user.user.userkey}`\n  }, __jsx(Button, {\n    startIcon: __jsx(DashboardIcon, null),\n    className: classes.menuButton\n  }, languages.en.dashboard))), __jsx(Grid, {\n    item: true\n  }, __jsx(Link, {\n    href: \"/clients/[key]\",\n    as: `/clients/${user.user.userkey}`\n  }, __jsx(Button, {\n    startIcon: __jsx(PeopleAltIcon, null),\n    className: classes.menuButton\n  }, languages.en.clients))), __jsx(Grid, {\n    item: true\n  }, __jsx(Link, {\n    href: \"/emails/[key]\",\n    as: `/emails/${user.user.userkey}`\n  }, __jsx(Button, {\n    startIcon: __jsx(EmailIcon, null),\n    className: classes.menuButton\n  }, languages.en.emails))), __jsx(Grid, {\n    item: true\n  }, __jsx(Link, {\n    href: \"/settings/[key]\",\n    as: `/settings/${user.user.userkey}`\n  }, __jsx(Button, {\n    startIcon: __jsx(SettingsIcon, null),\n    className: classes.menuButton\n  }, languages.en.settings)))))), __jsx(Button, {\n    className: classes.menuButton,\n    onClick: () => user.logoutUser(),\n    startIcon: __jsx(ExitToAppIcon, null)\n  }, languages.en.logout))));\n};\n\nexport default Header;","map":null,"metadata":{},"sourceType":"module"}