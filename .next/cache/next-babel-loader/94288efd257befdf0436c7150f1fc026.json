{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/pages/clients.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useReducer, useContext } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport Header from \"../components/Header\";\nimport TableBody from \"../components/clients/TableBody\";\nimport CountContext from \"../components/CountContext\";\nimport UserContext from \"../components/UserContext\";\nimport stringMethods from \"../library/stringMethods\";\nimport globalVars from \"../library/globalVariables\";\nimport TableHead from \"../components/clients/TableHead\";\nimport CreateClient from \"../components/clients/CreateClient\";\nimport Buttons from \"../components/clients/Buttons\";\nimport LoadingSpinner from \"../components/LoadingSpinner\";\nimport EmailForm from \"../components/EmailForm\";\n\nconst Clients = ({\n  fieldData,\n  clientData\n}) => {\n  const router = useRouter();\n  const {\n    clientCounter\n  } = useContext(CountContext);\n  const user = useContext(UserContext);\n  const {\n    0: clients,\n    1: setClients\n  } = useReducer((state, action) => {\n    switch (action.type) {\n      case \"handleCheckedClients\":\n        return state.map(client => client._id === action.payload.id ? client.isChecked === false || client.isChecked === undefined ? _objectSpread({}, client, {\n          isChecked: true\n        }) : _objectSpread({}, client, {\n          isChecked: false\n        }) : client);\n\n      case \"addClient\":\n        return [...state, action.payload.newClient];\n\n      case \"deleteCheckedClients\":\n        return state.filter(client => !client.isChecked);\n\n      case \"unCheckAll\":\n        return state.map(client => client = _objectSpread({}, client, {\n          isChecked: false\n        }));\n\n      default:\n        return state;\n    }\n  }, clientData); //TODO: SPOJIT DO JEDNOHO STATU\n\n  const {\n    0: reverse,\n    1: setReverseOrder\n  } = useState(false);\n  const {\n    0: sort,\n    1: setSortBy\n  } = useState(\"firstName\"); //\n\n  const {\n    0: initialized,\n    1: setInitialized\n  } = useState(false);\n  const {\n    0: isClientAdded,\n    1: setIsClientAdded\n  } = useState(false);\n  const {\n    0: isEmailCreated,\n    1: setIsEmailCreated\n  } = useState(false);\n  useEffect(() => {\n    // set page title\n    const title = new stringMethods(router.pathname).removeSlash().firstCharUpperCase().addStringToEnd(globalVars.titleSubText).getString();\n    document.title = title;\n    setInitialized(true);\n  }, [router]);\n  useEffect(() => {\n    // reset email state, when user uncheck all recievers / clients\n    filterCheckedClients().length === 0 && isEmailCreated ? setIsEmailCreated(!isEmailCreated) : null;\n  }, [clients]); // create H1\n\n  const h1 = new stringMethods(router.pathname).removeSlash().firstCharUpperCase().getString();\n\n  const sortBy = fieldName => {\n    setSortBy(fieldName);\n    !reverse ? setReverseOrder(true) : setReverseOrder(false);\n  };\n\n  const handleCheckbox = id => {\n    setClients({\n      type: \"handleCheckedClients\",\n      payload: {\n        id\n      }\n    });\n  };\n\n  const addNewClientToState = newClient => {\n    setClients({\n      type: \"addClient\",\n      payload: {\n        newClient\n      }\n    });\n  };\n\n  const filterCheckedClients = () => clients.filter(client => client.isChecked);\n\n  const unCheckAll = () => {\n    setClients({\n      type: \"unCheckAll\"\n    });\n  };\n\n  const toggleIsEmailCreated = () => {\n    setIsEmailCreated(isEmailCreated ? false : true);\n  };\n\n  const toggleIsClientAdded = () => {\n    isClientAdded ? setIsClientAdded(false) : setIsClientAdded(true);\n  };\n\n  const deleteMultipleClients = async () => {\n    setClients({\n      type: \"deleteCheckedClients\"\n    });\n    await axios({\n      method: \"DELETE\",\n      data: filterCheckedClients().map(e => e._id),\n      url: `${globalVars.serverURL}/clients/`,\n      responseType: \"json\"\n    });\n  };\n\n  return !initialized || !user.user.signedIn ? __jsx(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }) : __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, h1), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, clientCounter), __jsx(EmailForm, {\n    to: filterCheckedClients().map(e => e[\"Email\"]),\n    isEmailCreated: isEmailCreated,\n    toggleIsEmailCreated: toggleIsEmailCreated,\n    unCheckAll: unCheckAll,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }), __jsx(CreateClient, {\n    fields: fieldData,\n    isClientAdded: isClientAdded,\n    toggleIsClientAdded: toggleIsClientAdded,\n    addNewClientToState: addNewClientToState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }), __jsx(Buttons, {\n    clientsAreNotChecked: !clients.some(client => client.isChecked),\n    deleteMultipleClients: deleteMultipleClients,\n    toggleIsClientAdded: toggleIsClientAdded,\n    isClientAdded: isClientAdded,\n    toggleIsEmailCreated: toggleIsEmailCreated,\n    isEmailCreated: isEmailCreated,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }), __jsx(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, __jsx(TableHead, {\n    fields: fieldData,\n    sortBy: sortBy,\n    reverse: reverse,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }), __jsx(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, __jsx(TableBody, {\n    clients: clients,\n    fields: fieldData,\n    sort: sort,\n    reverse: reverse,\n    handleCheckbox: handleCheckbox,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }))));\n};\n\nClients.getInitialProps = async () => {\n  //fetch clients\n  const clientRes = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/clients`,\n    responseType: \"json\"\n  });\n  const clientData = await clientRes.data; //fetch fields\n\n  const fieldRes = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/fields`,\n    responseType: \"json\"\n  });\n  const fieldData = await fieldRes.data;\n  return {\n    clientData,\n    fieldData\n  };\n};\n\nexport default Clients;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/pages/clients.tsx"],"names":["useState","useEffect","useReducer","useContext","useRouter","axios","Header","TableBody","CountContext","UserContext","stringMethods","globalVars","TableHead","CreateClient","Buttons","LoadingSpinner","EmailForm","Clients","fieldData","clientData","router","clientCounter","user","clients","setClients","state","action","type","map","client","_id","payload","id","isChecked","undefined","newClient","filter","reverse","setReverseOrder","sort","setSortBy","initialized","setInitialized","isClientAdded","setIsClientAdded","isEmailCreated","setIsEmailCreated","title","pathname","removeSlash","firstCharUpperCase","addStringToEnd","titleSubText","getString","document","filterCheckedClients","length","h1","sortBy","fieldName","handleCheckbox","addNewClientToState","unCheckAll","toggleIsEmailCreated","toggleIsClientAdded","deleteMultipleClients","method","data","e","url","serverURL","responseType","signedIn","some","getInitialProps","clientRes","fieldRes"],"mappings":"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","sourcesContent":["import { useState, useEffect, useReducer, useContext } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport Header from \"../components/Header\";\nimport TableBody from \"../components/clients/TableBody\";\nimport CountContext from \"../components/CountContext\";\nimport UserContext from \"../components/UserContext\";\nimport stringMethods from \"../library/stringMethods\";\nimport globalVars from \"../library/globalVariables\";\nimport TableHead from \"../components/clients/TableHead\";\nimport CreateClient from \"../components/clients/CreateClient\";\nimport Buttons from \"../components/clients/Buttons\";\nimport LoadingSpinner from \"../components/LoadingSpinner\";\nimport EmailForm from \"../components/EmailForm\";\n\nconst Clients = ({ fieldData, clientData }: any) => {\n  const router = useRouter();\n  const { clientCounter } = useContext(CountContext);\n  const user = useContext(UserContext);\n  \n  const [clients, setClients] = useReducer((state, action) => {\n    switch (action.type) {\n      case \"handleCheckedClients\":\n        return state.map(client =>\n          client._id === action.payload.id\n            ? client.isChecked === false || client.isChecked === undefined\n              ? { ...client, isChecked: true }\n              : { ...client, isChecked: false }\n            : client\n        );\n      case \"addClient\":\n        return [...state, action.payload.newClient];\n      case \"deleteCheckedClients\":\n        return state.filter(client => !client.isChecked);\n      case \"unCheckAll\": \n        return state.map(client => client = {...client, isChecked: false});\n      default:\n        return state;\n    }\n  }, clientData);\n\n  //TODO: SPOJIT DO JEDNOHO STATU\n  const [reverse, setReverseOrder] = useState(false);\n  const [sort, setSortBy] = useState(\"firstName\");\n  //\n  const [initialized, setInitialized] = useState(false);\n  const [isClientAdded, setIsClientAdded] = useState(false);\n  const [isEmailCreated, setIsEmailCreated] = useState(false);\n\n  useEffect(() => {\n    // set page title\n    const title = new stringMethods(router.pathname)\n      .removeSlash()\n      .firstCharUpperCase()\n      .addStringToEnd(globalVars.titleSubText)\n      .getString();\n    document.title = title;\n    setInitialized(true);\n  }, [router]);\n\n  useEffect(() => {\n    // reset email state, when user uncheck all recievers / clients\n    filterCheckedClients().length === 0 && isEmailCreated\n      ? setIsEmailCreated(!isEmailCreated)\n      : null;\n  }, [clients]);\n\n  // create H1\n  const h1 = new stringMethods(router.pathname)\n    .removeSlash()\n    .firstCharUpperCase()\n    .getString();\n\n  const sortBy = fieldName => {\n    setSortBy(fieldName);\n    !reverse ? setReverseOrder(true) : setReverseOrder(false);\n  };\n\n  const handleCheckbox = id => {\n    setClients({\n      type: \"handleCheckedClients\",\n      payload: { id }\n    });\n  };\n\n  const addNewClientToState = newClient => {\n    setClients({\n      type: \"addClient\",\n      payload: { newClient }\n    });\n  };\n\n  const filterCheckedClients = () => clients.filter(client => client.isChecked);\n\n  const unCheckAll = () => {\n    setClients({type: \"unCheckAll\"})\n  }\n\n  const toggleIsEmailCreated = () => {\n    setIsEmailCreated(isEmailCreated ? false : true);\n  };\n\n  const toggleIsClientAdded = () => { \n    isClientAdded ? setIsClientAdded(false) : setIsClientAdded(true);\n  };\n\n  const deleteMultipleClients = async () => {\n    setClients({\n      type: \"deleteCheckedClients\"\n    });\n\n    await axios({\n      method: \"DELETE\",\n      data: filterCheckedClients().map(e => e._id),\n      url: `${globalVars.serverURL}/clients/`,\n      responseType: \"json\"\n    });\n  };\n\n  return !initialized || !user.user.signedIn ? (\n    <LoadingSpinner />\n  ) : (\n    <div>\n      <Header />\n      <h1>{h1}</h1>\n      <p>{clientCounter}</p>\n      <EmailForm\n        to={filterCheckedClients().map(e => e[\"Email\"])}\n        isEmailCreated={isEmailCreated}\n        toggleIsEmailCreated={toggleIsEmailCreated}\n        unCheckAll={unCheckAll}\n      />\n      <CreateClient\n        fields={fieldData}\n        isClientAdded={isClientAdded}\n        toggleIsClientAdded={toggleIsClientAdded}\n        addNewClientToState={addNewClientToState}\n      />\n      <Buttons\n        clientsAreNotChecked={!clients.some(client => client.isChecked)}\n        deleteMultipleClients={deleteMultipleClients}\n        toggleIsClientAdded={toggleIsClientAdded}\n        isClientAdded={isClientAdded}\n        toggleIsEmailCreated={toggleIsEmailCreated}\n        isEmailCreated={isEmailCreated}\n      />\n      <table>\n        <TableHead fields={fieldData} sortBy={sortBy} reverse={reverse} />\n        <tbody>\n          <TableBody\n            clients={clients}\n            fields={fieldData}\n            sort={sort}\n            reverse={reverse}\n            handleCheckbox={handleCheckbox}\n          />\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nClients.getInitialProps = async () => {\n  //fetch clients\n  const clientRes = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/clients`,\n    responseType: \"json\"\n  });\n  const clientData = await clientRes.data;\n\n  //fetch fields\n  const fieldRes = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/fields`,\n    responseType: \"json\"\n  });\n  const fieldData = await fieldRes.data;\n\n  return {\n    clientData,\n    fieldData\n  };\n};\n\nexport default Clients;\n"]},"metadata":{},"sourceType":"module"}