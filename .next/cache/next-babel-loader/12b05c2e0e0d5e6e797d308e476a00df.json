{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/pages/clients.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport Header from \"../components/Header\";\nimport TableBody from \"../components/clientTable/TableBody\";\nimport stringMethods from \"../library/stringMethods\";\nimport globalVars from \"../library/globalVariables\";\nimport TableHead from \"../components/clientTable/TableHead\";\nimport CreateClient from \"../components/CreateClient\";\n\nvar Clients = function Clients(_ref) {\n  var fieldData = _ref.fieldData,\n      clientData = _ref.clientData;\n  var router = useRouter();\n\n  var _useState = useState(clientData),\n      clients = _useState[0],\n      setClients = _useState[1]; //TODO: SPOJIT DO JEDNOHO STATU\n\n\n  var _useState2 = useState(false),\n      reverse = _useState2[0],\n      setReverseOrder = _useState2[1];\n\n  var _useState3 = useState(\"firstName\"),\n      sort = _useState3[0],\n      setSortBy = _useState3[1]; //\n\n\n  var _useState4 = useState(false),\n      initialized = _useState4[0],\n      setInitialized = _useState4[1];\n\n  var _useState5 = useState(false),\n      isClientAdded = _useState5[0],\n      setIsClientAdded = _useState5[1];\n\n  useEffect(function () {\n    console.log(\"render\");\n    var title = new stringMethods(router.pathname).removeSlash().firstCharUpperCase().addStringToEnd(globalVars.titleSubText).getString();\n    document.title = title;\n    setInitialized(true);\n  });\n  var h1 = new stringMethods(router.pathname).removeSlash().firstCharUpperCase().getString();\n\n  var refreshList =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var res, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return axios({\n                method: \"get\",\n                url: \"\".concat(globalVars.serverURL, \"/clients\"),\n                responseType: \"json\"\n              });\n\n            case 2:\n              res = _context.sent;\n              _context.next = 5;\n              return res.data;\n\n            case 5:\n              data = _context.sent;\n              setClients(data);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function refreshList() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var sortBy = function sortBy(fieldName) {\n    setSortBy(fieldName);\n    !reverse ? setReverseOrder(true) : setReverseOrder(false);\n  };\n\n  var toggleIsClientAdded = function toggleIsClientAdded() {\n    isClientAdded ? setIsClientAdded(false) : setIsClientAdded(true);\n  };\n\n  var handleCheckbox = function handleCheckbox(id) {\n    setClients(clients.map(function (client) {\n      if (client._id === id) {\n        return client.isChecked === false || client.isChecked === undefined ? _objectSpread({}, client, {\n          isChecked: true\n        }) : _objectSpread({}, client, {\n          isChecked: false\n        });\n      } else {\n        return client;\n      }\n    }));\n  };\n\n  var deleteMultipleClients =\n  /*#__PURE__*/\n  function () {\n    var _ref3 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var clientsToDelete, resDelete, dataDelete;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              clientsToDelete = [];\n              clients.map(function (client) {\n                return client.isChecked ? clientsToDelete.push(client._id) : null;\n              });\n              _context2.next = 4;\n              return axios({\n                method: \"delete\",\n                data: clientsToDelete,\n                url: \"\".concat(globalVars.serverURL, \"/clients/\"),\n                responseType: \"json\"\n              });\n\n            case 4:\n              resDelete = _context2.sent;\n              _context2.next = 7;\n              return resDelete.data;\n\n            case 7:\n              dataDelete = _context2.sent;\n              dataDelete.msg === \"Success\" ? refreshList() : console.error();\n              ;\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function deleteMultipleClients() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  if (!initialized) {\n    return \"Loading\";\n  }\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, h1), __jsx(CreateClient, {\n    fields: fieldData,\n    isClientAdded: isClientAdded,\n    toggleIsClientAdded: toggleIsClientAdded,\n    refreshList: refreshList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }), __jsx(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, __jsx(TableHead, {\n    fields: fieldData,\n    sortBy: sortBy,\n    reverse: reverse,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), __jsx(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, __jsx(TableBody, {\n    clients: clients,\n    fields: fieldData,\n    sort: sort,\n    reverse: reverse,\n    handleCheckbox: handleCheckbox,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }))));\n};\n\nClients.getInitialProps =\n/*#__PURE__*/\n_asyncToGenerator(\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee3() {\n  var clientRes, clientData, fieldRes, fieldData;\n  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return axios({\n            method: \"get\",\n            url: \"\".concat(globalVars.serverURL, \"/clients\"),\n            responseType: \"json\"\n          });\n\n        case 2:\n          clientRes = _context3.sent;\n          _context3.next = 5;\n          return clientRes.data;\n\n        case 5:\n          clientData = _context3.sent;\n          _context3.next = 8;\n          return axios({\n            method: \"get\",\n            url: \"\".concat(globalVars.serverURL, \"/fields\"),\n            responseType: \"json\"\n          });\n\n        case 8:\n          fieldRes = _context3.sent;\n          _context3.next = 11;\n          return fieldRes.data;\n\n        case 11:\n          fieldData = _context3.sent;\n          return _context3.abrupt(\"return\", {\n            clientData: clientData,\n            fieldData: fieldData\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _callee3);\n}));\nexport default Clients;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/pages/clients.tsx"],"names":["useState","useEffect","useRouter","axios","Header","TableBody","stringMethods","globalVars","TableHead","CreateClient","Clients","fieldData","clientData","router","clients","setClients","reverse","setReverseOrder","sort","setSortBy","initialized","setInitialized","isClientAdded","setIsClientAdded","console","log","title","pathname","removeSlash","firstCharUpperCase","addStringToEnd","titleSubText","getString","document","h1","refreshList","method","url","serverURL","responseType","res","data","sortBy","fieldName","toggleIsClientAdded","handleCheckbox","id","map","client","_id","isChecked","undefined","deleteMultipleClients","clientsToDelete","push","resDelete","dataDelete","msg","error","getInitialProps","clientRes","fieldRes"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport Header from \"../components/Header\";\nimport TableBody from \"../components/clientTable/TableBody\";\nimport stringMethods from \"../library/stringMethods\";\nimport globalVars from \"../library/globalVariables\";\nimport TableHead from \"../components/clientTable/TableHead\";\nimport CreateClient from \"../components/CreateClient\";\n\nconst Clients = ({ fieldData, clientData }: any) => {\n  const router = useRouter();\n\n  const [clients, setClients] = useState(clientData);\n  //TODO: SPOJIT DO JEDNOHO STATU\n  const [reverse, setReverseOrder] = useState(false);\n  const [sort, setSortBy] = useState(\"firstName\");\n  //\n  const [initialized, setInitialized] = useState(false);\n  const [isClientAdded, setIsClientAdded] = useState(false);\n\n  useEffect(() => {\n    console.log(\"render\");\n    const title = new stringMethods(router.pathname)\n      .removeSlash()\n      .firstCharUpperCase()\n      .addStringToEnd(globalVars.titleSubText)\n      .getString();\n    document.title = title;\n    setInitialized(true);\n  });\n\n  const h1 = new stringMethods(router.pathname)\n  .removeSlash()\n  .firstCharUpperCase()\n  .getString()\n\n  const refreshList = async () => {\n    //get data from DB after change\n    const res = await axios({\n      method: \"get\",\n      url: `${globalVars.serverURL}/clients`,\n      responseType: \"json\"\n    });\n    const data = await res.data;\n    setClients(data);\n  }\n\n  const sortBy = (fieldName) => {\n    setSortBy(fieldName);\n    !reverse ? setReverseOrder(true) : setReverseOrder(false);\n  }\n\n  const toggleIsClientAdded = () => {\n    isClientAdded ? setIsClientAdded(false) : setIsClientAdded(true);\n  }\n\n  const handleCheckbox = (id) => {\n    setClients(clients.map(client => {\n      if(client._id === id) {\n        return client.isChecked === false || client.isChecked === undefined ? {...client, isChecked: true} : {...client, isChecked: false}\n      } else {\n        return client\n      }\n    }\n    ))}\n\n  const deleteMultipleClients = async () => {\n    const clientsToDelete = [];\n    clients.map(client => client.isChecked ? clientsToDelete.push(client._id) : null);\n    const resDelete = await axios({\n      method: \"delete\",\n      data: clientsToDelete,\n      url: `${globalVars.serverURL}/clients/`,\n      responseType: \"json\"\n    })\n    const dataDelete = await resDelete.data;\n    dataDelete.msg === \"Success\" ? refreshList() : console.error();\n    ;\n  }\n\n  if (!initialized) {\n    return \"Loading\";\n  }\n  return (\n    <div>\n      <Header />\n      <h1>{h1}</h1>\n      <CreateClient fields={fieldData} isClientAdded={isClientAdded} toggleIsClientAdded={toggleIsClientAdded} refreshList={refreshList} />\n      <table>\n          <TableHead fields={fieldData} sortBy={sortBy} reverse={reverse}/>\n          <tbody>\n          <TableBody clients={clients} fields={fieldData} sort={sort} reverse={reverse} handleCheckbox={handleCheckbox}/>\n          </tbody>\n      </table>\n\n    </div>\n  );\n};\n\nClients.getInitialProps = async () => {\n  const clientRes = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/clients`,\n    responseType: \"json\"\n  });\n  const clientData = await clientRes.data;\n\n  const fieldRes = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/fields`,\n    responseType: \"json\"\n  })\n  const fieldData = await fieldRes.data\n\n  return {\n    clientData, fieldData\n  };\n};\n\nexport default Clients;\n"]},"metadata":{},"sourceType":"module"}