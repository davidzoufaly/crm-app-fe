{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/AddOrEditField.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport SelectFieldOptions from \"../components/SelectFieldOptions\";\nimport uniqid from \"uniqid\";\n\nvar AddOrEditField = function AddOrEditField(_ref) {\n  var fieldObject = _ref.fieldObject,\n      changeDisplayComponent = _ref.changeDisplayComponent;\n\n  var _useState = useState(fieldObject),\n      updatedField = _useState[0],\n      setUpdatedField = _useState[1];\n\n  var _useState2 = useState([]),\n      options = _useState2[0],\n      setNewOption = _useState2[1];\n\n  var saveField = function saveField() {\n    //todo: post req na fields s editedField\n    setUpdatedField({});\n    changeDisplayComponent();\n  };\n\n  var onNameChange = function onNameChange(event) {\n    setUpdatedField(_objectSpread({}, updatedField, {\n      fieldName: event.target.value\n    }));\n  };\n\n  var onSelectChange = function onSelectChange(event) {\n    setUpdatedField(_objectSpread({}, updatedField, {\n      fieldType: event.target.options[event.target.options.selectedIndex].value\n    }));\n  };\n\n  var handleInputsSpawn = function handleInputsSpawn() {\n    setNewOption([].concat(_toConsumableArray(options), [{\n      id: uniqid(),\n      value: \"\"\n    }]));\n  };\n\n  var onChange = function onChange(event) {\n    setNewOption(options.filter(function (e) {\n      return event.target.id === e.id ? e.value = event.target.value : e;\n    }));\n  };\n\n  var onDelete = function onDelete(event) {\n    setNewOption(options.filter(function (e) {\n      return event.target.id !== e.id ? e : null;\n    }));\n  };\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: \"field-name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Field name\"), __jsx(\"input\", {\n    type: \"text\",\n    id: \"field-name\",\n    defaultValue: updatedField.fieldName,\n    onChange: onNameChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), __jsx(\"label\", {\n    htmlFor: \"field-type\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"Field type\"), __jsx(\"select\", {\n    id: \"field-type\",\n    onChange: onSelectChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, __jsx(\"option\", {\n    value: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Text\"), __jsx(\"option\", {\n    value: \"select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Select\"), __jsx(\"option\", {\n    value: \"number\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Number\")), __jsx(SelectFieldOptions, {\n    options: options,\n    onChange: onChange,\n    onDelete: onDelete,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), updatedField.fieldType === \"select\" ? __jsx(\"button\", {\n    onClick: handleInputsSpawn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"New\") : null, __jsx(\"button\", {\n    onClick: saveField,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Save\"), __jsx(\"button\", {\n    onClick: changeDisplayComponent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Cancel\"));\n};\n\nexport default AddOrEditField;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/AddOrEditField.tsx"],"names":["useState","SelectFieldOptions","uniqid","AddOrEditField","fieldObject","changeDisplayComponent","updatedField","setUpdatedField","options","setNewOption","saveField","onNameChange","event","fieldName","target","value","onSelectChange","fieldType","selectedIndex","handleInputsSpawn","id","onChange","filter","e","onDelete"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport SelectFieldOptions from \"../components/SelectFieldOptions\";\nimport uniqid from \"uniqid\";\n\nconst AddOrEditField = ({ fieldObject, changeDisplayComponent }: any) => {\n  const [updatedField, setUpdatedField] = useState(fieldObject);\n  const [options, setNewOption]: any = useState([]);\n\n  const saveField = () => {\n    //todo: post req na fields s editedField\n    setUpdatedField({});\n    changeDisplayComponent();\n  };\n\n  const onNameChange = (event: any) => {\n    setUpdatedField({ ...updatedField, fieldName: event.target.value });\n  };\n\n  const onSelectChange = (event: any) => {\n    setUpdatedField({\n      ...updatedField,\n      fieldType: event.target.options[event.target.options.selectedIndex].value\n    });\n  };\n\n  const handleInputsSpawn = () => {\n    setNewOption([...options, { id: uniqid(), value: \"\" }]);\n  };\n\n  const onChange = (event: any) => {\n    setNewOption(\n      options.filter((e: any) =>\n        event.target.id === e.id ? (e.value = event.target.value) : e\n      )\n    );\n  };\n\n  const onDelete = (event: any) => {\n    setNewOption(\n      options.filter((e: any) => (event.target.id !== e.id ? e : null))\n    );\n  };\n\n  return (\n    <div>\n      <label htmlFor=\"field-name\">Field name</label>\n      <input\n        type=\"text\"\n        id=\"field-name\"\n        defaultValue={updatedField.fieldName}\n        onChange={onNameChange}\n      />\n      <label htmlFor=\"field-type\">Field type</label>\n      <select id=\"field-type\" onChange={onSelectChange}>\n        <option value=\"text\">Text</option>\n        <option value=\"select\">Select</option>\n        <option value=\"number\">Number</option>\n      </select>\n      <SelectFieldOptions options={options} onChange={onChange} onDelete={onDelete} />\n      {updatedField.fieldType === \"select\" ? (\n        <button onClick={handleInputsSpawn}>New</button>\n      ) : null}\n      <button onClick={saveField}>Save</button>\n      <button onClick={changeDisplayComponent}>Cancel</button>\n    </div>\n  );\n};\n\nexport default AddOrEditField;\n"]},"metadata":{},"sourceType":"module"}