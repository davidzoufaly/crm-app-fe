{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/settings/customFields/CustomFields.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useReducer, useContext } from \"react\";\nimport axios from \"axios\";\nimport uniqid from \"uniqid\";\nimport generateUniqueId from \"generate-unique-id\";\nimport AddOrEditField from \"./AddOrEditField\";\nimport UserContext from \"../../UserContext\";\nimport CustomFieldsList from \"./CustomFieldsList\";\nimport SelectFieldOptions from \"./SelectFieldOptions\";\nimport globalVars from \"../../../library/globalVariables\";\nimport { Box } from \"@material-ui/core\";\n\nconst CustomClientFields = ({\n  fields,\n  refreshList,\n  addField\n}) => {\n  const blankFieldObject = {\n    fieldName: \"\",\n    fieldType: \"text\",\n    fieldOptions: [],\n    fieldFormVisible: null,\n    _id: generateUniqueId({\n      length: 24,\n      useNumbers: true,\n      useLetters: false,\n      includeSymbols: [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n    })\n  };\n  const user = useContext(UserContext);\n  const {\n    0: displayComponent,\n    1: setDisplayComponent\n  } = useState(false);\n  const {\n    0: editedField,\n    1: setEditedField\n  } = useReducer((state, action) => {\n    switch (action.type) {\n      case \"fieldNameChange\":\n        return _objectSpread({}, state, {\n          fieldName: action.payload.value\n        });\n\n      case \"selectValueChange\":\n        return _objectSpread({}, state, {\n          fieldType: action.payload.value\n        });\n\n      case \"newOptionSpawn\":\n        return _objectSpread({}, state, {\n          fieldOptions: [...state.fieldOptions, {\n            id: uniqid(),\n            value: \"\"\n          }]\n        });\n\n      case \"clear\":\n        return blankFieldObject;\n\n      case \"optionValueChange\":\n        return _objectSpread({}, state, {\n          fieldOptions: state.fieldOptions.map(el => el.id === action.payload.id ? _objectSpread({}, el, {\n            value: action.payload.value\n          }) : el)\n        });\n\n      case \"optionDelete\":\n        return _objectSpread({}, state, {\n          fieldOptions: state.fieldOptions.filter(e => action.payload.id !== e.id)\n        });\n\n      case \"setWithPaylod\":\n        return action.payload.obj;\n\n      default:\n        return state;\n    }\n  }, blankFieldObject);\n  const fieldMethods = {\n    onNameChange(event) {\n      setEditedField({\n        type: \"fieldNameChange\",\n        payload: {\n          value: event.target.value\n        }\n      });\n    },\n\n    onSelectChange(event) {\n      setEditedField({\n        type: \"selectValueChange\",\n        payload: {\n          value: event.target.value\n        }\n      });\n    },\n\n    handleOptionSpawn(e) {\n      e.preventDefault();\n      setEditedField({\n        type: \"newOptionSpawn\"\n      });\n    },\n\n    toggleDisplayComponent() {\n      displayComponent ? setDisplayComponent(false) : setDisplayComponent(true);\n      setEditedField({\n        type: \"clear\"\n      });\n    },\n\n    onOptionDelete(event) {\n      setEditedField({\n        type: \"optionDelete\",\n        payload: {\n          id: event.currentTarget.id\n        }\n      });\n    },\n\n    onOptionChange(id, event) {\n      setEditedField({\n        type: \"optionValueChange\",\n        payload: {\n          value: event.target.value,\n          id\n        }\n      });\n    },\n\n    setupEditedField(obj) {\n      setEditedField({\n        type: \"setWithPaylod\",\n        payload: {\n          obj\n        }\n      });\n      !displayComponent ? setDisplayComponent(true) : null;\n    },\n\n    saveEditedField(e) {\n      e.preventDefault();\n\n      const fieldIsUpdated = async () => {\n        const {\n          fieldName,\n          fieldType,\n          fieldOptions,\n          _id\n        } = editedField;\n        const res = await axios({\n          method: \"PUT\",\n          url: `${globalVars.serverURL}/fields/${_id}`,\n          params: {\n            key: user.user.userkey\n          },\n          data: {\n            fieldName,\n            fieldType,\n            fieldOptions\n          },\n          responseType: \"json\"\n        });\n        const data = await res.data;\n\n        if (data.msg === globalVars.msgSuccess) {\n          reset();\n        }\n      };\n\n      const fieldIsCreated = async () => {\n        const res = await axios({\n          method: \"POST\",\n          params: {\n            key: user.user.userkey\n          },\n          url: `${globalVars.serverURL}/fields/`,\n          data: editedField,\n          responseType: \"json\"\n        });\n        const data = await res.data;\n\n        if (data.msg === globalVars.msgSuccess) {\n          reset();\n        }\n      };\n\n      !editedField.id ? fieldIsCreated() : fieldIsUpdated();\n    }\n\n  };\n\n  const reset = () => {\n    setDisplayComponent(false);\n    console.log(editedField);\n    addField(editedField);\n    setEditedField({\n      type: \"clear\"\n    });\n  };\n\n  const deleteField = async id => {\n    const res = await axios({\n      method: \"DELETE\",\n      params: {\n        key: user.user.userkey\n      },\n      url: `${globalVars.serverURL}/fields/${id}`,\n      responseType: \"json\"\n    });\n    const resData = await res.data;\n    resData.msg === globalVars.msgSuccess ? refreshList() : null;\n  };\n\n  return __jsx(Box, {\n    mt: \"1rem\",\n    mb: \"5rem\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, __jsx(CustomFieldsList, {\n    deleteField: deleteField,\n    fields: fields,\n    setupEditedField: fieldMethods.setupEditedField,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }), __jsx(AddOrEditField, {\n    editedField: editedField,\n    displayComponent: displayComponent,\n    fieldMethods: fieldMethods,\n    handleOption: __jsx(SelectFieldOptions, {\n      options: editedField.fieldOptions,\n      fieldMethods: fieldMethods,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }));\n};\n\nexport default CustomClientFields;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/settings/customFields/CustomFields.tsx"],"names":["useState","useReducer","useContext","axios","uniqid","generateUniqueId","AddOrEditField","UserContext","CustomFieldsList","SelectFieldOptions","globalVars","Box","CustomClientFields","fields","refreshList","addField","blankFieldObject","fieldName","fieldType","fieldOptions","fieldFormVisible","_id","length","useNumbers","useLetters","includeSymbols","user","displayComponent","setDisplayComponent","editedField","setEditedField","state","action","type","payload","value","id","map","el","filter","e","obj","fieldMethods","onNameChange","event","target","onSelectChange","handleOptionSpawn","preventDefault","toggleDisplayComponent","onOptionDelete","currentTarget","onOptionChange","setupEditedField","saveEditedField","fieldIsUpdated","res","method","url","serverURL","params","key","userkey","data","responseType","msg","msgSuccess","reset","fieldIsCreated","console","log","deleteField","resData"],"mappings":";;;;AAAA,SAASA,QAAT,EAAmBC,UAAnB,EAA+BC,UAA/B,QAAiD,OAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,SAASC,GAAT,QAAoB,mBAApB;;AAEA,MAAMC,kBAAkB,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,WAAV;AAAuBC,EAAAA;AAAvB,CAAD,KAA4C;AACrE,QAAMC,gBAAgB,GAAG;AACvBC,IAAAA,SAAS,EAAE,EADY;AAEvBC,IAAAA,SAAS,EAAE,MAFY;AAGvBC,IAAAA,YAAY,EAAE,EAHS;AAIvBC,IAAAA,gBAAgB,EAAE,IAJK;AAKvBC,IAAAA,GAAG,EAAEhB,gBAAgB,CAAC;AACpBiB,MAAAA,MAAM,EAAE,EADY;AAEpBC,MAAAA,UAAU,EAAE,IAFQ;AAGpBC,MAAAA,UAAU,EAAE,KAHQ;AAIpBC,MAAAA,cAAc,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B;AAJI,KAAD;AALE,GAAzB;AAaA,QAAMC,IAAI,GAAGxB,UAAU,CAACK,WAAD,CAAvB;AACA,QAAM;AAAA,OAACoB,gBAAD;AAAA,OAAmBC;AAAnB,MAA0C5B,QAAQ,CAAC,KAAD,CAAxD;AAEA,QAAM;AAAA,OAAC6B,WAAD;AAAA,OAAcC;AAAd,MAAgC7B,UAAU,CAAC,CAAC8B,KAAD,EAAQC,MAAR,KAAmB;AAClE,YAAQA,MAAM,CAACC,IAAf;AACE,WAAK,iBAAL;AACE,iCACKF,KADL;AAEEd,UAAAA,SAAS,EAAEe,MAAM,CAACE,OAAP,CAAeC;AAF5B;;AAIF,WAAK,mBAAL;AACE,iCACKJ,KADL;AAEEb,UAAAA,SAAS,EAAEc,MAAM,CAACE,OAAP,CAAeC;AAF5B;;AAIF,WAAK,gBAAL;AACE,iCACKJ,KADL;AAEEZ,UAAAA,YAAY,EAAE,CAAC,GAAGY,KAAK,CAACZ,YAAV,EAAwB;AAAEiB,YAAAA,EAAE,EAAEhC,MAAM,EAAZ;AAAgB+B,YAAAA,KAAK,EAAE;AAAvB,WAAxB;AAFhB;;AAIF,WAAK,OAAL;AACE,eAAOnB,gBAAP;;AACF,WAAK,mBAAL;AACE,iCACKe,KADL;AAEEZ,UAAAA,YAAY,EAAEY,KAAK,CAACZ,YAAN,CAAmBkB,GAAnB,CAAwBC,EAAD,IACnCA,EAAE,CAACF,EAAH,KAAUJ,MAAM,CAACE,OAAP,CAAeE,EAAzB,qBACSE,EADT;AACaH,YAAAA,KAAK,EAAEH,MAAM,CAACE,OAAP,CAAeC;AADnC,eAEIG,EAHQ;AAFhB;;AAQF,WAAK,cAAL;AACE,iCACKP,KADL;AAEEZ,UAAAA,YAAY,EAAEY,KAAK,CAACZ,YAAN,CAAmBoB,MAAnB,CACXC,CAAD,IAAYR,MAAM,CAACE,OAAP,CAAeE,EAAf,KAAsBI,CAAC,CAACJ,EADxB;AAFhB;;AAMF,WAAK,eAAL;AACE,eAAOJ,MAAM,CAACE,OAAP,CAAeO,GAAtB;;AAEF;AACE,eAAOV,KAAP;AAtCJ;AAwCD,GAzC+C,EAyC7Cf,gBAzC6C,CAAhD;AA2CA,QAAM0B,YAAY,GAAG;AACnBC,IAAAA,YAAY,CAACC,KAAD,EAAa;AACvBd,MAAAA,cAAc,CAAC;AACbG,QAAAA,IAAI,EAAE,iBADO;AAEbC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,KAAK,EAAES,KAAK,CAACC,MAAN,CAAaV;AAAtB;AAFI,OAAD,CAAd;AAID,KANkB;;AAOnBW,IAAAA,cAAc,CAACF,KAAD,EAAa;AACzBd,MAAAA,cAAc,CAAC;AACbG,QAAAA,IAAI,EAAE,mBADO;AAEbC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,KAAK,EAAES,KAAK,CAACC,MAAN,CAAaV;AAAtB;AAFI,OAAD,CAAd;AAID,KAZkB;;AAanBY,IAAAA,iBAAiB,CAACP,CAAD,EAAI;AACnBA,MAAAA,CAAC,CAACQ,cAAF;AACAlB,MAAAA,cAAc,CAAC;AACbG,QAAAA,IAAI,EAAE;AADO,OAAD,CAAd;AAGD,KAlBkB;;AAmBnBgB,IAAAA,sBAAsB,GAAG;AACvBtB,MAAAA,gBAAgB,GAAGC,mBAAmB,CAAC,KAAD,CAAtB,GAAgCA,mBAAmB,CAAC,IAAD,CAAnE;AACAE,MAAAA,cAAc,CAAC;AAAEG,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAd;AACD,KAtBkB;;AAuBnBiB,IAAAA,cAAc,CAACN,KAAD,EAAa;AACzBd,MAAAA,cAAc,CAAC;AACbG,QAAAA,IAAI,EAAE,cADO;AAEbC,QAAAA,OAAO,EAAE;AAAEE,UAAAA,EAAE,EAAEQ,KAAK,CAACO,aAAN,CAAoBf;AAA1B;AAFI,OAAD,CAAd;AAID,KA5BkB;;AA6BnBgB,IAAAA,cAAc,CAAChB,EAAD,EAAKQ,KAAL,EAAY;AACxBd,MAAAA,cAAc,CAAC;AACbG,QAAAA,IAAI,EAAE,mBADO;AAEbC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,KAAK,EAAES,KAAK,CAACC,MAAN,CAAaV,KAAtB;AAA6BC,UAAAA;AAA7B;AAFI,OAAD,CAAd;AAID,KAlCkB;;AAmCnBiB,IAAAA,gBAAgB,CAACZ,GAAD,EAAW;AACzBX,MAAAA,cAAc,CAAC;AACbG,QAAAA,IAAI,EAAE,eADO;AAEbC,QAAAA,OAAO,EAAE;AAAEO,UAAAA;AAAF;AAFI,OAAD,CAAd;AAIA,OAACd,gBAAD,GAAoBC,mBAAmB,CAAC,IAAD,CAAvC,GAAgD,IAAhD;AACD,KAzCkB;;AA0CnB0B,IAAAA,eAAe,CAACd,CAAD,EAAI;AACjBA,MAAAA,CAAC,CAACQ,cAAF;;AAEA,YAAMO,cAAc,GAAG,YAAY;AACjC,cAAM;AAAEtC,UAAAA,SAAF;AAAaC,UAAAA,SAAb;AAAwBC,UAAAA,YAAxB;AAAsCE,UAAAA;AAAtC,YAA8CQ,WAApD;AACA,cAAM2B,GAAG,GAAG,MAAMrD,KAAK,CAAC;AACtBsD,UAAAA,MAAM,EAAE,KADc;AAEtBC,UAAAA,GAAG,EAAG,GAAEhD,UAAU,CAACiD,SAAU,WAAUtC,GAAI,EAFrB;AAGtBuC,UAAAA,MAAM,EAAE;AAAEC,YAAAA,GAAG,EAAEnC,IAAI,CAACA,IAAL,CAAUoC;AAAjB,WAHc;AAItBC,UAAAA,IAAI,EAAE;AAAE9C,YAAAA,SAAF;AAAaC,YAAAA,SAAb;AAAwBC,YAAAA;AAAxB,WAJgB;AAKtB6C,UAAAA,YAAY,EAAE;AALQ,SAAD,CAAvB;AAOA,cAAMD,IAAI,GAAG,MAAMP,GAAG,CAACO,IAAvB;;AACA,YAAIA,IAAI,CAACE,GAAL,KAAavD,UAAU,CAACwD,UAA5B,EAAwC;AACtCC,UAAAA,KAAK;AACN;AACF,OAbD;;AAeA,YAAMC,cAAc,GAAG,YAAY;AACjC,cAAMZ,GAAG,GAAG,MAAMrD,KAAK,CAAC;AACtBsD,UAAAA,MAAM,EAAE,MADc;AAEtBG,UAAAA,MAAM,EAAE;AAAEC,YAAAA,GAAG,EAAEnC,IAAI,CAACA,IAAL,CAAUoC;AAAjB,WAFc;AAGtBJ,UAAAA,GAAG,EAAG,GAAEhD,UAAU,CAACiD,SAAU,UAHP;AAItBI,UAAAA,IAAI,EAAElC,WAJgB;AAKtBmC,UAAAA,YAAY,EAAE;AALQ,SAAD,CAAvB;AAOA,cAAMD,IAAI,GAAG,MAAMP,GAAG,CAACO,IAAvB;;AACA,YAAIA,IAAI,CAACE,GAAL,KAAavD,UAAU,CAACwD,UAA5B,EAAwC;AACtCC,UAAAA,KAAK;AACN;AACF,OAZD;;AAaA,OAACtC,WAAW,CAACO,EAAb,GAAkBgC,cAAc,EAAhC,GAAqCb,cAAc,EAAnD;AACD;;AA1EkB,GAArB;;AA6EA,QAAMY,KAAK,GAAG,MAAM;AAClBvC,IAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACAyC,IAAAA,OAAO,CAACC,GAAR,CAAYzC,WAAZ;AACAd,IAAAA,QAAQ,CAACc,WAAD,CAAR;AACAC,IAAAA,cAAc,CAAC;AAAEG,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAd;AACD,GALD;;AAOA,QAAMsC,WAAW,GAAG,MAAOnC,EAAP,IAAmB;AACrC,UAAMoB,GAAG,GAAG,MAAMrD,KAAK,CAAC;AACtBsD,MAAAA,MAAM,EAAE,QADc;AAEtBG,MAAAA,MAAM,EAAE;AAAEC,QAAAA,GAAG,EAAEnC,IAAI,CAACA,IAAL,CAAUoC;AAAjB,OAFc;AAGtBJ,MAAAA,GAAG,EAAG,GAAEhD,UAAU,CAACiD,SAAU,WAAUvB,EAAG,EAHpB;AAItB4B,MAAAA,YAAY,EAAE;AAJQ,KAAD,CAAvB;AAMA,UAAMQ,OAAO,GAAG,MAAMhB,GAAG,CAACO,IAA1B;AACAS,IAAAA,OAAO,CAACP,GAAR,KAAgBvD,UAAU,CAACwD,UAA3B,GAAwCpD,WAAW,EAAnD,GAAwD,IAAxD;AACD,GATD;;AAWA,SACE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAC,MAAR;AAAe,IAAA,EAAE,EAAC,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,gBAAD;AACE,IAAA,WAAW,EAAEyD,WADf;AAEE,IAAA,MAAM,EAAE1D,MAFV;AAGE,IAAA,gBAAgB,EAAE6B,YAAY,CAACW,gBAHjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAME,MAAC,cAAD;AACE,IAAA,WAAW,EAAExB,WADf;AAEE,IAAA,gBAAgB,EAAEF,gBAFpB;AAGE,IAAA,YAAY,EAAEe,YAHhB;AAIE,IAAA,YAAY,EACV,MAAC,kBAAD;AACE,MAAA,OAAO,EAAEb,WAAW,CAACV,YADvB;AAEE,MAAA,YAAY,EAAEuB,YAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAoBD,CA/KD;;AAiLA,eAAe9B,kBAAf","sourcesContent":["import { useState, useReducer, useContext } from \"react\";\nimport axios from \"axios\";\nimport uniqid from \"uniqid\";\nimport generateUniqueId from \"generate-unique-id\";\nimport AddOrEditField from \"./AddOrEditField\";\nimport UserContext from \"../../UserContext\";\nimport CustomFieldsList from \"./CustomFieldsList\";\nimport SelectFieldOptions from \"./SelectFieldOptions\";\nimport globalVars from \"../../../library/globalVariables\";\nimport { Box } from \"@material-ui/core\";\n\nconst CustomClientFields = ({ fields, refreshList, addField }: any) => {\n  const blankFieldObject = {\n    fieldName: \"\",\n    fieldType: \"text\",\n    fieldOptions: [],\n    fieldFormVisible: null,\n    _id: generateUniqueId({\n      length: 24,\n      useNumbers: true,\n      useLetters: false,\n      includeSymbols: [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n    })\n  };\n\n  const user = useContext(UserContext);\n  const [displayComponent, setDisplayComponent] = useState(false);\n\n  const [editedField, setEditedField] = useReducer((state, action) => {\n    switch (action.type) {\n      case \"fieldNameChange\":\n        return {\n          ...state,\n          fieldName: action.payload.value\n        };\n      case \"selectValueChange\":\n        return {\n          ...state,\n          fieldType: action.payload.value\n        };\n      case \"newOptionSpawn\":\n        return {\n          ...state,\n          fieldOptions: [...state.fieldOptions, { id: uniqid(), value: \"\" }]\n        };\n      case \"clear\":\n        return blankFieldObject;\n      case \"optionValueChange\":\n        return {\n          ...state,\n          fieldOptions: state.fieldOptions.map((el: any) =>\n            el.id === action.payload.id\n              ? { ...el, value: action.payload.value }\n              : el\n          )\n        };\n      case \"optionDelete\":\n        return {\n          ...state,\n          fieldOptions: state.fieldOptions.filter(\n            (e: any) => action.payload.id !== e.id\n          )\n        };\n      case \"setWithPaylod\":\n        return action.payload.obj;\n\n      default:\n        return state;\n    }\n  }, blankFieldObject);\n\n  const fieldMethods = {\n    onNameChange(event: any) {\n      setEditedField({\n        type: \"fieldNameChange\",\n        payload: { value: event.target.value }\n      });\n    },\n    onSelectChange(event: any) {\n      setEditedField({\n        type: \"selectValueChange\",\n        payload: { value: event.target.value }\n      });\n    },\n    handleOptionSpawn(e) {\n      e.preventDefault();\n      setEditedField({\n        type: \"newOptionSpawn\"\n      });\n    },\n    toggleDisplayComponent() {\n      displayComponent ? setDisplayComponent(false) : setDisplayComponent(true);\n      setEditedField({ type: \"clear\" });\n    },\n    onOptionDelete(event: any) {\n      setEditedField({\n        type: \"optionDelete\",\n        payload: { id: event.currentTarget.id }\n      });\n    },\n    onOptionChange(id, event) {\n      setEditedField({\n        type: \"optionValueChange\",\n        payload: { value: event.target.value, id }\n      });\n    },\n    setupEditedField(obj: any) {\n      setEditedField({\n        type: \"setWithPaylod\",\n        payload: { obj }\n      });\n      !displayComponent ? setDisplayComponent(true) : null;\n    },\n    saveEditedField(e) {\n      e.preventDefault();\n\n      const fieldIsUpdated = async () => {\n        const { fieldName, fieldType, fieldOptions, _id } = editedField;\n        const res = await axios({\n          method: \"PUT\",\n          url: `${globalVars.serverURL}/fields/${_id}`,\n          params: { key: user.user.userkey },\n          data: { fieldName, fieldType, fieldOptions },\n          responseType: \"json\"\n        });\n        const data = await res.data;\n        if (data.msg === globalVars.msgSuccess) {\n          reset();\n        }\n      };\n\n      const fieldIsCreated = async () => {\n        const res = await axios({\n          method: \"POST\",\n          params: { key: user.user.userkey },\n          url: `${globalVars.serverURL}/fields/`,\n          data: editedField,\n          responseType: \"json\"\n        });\n        const data = await res.data;\n        if (data.msg === globalVars.msgSuccess) {\n          reset();\n        }\n      };\n      !editedField.id ? fieldIsCreated() : fieldIsUpdated();\n    }\n  };\n\n  const reset = () => {\n    setDisplayComponent(false);\n    console.log(editedField);\n    addField(editedField);\n    setEditedField({ type: \"clear\" });\n  };\n\n  const deleteField = async (id: any) => {\n    const res = await axios({\n      method: \"DELETE\",\n      params: { key: user.user.userkey },\n      url: `${globalVars.serverURL}/fields/${id}`,\n      responseType: \"json\"\n    });\n    const resData = await res.data;\n    resData.msg === globalVars.msgSuccess ? refreshList() : null;\n  };\n\n  return (\n    <Box mt=\"1rem\" mb=\"5rem\">\n      <CustomFieldsList\n        deleteField={deleteField}\n        fields={fields}\n        setupEditedField={fieldMethods.setupEditedField}\n      />\n      <AddOrEditField\n        editedField={editedField}\n        displayComponent={displayComponent}\n        fieldMethods={fieldMethods}\n        handleOption={\n          <SelectFieldOptions\n            options={editedField.fieldOptions}\n            fieldMethods={fieldMethods}\n          />\n        }\n      />\n    </Box>\n  );\n};\n\nexport default CustomClientFields;\n"]},"metadata":{},"sourceType":"module"}