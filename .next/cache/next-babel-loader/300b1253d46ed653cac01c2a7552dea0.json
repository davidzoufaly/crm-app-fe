{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from \"next/router\";\nimport { useEffect, useState, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport Header from \"../../components/Header\";\nimport SingleClientData from \"../../components/singleClient/SingleClientData\";\nimport ButtonsSingle from \"../../components/singleClient/ButtonsSingle\";\nimport LoadingSpinner from \"../../components/LoadingSpinner\";\nimport UserContext from \"../../components/UserContext\";\nimport EmailForm from \"../../components/EmailForm\";\nimport languages from \"../../library/languages\";\nimport globalVars from \"../../library/globalVariables\";\nimport { Typography, Box } from \"@material-ui/core\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nconst useStyles = makeStyles(theme => createStyles({\n  boxWrapper: {\n    width: \"50%\",\n    [theme.breakpoints.down(\"sm\")]: {\n      width: \"100%\"\n    }\n  }\n}));\n\nconst Client = ({\n  clientData,\n  fieldsData\n}) => {\n  const classes = useStyles({});\n  const {\n    0: client,\n    1: setClient\n  } = useState(clientData);\n  const {\n    0: name,\n    1: setName\n  } = useState(`${clientData[\"First name\"]} ${clientData[\"Last name\"]}`);\n  const user = useContext(UserContext);\n  const {\n    0: initialized,\n    1: setInitialized\n  } = useState(false);\n  const {\n    0: isEmailCreated,\n    1: setIsEmailCreated\n  } = useState(false);\n  const router = useRouter();\n  useEffect(() => {\n    document.title = `${name} ${globalVars.titleSubText}`;\n    setInitialized(true);\n  }, [name]);\n  useEffect(() => {\n    user.checkUser();\n  }, []);\n\n  const onSave = async e => {\n    e.preventDefault();\n    setName(`${client[\"First name\"]} ${client[\"Last name\"]}`);\n    saveToDb();\n  };\n\n  const saveToDb = async () => {\n    await axios({\n      method: \"put\",\n      url: `${globalVars.serverURL}/clients/${router.query.key}/${router.query.id}`,\n      data: client,\n      responseType: \"json\"\n    });\n  };\n\n  const onDelete = async e => {\n    e.preventDefault();\n    const res = await axios({\n      method: \"delete\",\n      url: `${globalVars.serverURL}/clients/${router.query.key}/${router.query.id}`,\n      responseType: \"json\"\n    });\n    const data = await res.data;\n    (await data.msg) === \"Success\" ? router.push(`/clients/${router.query.key}`) : alert(languages.en.somethingWentWrong);\n  };\n\n  const onInputChange = e => {\n    setClient(_objectSpread({}, client, {\n      [\"Last modified\"]: moment().format(\"llll\"),\n      [e.target.name]: e.target.type === \"number\" ? _parseInt(e.target.value) : e.target.value\n    }));\n  };\n\n  const toggleIsEmailCreated = () => {\n    setIsEmailCreated(isEmailCreated ? false : true);\n  };\n\n  return !user.user.signedIn && !initialized ? __jsx(LoadingSpinner, null) : __jsx(\"div\", null, __jsx(Header, null), __jsx(Typography, {\n    component: \"h1\",\n    variant: \"h3\",\n    gutterBottom: true\n  }, name), __jsx(Box, {\n    mb: \"1rem\",\n    maxWidth: \"100\",\n    className: classes.boxWrapper\n  }, __jsx(\"form\", null, __jsx(SingleClientData, {\n    fieldsData: fieldsData,\n    client: client,\n    onInputChange: onInputChange\n  }))), __jsx(EmailForm, {\n    to: [client[\"Email\"]],\n    isEmailCreated: isEmailCreated,\n    toggleIsEmailCreated: toggleIsEmailCreated\n  }), __jsx(ButtonsSingle, {\n    onSave: onSave,\n    toggleIsEmailCreated: toggleIsEmailCreated,\n    onDelete: onDelete,\n    isEmailCreated: isEmailCreated\n  }));\n};\n\nClient.getInitialProps = async context => {\n  const resClient = await axios({\n    method: \"GET\",\n    url: `${globalVars.serverURL}/clients/${context.query.key}/${context.query.id}`,\n    responseType: \"json\"\n  });\n  const clientData = await resClient.data;\n  const resFields = await axios({\n    method: \"GET\",\n    url: `${globalVars.serverURL}/fields`,\n    params: {\n      key: context.query.key\n    },\n    responseType: \"json\"\n  });\n  const fieldsData = await resFields.data;\n  return {\n    clientData,\n    fieldsData\n  };\n};\n\nexport default Client;","map":null,"metadata":{},"sourceType":"module"}