{"ast":null,"code":"var _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/clientTable/TableBody.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from \"next/link\";\nimport uniqid from \"uniqid\"; //TODO Filtrují se i polé které neexistujou na straně body\n\nvar TableBody = function TableBody(_ref) {\n  var clients = _ref.clients,\n      reverse = _ref.reverse,\n      sort = _ref.sort,\n      fields = _ref.fields,\n      handleCheckbox = _ref.handleCheckbox;\n\n  if (fields.some(function (e) {\n    return e.fieldName === sort && e.fieldType === \"number\";\n  })) {\n    if (reverse) {\n      clients.sort(function (a, b) {\n        return b[sort] - a[sort];\n      });\n    } else {\n      clients.sort(function (a, b) {\n        return a[sort] - b[sort];\n      });\n    }\n  } else {\n    if (reverse) {\n      clients.sort(function (a, b) {\n        return b[sort] > a[sort] ? -1 : 1;\n      });\n    } else {\n      clients.sort(function (a, b) {\n        return b[sort] < a[sort] ? -1 : 1;\n      });\n    }\n  }\n\n  var fieldNames = [];\n  fields.forEach(function (e) {\n    return fieldNames.push(e.fieldName, e.fieldType);\n  });\n  var tableClients = clients.map(function (e) {\n    var tableItem = function tableItem() {\n      var items = [];\n\n      for (var key in e) {\n        //show only clients data with existing fields\n        e[key] !== e._id && fieldNames.includes(key) ? items.push(__jsx(\"td\", {\n          key: uniqid(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        }, e[key])) : null;\n      }\n\n      return items;\n    };\n\n    return __jsx(\"tr\", {\n      key: e._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, __jsx(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, __jsx(\"input\", {\n      type: \"checkbox\",\n      checked: e.isChecked === undefined ? false : e.isChecked,\n      onChange: function onChange() {\n        return handleCheckbox(e._id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    })), tableItem(), __jsx(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, __jsx(Link, {\n      href: \"/clients/[id]\",\n      as: \"/clients/\".concat(e._id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Go\"))));\n  });\n  return tableClients;\n};\n\nexport default TableBody;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/clientTable/TableBody.tsx"],"names":["Link","uniqid","TableBody","clients","reverse","sort","fields","handleCheckbox","some","e","fieldName","fieldType","a","b","fieldNames","forEach","push","tableClients","map","tableItem","items","key","_id","includes","isChecked","undefined"],"mappings":"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","sourcesContent":["import Link from \"next/link\";\nimport uniqid from \"uniqid\";\n\n//TODO Filtrují se i polé které neexistujou na straně body\n\ninterface IProps {\n  clients: any;\n  reverse: boolean;\n  sort: string;\n  fields: any;\n  handleCheckbox: any;\n}\n\nconst TableBody = ({ clients, reverse, sort, fields, handleCheckbox}: IProps) => {\n    if(fields.some(e => e.fieldName === sort && e.fieldType === \"number\")) {\n      if(reverse) {\n        clients.sort((a: any, b: any) => (b[sort] - a[sort]))\n      } else {\n        clients.sort((a: any, b: any) => (a[sort] - b[sort]));\n      }\n    } else {\n      if(reverse) {\n        clients.sort((a: any, b: any) => (b[sort] > a[sort] ? -1 : 1))\n      } else {\n        clients.sort((a: any, b: any) => (b[sort] < a[sort] ? -1 : 1));\n      }\n  }\n  \n  const fieldNames = [];\n  fields.forEach((e : any) => fieldNames.push(e.fieldName, e.fieldType));\n\n  const tableClients = clients.map((e: any) => {\n    const tableItem = () => {\n      let items = [];\n      for (let key in e) {\n        //show only clients data with existing fields\n        e[key] !== e._id && fieldNames.includes(key) ? items.push(<td key={uniqid()}>{e[key]}</td>) : null;\n      }\n      return items;\n    };\n\n    return (\n      <tr key={e._id}>\n        <td><input type=\"checkbox\" checked={e.isChecked === undefined ? false : e.isChecked} onChange={() => handleCheckbox(e._id)}/></td>\n        {tableItem()}\n        <td>\n          <Link href=\"/clients/[id]\" as={`/clients/${e._id}`}>\n            <a>Go</a>\n          </Link>\n        </td>\n      </tr>\n    );\n  });\n  return tableClients;\n};\n\nexport default TableBody;\n"]},"metadata":{},"sourceType":"module"}