{"ast":null,"code":"var _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/pages/settings.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Header from \"../components/Header\";\nimport { useRouter } from \"next/router\";\nimport { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport UserContext from \"../components/UserContext\";\nimport DefaultFields from \"../components/settings/DefaultFields\";\nimport CustomFields from \"../components/settings/customFields/CustomFields\";\nimport LoadingSpinner from \"../components/LoadingSpinner\";\nimport EmailSettings from \"../components/settings/EmailSettings\";\nimport WebForm from \"../components/settings/webform/WebForm\";\nimport globalVars from \"../library/globalVariables\";\nimport stringMethods from \"../library/stringMethods\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst Settings = ({\n  dataFields,\n  username,\n  pass\n}) => {\n  const router = useRouter();\n  const {\n    0: fields,\n    1: setField\n  } = useState(dataFields);\n  const {\n    0: initialized,\n    1: setInitialized\n  } = useState(false);\n  const user = useContext(UserContext);\n\n  const refreshList = async () => {\n    //get data from DB after change\n    const res = await axios({\n      method: \"get\",\n      url: `${globalVars.serverURL}/fields/`,\n      responseType: \"json\"\n    });\n    const data = await res.data;\n    setField(data);\n  };\n\n  useEffect(() => {\n    //title from url\n    const title = new stringMethods(router.pathname).removeSlash().firstCharUpperCase().addStringToEnd(globalVars.titleSubText).getString();\n    document.title = title; //componendDidMount effect\n\n    setInitialized(true);\n    user.checkUser();\n  }, [router]);\n  const h1 = new stringMethods(router.pathname).removeSlash().firstCharUpperCase().getString();\n  return !user.user.signedIn && !initialized ? __jsx(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }) : __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), __jsx(Typography, {\n    variant: \"h3\",\n    component: \"h1\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, h1), __jsx(DefaultFields, {\n    fields: fields,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), __jsx(CustomFields, {\n    fields: fields,\n    refreshList: refreshList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), __jsx(EmailSettings, {\n    data: (username, pass),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), __jsx(WebForm, {\n    fields: fields,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }));\n};\n\nSettings.getInitialProps = async context => {\n  const resFields = await axios({\n    method: \"GET\",\n    params: {\n      key: context.query.Api_KEY\n    },\n    url: `${globalVars.serverURL}/fields`,\n    responseType: \"json\"\n  });\n  const dataFields = await resFields.data;\n  const resEmailSettings = await axios({\n    method: \"GET\",\n    params: {\n      key: context.query.Api_KEY\n    },\n    url: `${globalVars.serverURL}/emails/email-settings`,\n    responseType: \"json\"\n  });\n  const dataEmailSettings = await resEmailSettings.data;\n  const {\n    username,\n    pass\n  } = await dataEmailSettings;\n  return {\n    dataFields,\n    username,\n    pass\n  };\n};\n\nexport default Settings;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/pages/settings.tsx"],"names":["Header","useRouter","useState","useEffect","useContext","axios","UserContext","DefaultFields","CustomFields","LoadingSpinner","EmailSettings","WebForm","globalVars","stringMethods","Typography","Settings","dataFields","username","pass","router","fields","setField","initialized","setInitialized","user","refreshList","res","method","url","serverURL","responseType","data","title","pathname","removeSlash","firstCharUpperCase","addStringToEnd","titleSubText","getString","document","checkUser","h1","signedIn","getInitialProps","context","resFields","params","key","query","Api_KEY","resEmailSettings","dataEmailSettings"],"mappings":"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","sourcesContent":["import Header from \"../components/Header\";\nimport { useRouter } from \"next/router\";\nimport { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport UserContext from \"../components/UserContext\";\nimport DefaultFields from \"../components/settings/DefaultFields\";\nimport CustomFields from \"../components/settings/customFields/CustomFields\";\nimport LoadingSpinner from \"../components/LoadingSpinner\";\nimport EmailSettings from \"../components/settings/EmailSettings\";\nimport WebForm from \"../components/settings/webform/WebForm\";\nimport globalVars from \"../library/globalVariables\";\nimport stringMethods from \"../library/stringMethods\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst Settings = ({ dataFields, username, pass }: any) => {\n  const router = useRouter();\n  const [fields, setField] = useState(dataFields);\n  const [initialized, setInitialized] = useState(false);\n  const user = useContext(UserContext);\n\n  const refreshList = async () => {\n    //get data from DB after change\n    const res = await axios({\n      method: \"get\",\n      url: `${globalVars.serverURL}/fields/`,\n      responseType: \"json\"\n    });\n    const data = await res.data;\n    setField(data);\n  };\n\n  useEffect(() => {\n    //title from url\n    const title = new stringMethods(router.pathname)\n      .removeSlash()\n      .firstCharUpperCase()\n      .addStringToEnd(globalVars.titleSubText)\n      .getString();\n    document.title = title;\n    //componendDidMount effect\n    setInitialized(true);\n    user.checkUser();\n  }, [router]);\n\n  const h1 = new stringMethods(router.pathname)\n    .removeSlash()\n    .firstCharUpperCase()\n    .getString();\n\n  return !user.user.signedIn && !initialized ? (\n    <LoadingSpinner />\n  ) : (\n    <div>\n      <Header />\n      <Typography variant=\"h3\" component=\"h1\" gutterBottom>\n        {h1}\n      </Typography>\n      <DefaultFields fields={fields} />\n      <CustomFields fields={fields} refreshList={refreshList} />\n      <EmailSettings data={username, pass} />\n      <WebForm fields={fields} />\n    </div>\n  );\n};\n\nSettings.getInitialProps = async (context : any) => {\n  const resFields = await axios({\n    method: \"GET\",\n    params: {key: context.query.Api_KEY},\n    url: `${globalVars.serverURL}/fields`,\n    responseType: \"json\"\n  });\n  const dataFields = await resFields.data;\n\n  const resEmailSettings = await axios({\n    method: \"GET\",\n    params: {key: context.query.Api_KEY},\n    url: `${globalVars.serverURL}/emails/email-settings`,\n    responseType: \"json\"\n  });\n\n  const dataEmailSettings = await resEmailSettings.data;\n  const {username, pass} = await dataEmailSettings;\n\n  return { dataFields, username, pass };\n};\n\nexport default Settings;\n"]},"metadata":{},"sourceType":"module"}