{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/settings/customFields/CustomFields.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useReducer, useEffect } from \"react\";\nimport axios from \"axios\";\nimport uniqid from \"uniqid\";\nimport AddOrEditField from \"./AddOrEditField\";\nimport CustomFieldsList from \"./CustomFieldsList\";\nimport SelectFieldOptions from \"./SelectFieldOptions\";\nimport languages from \"../../../library/languages\";\nimport globalVars from \"../../../library/globalVariables\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst CustomClientFields = ({\n  fields,\n  refreshList\n}) => {\n  const blankFieldObject = {\n    fieldName: \"\",\n    fieldType: \"text\",\n    fieldOptions: [],\n    fieldFormVisible: null\n  };\n  useEffect(() => {// console.log(fields);\n  });\n  const {\n    0: displayComponent,\n    1: setDisplayComponent\n  } = useState(false);\n  const {\n    0: editedField,\n    1: setEditedField\n  } = useReducer((state, action) => {\n    switch (action.type) {\n      case \"fieldNameChange\":\n        return _objectSpread({}, state, {\n          fieldName: action.payload.value\n        });\n\n      case \"selectValueChange\":\n        return _objectSpread({}, state, {\n          fieldType: action.payload.options[action.payload.options.selectedIndex].value\n        });\n\n      case \"newOptionSpawn\":\n        return _objectSpread({}, state, {\n          fieldOptions: [...state.fieldOptions, {\n            id: uniqid(),\n            value: \"\"\n          }]\n        });\n\n      case \"clear\":\n        return blankFieldObject;\n\n      case \"optionValueChange\":\n        return _objectSpread({}, state, {\n          fieldOptions: state.fieldOptions.map(el => el.id === action.payload.id ? _objectSpread({}, el, {\n            value: action.payload.value\n          }) : el)\n        });\n\n      case \"optionDelete\":\n        return _objectSpread({}, state, {\n          fieldOptions: state.fieldOptions.filter(e => action.payload.id !== e.id)\n        });\n\n      case \"setWithPaylod\":\n        return action.payload.obj;\n\n      default:\n        return state;\n    }\n  }, blankFieldObject);\n  const fieldMethods = {\n    onNameChange(event) {\n      setEditedField({\n        type: \"fieldNameChange\",\n        payload: {\n          value: event.target.value\n        }\n      });\n    },\n\n    onSelectChange(event) {\n      setEditedField({\n        type: \"selectValueChange\",\n        payload: {\n          options: event.target.options\n        }\n      });\n    },\n\n    handleOptionSpawn(e) {\n      e.preventDefault();\n      setEditedField({\n        type: \"newOptionSpawn\"\n      });\n    },\n\n    toggleDisplayComponent() {\n      displayComponent ? setDisplayComponent(false) : setDisplayComponent(true);\n      setEditedField({\n        type: \"clear\"\n      });\n    },\n\n    onOptionDelete(event) {\n      setEditedField({\n        type: \"optionDelete\",\n        payload: {\n          id: event.target.id\n        }\n      });\n    },\n\n    onOptionChange(id, event) {\n      setEditedField({\n        type: \"optionValueChange\",\n        payload: {\n          value: event.target.value,\n          id\n        }\n      });\n    },\n\n    setupEditedField(obj) {\n      setEditedField({\n        type: \"setWithPaylod\",\n        payload: {\n          obj\n        }\n      });\n      !displayComponent ? setDisplayComponent(true) : null;\n    },\n\n    saveEditedField(e) {\n      e.preventDefault();\n\n      const fieldIsUpdated = async () => {\n        const {\n          fieldName,\n          fieldType,\n          fieldOptions,\n          id\n        } = editedField;\n        const res = await axios({\n          method: \"PUT\",\n          url: `${globalVars.serverURL}/fields/${id}`,\n          data: {\n            fieldName,\n            fieldType,\n            fieldOptions\n          },\n          responseType: \"json\"\n        });\n        const data = await res.data;\n\n        if (data.msg === globalVars.msgSuccess) {\n          reset();\n        }\n      };\n\n      const fieldIsCreated = async () => {\n        const res = await axios({\n          method: \"POST\",\n          url: `${globalVars.serverURL}/fields/`,\n          data: editedField,\n          responseType: \"json\"\n        });\n        const data = await res.data;\n\n        if (data.msg === globalVars.msgSuccess) {\n          reset();\n        }\n      };\n\n      !editedField.id ? fieldIsCreated() : fieldIsUpdated();\n    }\n\n  };\n\n  const reset = () => {\n    setDisplayComponent(false);\n    setEditedField({\n      type: \"clear\"\n    });\n    refreshList();\n  };\n\n  const deleteField = async id => {\n    const res = await axios({\n      method: \"DELETE\",\n      url: `${globalVars.serverURL}/fields/${id}`,\n      responseType: \"json\"\n    });\n    const resData = await res.data;\n    resData.msg === globalVars.msgSuccess ? refreshList() : null;\n  };\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"h4\",\n    component: \"h2\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, languages.en.customClientFields), __jsx(CustomFieldsList, {\n    deleteField: deleteField,\n    fields: fields,\n    setupEditedField: fieldMethods.setupEditedField,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }), __jsx(AddOrEditField, {\n    editedField: editedField,\n    displayComponent: displayComponent,\n    fieldMethods: fieldMethods,\n    handleOption: __jsx(SelectFieldOptions, {\n      options: editedField.fieldOptions,\n      fieldMethods: fieldMethods,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }));\n};\n\nexport default CustomClientFields;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/settings/customFields/CustomFields.tsx"],"names":["useState","useReducer","useEffect","axios","uniqid","AddOrEditField","CustomFieldsList","SelectFieldOptions","languages","globalVars","Typography","CustomClientFields","fields","refreshList","blankFieldObject","fieldName","fieldType","fieldOptions","fieldFormVisible","displayComponent","setDisplayComponent","editedField","setEditedField","state","action","type","payload","value","options","selectedIndex","id","map","el","filter","e","obj","fieldMethods","onNameChange","event","target","onSelectChange","handleOptionSpawn","preventDefault","toggleDisplayComponent","onOptionDelete","onOptionChange","setupEditedField","saveEditedField","fieldIsUpdated","res","method","url","serverURL","data","responseType","msg","msgSuccess","reset","fieldIsCreated","deleteField","resData","en","customClientFields"],"mappings":"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","sourcesContent":["import { useState, useReducer, useEffect } from \"react\";\nimport axios from \"axios\";\nimport uniqid from \"uniqid\";\nimport AddOrEditField from \"./AddOrEditField\";\nimport CustomFieldsList from \"./CustomFieldsList\";\nimport SelectFieldOptions from \"./SelectFieldOptions\";\nimport languages from \"../../../library/languages\";\nimport globalVars from \"../../../library/globalVariables\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst CustomClientFields = ({ fields, refreshList }: any) => {\n  const blankFieldObject = {\n    fieldName: \"\",\n    fieldType: \"text\",\n    fieldOptions: [],\n    fieldFormVisible: null\n  };\n\n  useEffect(() => {\n    // console.log(fields);\n  });\n\n  const [displayComponent, setDisplayComponent] = useState(false);\n\n  const [editedField, setEditedField] = useReducer((state, action) => {\n    switch (action.type) {\n      case \"fieldNameChange\":\n        return {\n          ...state,\n          fieldName: action.payload.value\n        };\n      case \"selectValueChange\":\n        return {\n          ...state,\n          fieldType:\n            action.payload.options[action.payload.options.selectedIndex].value\n        };\n      case \"newOptionSpawn\":\n        return {\n          ...state,\n          fieldOptions: [...state.fieldOptions, { id: uniqid(), value: \"\"}]\n        };\n      case \"clear\":\n        return blankFieldObject;\n      case \"optionValueChange\":\n        return {\n          ...state,\n          fieldOptions: state.fieldOptions.map((el: any) =>\n            el.id === action.payload.id\n              ? {...el, value: action.payload.value}\n              : el\n          )\n        };\n      case \"optionDelete\":\n        return {\n          ...state,\n          fieldOptions: state.fieldOptions.filter(\n            (e: any) => action.payload.id !== e.id\n          )\n        };\n      case \"setWithPaylod\":\n        return action.payload.obj;\n\n      default:\n        return state;\n    }\n  }, blankFieldObject);\n\n  const fieldMethods = {\n    onNameChange(event: any) {\n      setEditedField({\n        type: \"fieldNameChange\",\n        payload: { value: event.target.value }\n      });\n    },\n    onSelectChange(event: any) {\n      setEditedField({\n        type: \"selectValueChange\",\n        payload: { options: event.target.options }\n      });\n    },\n    handleOptionSpawn(e) {\n      e.preventDefault()\n      setEditedField({\n        type: \"newOptionSpawn\"\n      });\n    },\n    toggleDisplayComponent() {\n      displayComponent ? setDisplayComponent(false) : setDisplayComponent(true);\n      setEditedField({ type: \"clear\" });\n    },\n    onOptionDelete(event: any) {\n      setEditedField({\n        type: \"optionDelete\",\n        payload: { id: event.target.id }\n      });\n    },\n    onOptionChange(id, event) {\n      setEditedField({\n        type: \"optionValueChange\",\n        payload: { value : event.target.value, id }\n      });\n    },\n    setupEditedField(obj: any) {\n      setEditedField({\n        type: \"setWithPaylod\",\n        payload: { obj }\n      });\n      !displayComponent ? setDisplayComponent(true) : null;\n    },\n    saveEditedField(e) {\n      e.preventDefault();\n\n      const fieldIsUpdated = async () => {\n        const { fieldName, fieldType, fieldOptions, id } = editedField;\n        const res = await axios({\n          method: \"PUT\",\n          url: `${globalVars.serverURL}/fields/${id}`,\n          data: { fieldName, fieldType, fieldOptions },\n          responseType: \"json\"\n        });\n        const data = await res.data;\n        if (data.msg === globalVars.msgSuccess) {\n          reset();\n        }\n      };\n\n      const fieldIsCreated = async () => {\n        const res = await axios({\n          method: \"POST\",\n          url: `${globalVars.serverURL}/fields/`,\n          data: editedField,\n          responseType: \"json\"\n        });\n        const data = await res.data;\n        if (data.msg === globalVars.msgSuccess) {\n          reset();\n        }\n      };\n      !editedField.id ? fieldIsCreated() : fieldIsUpdated();\n    }\n  };\n\n  const reset = () => {\n    setDisplayComponent(false);\n    setEditedField({ type: \"clear\" });\n    refreshList();\n  };\n\n  const deleteField = async (id: any) => {\n    const res = await axios({\n      method: \"DELETE\",\n      url: `${globalVars.serverURL}/fields/${id}`,\n      responseType: \"json\"\n    });\n    const resData = await res.data;\n    resData.msg === globalVars.msgSuccess ? refreshList() : null;\n  };\n\n\n  return (\n    <div>\n      <Typography variant=\"h4\" component=\"h2\" gutterBottom>\n        {languages.en.customClientFields}\n      </Typography>\n      <CustomFieldsList\n        deleteField={deleteField}\n        fields={fields}\n        setupEditedField={fieldMethods.setupEditedField}\n      />\n      <AddOrEditField\n        editedField={editedField}\n        displayComponent={displayComponent}\n        fieldMethods={fieldMethods}\n        handleOption={\n          <SelectFieldOptions\n            options={editedField.fieldOptions}\n            fieldMethods={fieldMethods}\n          />\n        }\n      />\n    </div>\n  );\n};\n\nexport default CustomClientFields;\n"]},"metadata":{},"sourceType":"module"}