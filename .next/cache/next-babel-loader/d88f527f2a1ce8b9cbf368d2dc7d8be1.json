{"ast":null,"code":"var _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/CustomClientFields.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport stringMethods from \"../library/stringMethods\";\n\nvar CustomClientFields = function CustomClientFields(_ref) {\n  var fields = _ref.fields;\n  var customFields = fields.filter(function (_ref2) {\n    var fieldPermanent = _ref2.fieldPermanent;\n    return !fieldPermanent;\n  }).map(function (_ref3) {\n    var fieldName = _ref3.fieldName,\n        _id = _ref3._id,\n        fieldType = _ref3.fieldType,\n        fieldOptions = _ref3.fieldOptions;\n    var customFieldNameFormated = new stringMethods(fieldName).camelStringToText().firstCharUpperCase().getString();\n    var customFieldTypeFormated = new stringMethods(fieldType).camelStringToText().getString(); //   const fce = if (fieldType === \"select\") {\n    //           fieldOptions.forEach((e: string) => {\n    //         //   const customFieldOptionFormated = new stringMethods(e)\n    //         //     .firstCharUpperCase()\n    //         //     .getString();\n    //           return <li>{e}</li>;\n    //         });\n    //     }\n    //   }  \n\n    return __jsx(\"div\", {\n      key: _id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, customFieldNameFormated), __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, \"(\", customFieldTypeFormated, \")\"), __jsx(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, fieldType === \"select\" ? fieldOptions.map(function (e) {\n      return __jsx(\"li\", {\n        key: e,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, e);\n    }) : null));\n  });\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Custom Client Fields\"), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, customFields));\n};\n\nexport default CustomClientFields;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/CustomClientFields.tsx"],"names":["stringMethods","CustomClientFields","fields","customFields","filter","fieldPermanent","map","fieldName","_id","fieldType","fieldOptions","customFieldNameFormated","camelStringToText","firstCharUpperCase","getString","customFieldTypeFormated","e"],"mappings":";;;AAAA,OAAOA,aAAP,MAA0B,0BAA1B;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,OAAqB;AAAA,MAAlBC,MAAkB,QAAlBA,MAAkB;AAC9C,MAAMC,YAAY,GAAGD,MAAM,CACxBE,MADkB,CACX;AAAA,QAAGC,cAAH,SAAGA,cAAH;AAAA,WAA6B,CAACA,cAA9B;AAAA,GADW,EAElBC,GAFkB,CAEd,iBAAsD;AAAA,QAAnDC,SAAmD,SAAnDA,SAAmD;AAAA,QAAxCC,GAAwC,SAAxCA,GAAwC;AAAA,QAAnCC,SAAmC,SAAnCA,SAAmC;AAAA,QAAxBC,YAAwB,SAAxBA,YAAwB;AACzD,QAAMC,uBAAuB,GAAG,IAAIX,aAAJ,CAAkBO,SAAlB,EAC7BK,iBAD6B,GAE7BC,kBAF6B,GAG7BC,SAH6B,EAAhC;AAKA,QAAMC,uBAAuB,GAAG,IAAIf,aAAJ,CAAkBS,SAAlB,EAC7BG,iBAD6B,GAE7BE,SAF6B,EAAhC,CANyD,CAU3D;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEE,WACE;AAAK,MAAA,GAAG,EAAEN,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIG,uBAAJ,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAKI,uBAAL,MAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKN,SAAS,KAAK,QAAd,GAAyBC,YAAY,CAACJ,GAAb,CAAiB,UAACU,CAAD;AAAA,aAAc;AAAI,QAAA,GAAG,EAAEA,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAaA,CAAb,CAAd;AAAA,KAAjB,CAAzB,GAAgF,IAArF,CAHF,CADF;AAOD,GA9BkB,CAArB;AAgCA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMb,YAAN,CAFF,CADF;AAMD,CAvCD;;AAyCA,eAAeF,kBAAf","sourcesContent":["import stringMethods from \"../library/stringMethods\";\n\nconst CustomClientFields = ({ fields }: any) => {\n  const customFields = fields\n    .filter(({ fieldPermanent }: any) => !fieldPermanent)\n    .map(({ fieldName, _id, fieldType, fieldOptions }: any) => {\n      const customFieldNameFormated = new stringMethods(fieldName)\n        .camelStringToText()\n        .firstCharUpperCase()\n        .getString();\n\n      const customFieldTypeFormated = new stringMethods(fieldType)\n        .camelStringToText()\n        .getString();\n\n    //   const fce = if (fieldType === \"select\") {\n    //           fieldOptions.forEach((e: string) => {\n    //         //   const customFieldOptionFormated = new stringMethods(e)\n    //         //     .firstCharUpperCase()\n    //         //     .getString();\n    \n    //           return <li>{e}</li>;\n    //         });\n    //     }\n    //   }  \n        \n      return (\n        <div key={_id}>\n          <p>{customFieldNameFormated}</p>\n          <p>({customFieldTypeFormated})</p>\n          <ul>{fieldType === \"select\" ? fieldOptions.map((e : any ) => <li key={e}>{e}</li>) : null}</ul>\n        </div>\n      );\n    });\n\n  return (\n    <div>\n      <h2>Custom Client Fields</h2>\n      <div>{customFields}</div>\n    </div>\n  );\n};\n\nexport default CustomClientFields;\n"]},"metadata":{},"sourceType":"module"}