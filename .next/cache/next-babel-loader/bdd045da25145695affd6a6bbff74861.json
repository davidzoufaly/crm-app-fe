{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/clients/CreateClient.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useReducer, useEffect, useState, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport generateUniqueId from \"generate-unique-id\";\nimport UserContext from \"../UserContext\";\nimport ClientForm from \"./ClientForm\";\nimport globalVars from \"../../library/globalVariables\";\nimport languages from \"../../library/languages\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nconst useStyles = makeStyles(theme => createStyles({\n  formWrapper: {\n    marginTop: theme.spacing(3),\n    borderRadius: theme.spacing(1),\n    padding: theme.spacing(3),\n    backgroundColor: theme.palette.grey[\"200\"],\n    boxShadow: theme.shadows[\"1\"],\n    width: \"50%\",\n    [theme.breakpoints.down(\"sm\")]: {\n      width: \"100%\"\n    }\n  },\n  textField: {\n    marginTop: theme.spacing(2)\n  }\n}));\n\nconst CreateClient = ({\n  fields,\n  isClientAdded,\n  toggleIsClientAdded,\n  addNewClientToState\n}) => {\n  const classes = useStyles({});\n  const initialNewClientState = fields.map(e => e.fieldName).reduce((o, key) => _Object$assign(o, {\n    [key]: \"\"\n  }), {});\n  const user = useContext(UserContext);\n  const {\n    0: submitting,\n    1: setSubmitting\n  } = useState(false);\n  const {\n    0: newClient,\n    1: setNewClient\n  } = useReducer((state, action) => {\n    switch (action.type) {\n      case \"onTextChange\":\n        return _objectSpread({}, state, {\n          [action.payload.fieldName]: action.payload.fieldType === globalVars.fieldTypes.number ? _parseInt(action.payload.value) : action.payload.value\n        });\n\n      case \"addId\":\n        return _objectSpread({}, state, {\n          _id: generateUniqueId({\n            length: 24,\n            useNumbers: true,\n            useLetters: false,\n            includeSymbols: [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n          })\n        });\n\n      case \"addDate\":\n        return _objectSpread({}, state, {\n          [\"Date added\"]: moment().format(\"llll\")\n        });\n\n      case \"clear\":\n        return {\n          initialNewClientState\n        };\n\n      default:\n        return state;\n    }\n  }, initialNewClientState);\n\n  const onChange = (fieldType, event) => {\n    console.log(event.target);\n    console.log(newClient);\n    setNewClient({\n      type: \"onTextChange\",\n      payload: {\n        fieldName: event.target.name,\n        value: event.target.value,\n        fieldType: event.target.type\n      }\n    });\n  };\n\n  useEffect(() => {\n    //trigger side effect when submitting state is changed and its is true\n    submitting ? submitNewClient() : null;\n  }, [submitting]);\n\n  const onSubmit = e => {\n    // on Button Click prepare client object to be ready to send\n    e.preventDefault();\n    setNewClient({\n      type: \"addDate\"\n    });\n    setNewClient({\n      type: \"addId\"\n    }); // change submitting state to trigger effect with POST req.\n\n    setSubmitting(true);\n  };\n\n  const submitNewClient = async () => {\n    //post req to DB\n    const clientRes = await axios({\n      method: \"POST\",\n      data: newClient,\n      url: `${globalVars.serverURL}/clients`,\n      params: {\n        key: user.user.userkey\n      },\n      responseType: \"json\"\n    });\n    const clientData = await clientRes.data;\n\n    if (clientData.msg === globalVars.msgSuccess) {\n      // add client data to clients state for table update\n      addNewClientToState(newClient); // reset newClient state\n\n      setNewClient({\n        type: \"clear\"\n      }); // hide form\n\n      toggleIsClientAdded(); //reset submitting\n\n      setSubmitting(false);\n    } else {\n      alert(languages.en.somethingWentWrong);\n    }\n  };\n\n  const onCancel = () => {\n    setNewClient({\n      type: \"clear\"\n    });\n    toggleIsClientAdded();\n  };\n\n  return isClientAdded ? __jsx(Box, {\n    className: classes.formWrapper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"h4\",\n    component: \"h2\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, languages.en.addNewClient), __jsx(\"form\", {\n    onSubmit: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, __jsx(ClientForm, {\n    fields: fields,\n    onChange: onChange,\n    newClient: newClient,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }), __jsx(Box, {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    mt: \"2rem\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    style: {\n      marginRight: \"1rem\"\n    },\n    onClick: onCancel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, languages.en.cancel), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, languages.en.save)))) : null;\n};\n\nexport default CreateClient;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/clients/CreateClient.tsx"],"names":["useReducer","useEffect","useState","useContext","moment","axios","generateUniqueId","UserContext","ClientForm","globalVars","languages","Button","Box","Typography","createStyles","makeStyles","useStyles","theme","formWrapper","marginTop","spacing","borderRadius","padding","backgroundColor","palette","grey","boxShadow","shadows","width","breakpoints","down","textField","CreateClient","fields","isClientAdded","toggleIsClientAdded","addNewClientToState","classes","initialNewClientState","map","e","fieldName","reduce","o","key","user","submitting","setSubmitting","newClient","setNewClient","state","action","type","payload","fieldType","fieldTypes","number","value","_id","length","useNumbers","useLetters","includeSymbols","format","onChange","event","console","log","target","name","submitNewClient","onSubmit","preventDefault","clientRes","method","data","url","serverURL","params","userkey","responseType","clientData","msg","msgSuccess","alert","en","somethingWentWrong","onCancel","addNewClient","marginRight","cancel","save"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,QAAhC,EAA0CC,UAA1C,QAA4D,OAA5D;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,UAAP,MAAuB,+BAAvB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAgD,0BAAhD;AAEA,MAAMC,SAAS,GAAGD,UAAU,CAAEE,KAAD,IAC3BH,YAAY,CAAC;AACXI,EAAAA,WAAW,EAAE;AACXC,IAAAA,SAAS,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADA;AAEXC,IAAAA,YAAY,EAAEJ,KAAK,CAACG,OAAN,CAAc,CAAd,CAFH;AAGXE,IAAAA,OAAO,EAAEL,KAAK,CAACG,OAAN,CAAc,CAAd,CAHE;AAIXG,IAAAA,eAAe,EAAEN,KAAK,CAACO,OAAN,CAAcC,IAAd,CAAmB,KAAnB,CAJN;AAKXC,IAAAA,SAAS,EAAET,KAAK,CAACU,OAAN,CAAc,GAAd,CALA;AAMXC,IAAAA,KAAK,EAAE,KANI;AAOX,KAACX,KAAK,CAACY,WAAN,CAAkBC,IAAlB,CAAuB,IAAvB,CAAD,GAAgC;AAC9BF,MAAAA,KAAK,EAAE;AADuB;AAPrB,GADF;AAYXG,EAAAA,SAAS,EAAE;AACTZ,IAAAA,SAAS,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd;AADF;AAZA,CAAD,CADc,CAA5B;;AAmBA,MAAMY,YAAY,GAAG,CAAC;AACpBC,EAAAA,MADoB;AAEpBC,EAAAA,aAFoB;AAGpBC,EAAAA,mBAHoB;AAIpBC,EAAAA;AAJoB,CAAD,KAKV;AACT,QAAMC,OAAO,GAAGrB,SAAS,CAAC,EAAD,CAAzB;AACA,QAAMsB,qBAAqB,GAAGL,MAAM,CACjCM,GAD2B,CACtBC,CAAD,IAAYA,CAAC,CAACC,SADS,EAE3BC,MAF2B,CAEpB,CAACC,CAAD,EAAIC,GAAJ,KAAY,eAAcD,CAAd,EAAiB;AAAE,KAACC,GAAD,GAAO;AAAT,GAAjB,CAFQ,EAEyB,EAFzB,CAA9B;AAIA,QAAMC,IAAI,GAAG1C,UAAU,CAACI,WAAD,CAAvB;AACA,QAAM;AAAA,OAACuC,UAAD;AAAA,OAAaC;AAAb,MAA8B7C,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAAA,OAAC8C,SAAD;AAAA,OAAYC;AAAZ,MAA4BjD,UAAU,CAAC,CAACkD,KAAD,EAAQC,MAAR,KAAmB;AAC9D,YAAQA,MAAM,CAACC,IAAf;AACE,WAAK,cAAL;AACE,iCACKF,KADL;AAEE,WAACC,MAAM,CAACE,OAAP,CAAeZ,SAAhB,GACEU,MAAM,CAACE,OAAP,CAAeC,SAAf,KAA6B7C,UAAU,CAAC8C,UAAX,CAAsBC,MAAnD,GACI,UAASL,MAAM,CAACE,OAAP,CAAeI,KAAxB,CADJ,GAEIN,MAAM,CAACE,OAAP,CAAeI;AALvB;;AAOF,WAAK,OAAL;AACE,iCACKP,KADL;AAEEQ,UAAAA,GAAG,EAAEpD,gBAAgB,CAAC;AACpBqD,YAAAA,MAAM,EAAE,EADY;AAEpBC,YAAAA,UAAU,EAAE,IAFQ;AAGpBC,YAAAA,UAAU,EAAE,KAHQ;AAIpBC,YAAAA,cAAc,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B;AAJI,WAAD;AAFvB;;AASF,WAAK,SAAL;AACE,iCACKZ,KADL;AAEE,WAAC,YAAD,GAAgB9C,MAAM,GAAG2D,MAAT,CAAgB,MAAhB;AAFlB;;AAIF,WAAK,OAAL;AACE,eAAO;AACLzB,UAAAA;AADK,SAAP;;AAIF;AACE,eAAOY,KAAP;AA9BJ;AAgCD,GAjC2C,EAiCzCZ,qBAjCyC,CAA5C;;AAmCA,QAAM0B,QAAQ,GAAG,CAACV,SAAD,EAAYW,KAAZ,KAAsB;AACrCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,MAAlB;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYnB,SAAZ;AACAC,IAAAA,YAAY,CAAC;AACXG,MAAAA,IAAI,EAAE,cADK;AAEXC,MAAAA,OAAO,EAAE;AACPZ,QAAAA,SAAS,EAAEwB,KAAK,CAACG,MAAN,CAAaC,IADjB;AAEPZ,QAAAA,KAAK,EAAEQ,KAAK,CAACG,MAAN,CAAaX,KAFb;AAGPH,QAAAA,SAAS,EAAEW,KAAK,CAACG,MAAN,CAAahB;AAHjB;AAFE,KAAD,CAAZ;AAQD,GAXD;;AAaAnD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA6C,IAAAA,UAAU,GAAGwB,eAAe,EAAlB,GAAuB,IAAjC;AACD,GAHQ,EAGN,CAACxB,UAAD,CAHM,CAAT;;AAKA,QAAMyB,QAAQ,GAAG/B,CAAC,IAAI;AACpB;AACAA,IAAAA,CAAC,CAACgC,cAAF;AACAvB,IAAAA,YAAY,CAAC;AAAEG,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAZ;AACAH,IAAAA,YAAY,CAAC;AAAEG,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAZ,CAJoB,CAKpB;;AACAL,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD,GAPD;;AASA,QAAMuB,eAAe,GAAG,YAAY;AAClC;AACA,UAAMG,SAAS,GAAG,MAAMpE,KAAK,CAAC;AAC5BqE,MAAAA,MAAM,EAAE,MADoB;AAE5BC,MAAAA,IAAI,EAAE3B,SAFsB;AAG5B4B,MAAAA,GAAG,EAAG,GAAEnE,UAAU,CAACoE,SAAU,UAHD;AAI5BC,MAAAA,MAAM,EAAE;AAAElC,QAAAA,GAAG,EAAEC,IAAI,CAACA,IAAL,CAAUkC;AAAjB,OAJoB;AAK5BC,MAAAA,YAAY,EAAE;AALc,KAAD,CAA7B;AAOA,UAAMC,UAAU,GAAG,MAAMR,SAAS,CAACE,IAAnC;;AACA,QAAIM,UAAU,CAACC,GAAX,KAAmBzE,UAAU,CAAC0E,UAAlC,EAA8C;AAC5C;AACA/C,MAAAA,mBAAmB,CAACY,SAAD,CAAnB,CAF4C,CAG5C;;AACAC,MAAAA,YAAY,CAAC;AACXG,QAAAA,IAAI,EAAE;AADK,OAAD,CAAZ,CAJ4C,CAO5C;;AACAjB,MAAAA,mBAAmB,GARyB,CAS5C;;AACAY,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD,KAXD,MAWO;AACLqC,MAAAA,KAAK,CAAC1E,SAAS,CAAC2E,EAAV,CAAaC,kBAAd,CAAL;AACD;AACF,GAxBD;;AA0BA,QAAMC,QAAQ,GAAG,MAAM;AACrBtC,IAAAA,YAAY,CAAC;AACXG,MAAAA,IAAI,EAAE;AADK,KAAD,CAAZ;AAGAjB,IAAAA,mBAAmB;AACpB,GALD;;AAOA,SAAOD,aAAa,GAClB,MAAC,GAAD;AAAK,IAAA,SAAS,EAAEG,OAAO,CAACnB,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAyB,IAAA,SAAS,EAAC,IAAnC;AAAwC,IAAA,YAAY,MAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,SAAS,CAAC2E,EAAV,CAAaG,YADhB,CADF,EAIE;AAAM,IAAA,QAAQ,EAAEjB,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,IAAA,MAAM,EAAEtC,MAApB;AAA4B,IAAA,QAAQ,EAAE+B,QAAtC;AAAgD,IAAA,SAAS,EAAEhB,SAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,GAAD;AAAK,IAAA,OAAO,EAAC,MAAb;AAAoB,IAAA,cAAc,EAAC,UAAnC;AAA8C,IAAA,EAAE,EAAC,MAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,OAAO,EAAC,WADV;AAEE,IAAA,KAAK,EAAC,WAFR;AAGE,IAAA,KAAK,EAAE;AAAEyC,MAAAA,WAAW,EAAE;AAAf,KAHT;AAIE,IAAA,OAAO,EAAEF,QAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMG7E,SAAS,CAAC2E,EAAV,CAAaK,MANhB,CADF,EASE,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,WAAhB;AAA4B,IAAA,KAAK,EAAC,SAAlC;AAA4C,IAAA,IAAI,EAAC,QAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGhF,SAAS,CAAC2E,EAAV,CAAaM,IADhB,CATF,CAFF,CAJF,CADkB,GAsBhB,IAtBJ;AAuBD,CAnID;;AAqIA,eAAe3D,YAAf","sourcesContent":["import { useReducer, useEffect, useState, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport generateUniqueId from \"generate-unique-id\";\nimport UserContext from \"../UserContext\";\nimport ClientForm from \"./ClientForm\";\nimport globalVars from \"../../library/globalVariables\";\nimport languages from \"../../library/languages\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    formWrapper: {\n      marginTop: theme.spacing(3),\n      borderRadius: theme.spacing(1),\n      padding: theme.spacing(3),\n      backgroundColor: theme.palette.grey[\"200\"],\n      boxShadow: theme.shadows[\"1\"],\n      width: \"50%\",\n      [theme.breakpoints.down(\"sm\")]: {\n        width: \"100%\"\n      }\n    },\n    textField: {\n      marginTop: theme.spacing(2)\n    }\n  })\n);\n\nconst CreateClient = ({\n  fields,\n  isClientAdded,\n  toggleIsClientAdded,\n  addNewClientToState\n}: any) => {\n  const classes = useStyles({});\n  const initialNewClientState = fields\n    .map((e: any) => e.fieldName)\n    .reduce((o, key) => Object.assign(o, { [key]: \"\" }), {});\n\n  const user = useContext(UserContext);\n  const [submitting, setSubmitting] = useState(false);\n  const [newClient, setNewClient] = useReducer((state, action) => {\n    switch (action.type) {\n      case \"onTextChange\":\n        return {\n          ...state,\n          [action.payload.fieldName as string]:\n            action.payload.fieldType === globalVars.fieldTypes.number\n              ? parseInt(action.payload.value)\n              : action.payload.value\n        };\n      case \"addId\":\n        return {\n          ...state,\n          _id: generateUniqueId({\n            length: 24,\n            useNumbers: true,\n            useLetters: false,\n            includeSymbols: [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n          })\n        };\n      case \"addDate\":\n        return {\n          ...state,\n          [\"Date added\"]: moment().format(\"llll\")\n        };\n      case \"clear\":\n        return {\n          initialNewClientState\n        };\n\n      default:\n        return state;\n    }\n  }, initialNewClientState);\n\n  const onChange = (fieldType, event) => {\n    console.log(event.target);\n    console.log(newClient);\n    setNewClient({\n      type: \"onTextChange\",\n      payload: {\n        fieldName: event.target.name,\n        value: event.target.value,\n        fieldType: event.target.type\n      }\n    });\n  };\n\n  useEffect(() => {\n    //trigger side effect when submitting state is changed and its is true\n    submitting ? submitNewClient() : null;\n  }, [submitting]);\n\n  const onSubmit = e => {\n    // on Button Click prepare client object to be ready to send\n    e.preventDefault();\n    setNewClient({ type: \"addDate\" });\n    setNewClient({ type: \"addId\" });\n    // change submitting state to trigger effect with POST req.\n    setSubmitting(true);\n  };\n\n  const submitNewClient = async () => {\n    //post req to DB\n    const clientRes = await axios({\n      method: \"POST\",\n      data: newClient,\n      url: `${globalVars.serverURL}/clients`,\n      params: { key: user.user.userkey },\n      responseType: \"json\"\n    });\n    const clientData = await clientRes.data;\n    if (clientData.msg === globalVars.msgSuccess) {\n      // add client data to clients state for table update\n      addNewClientToState(newClient);\n      // reset newClient state\n      setNewClient({\n        type: \"clear\"\n      });\n      // hide form\n      toggleIsClientAdded();\n      //reset submitting\n      setSubmitting(false);\n    } else {\n      alert(languages.en.somethingWentWrong);\n    }\n  };\n\n  const onCancel = () => {\n    setNewClient({\n      type: \"clear\"\n    });\n    toggleIsClientAdded();\n  };\n\n  return isClientAdded ? (\n    <Box className={classes.formWrapper}>\n      <Typography variant=\"h4\" component=\"h2\" gutterBottom>\n        {languages.en.addNewClient}\n      </Typography>\n      <form onSubmit={onSubmit}>\n        <ClientForm fields={fields} onChange={onChange} newClient={newClient} />\n        <Box display=\"flex\" justifyContent=\"flex-end\" mt=\"2rem\">\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            style={{ marginRight: \"1rem\" }}\n            onClick={onCancel}\n          >\n            {languages.en.cancel}\n          </Button>\n          <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n            {languages.en.save}\n          </Button>\n        </Box>\n      </form>\n    </Box>\n  ) : null;\n};\n\nexport default CreateClient;\n"]},"metadata":{},"sourceType":"module"}