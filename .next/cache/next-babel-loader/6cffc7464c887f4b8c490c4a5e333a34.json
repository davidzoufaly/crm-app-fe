{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useReducer, useContext } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport Header from \"../../components/Header\";\nimport TableBody from \"../../components/clients/TableBody\";\nimport UserContext from \"../../components/UserContext\";\nimport stringMethods from \"../../library/stringMethods\";\nimport globalVars from \"../../library/globalVariables\";\nimport TableHead from \"../../components/clients/TableHead\";\nimport CreateClient from \"../../components/clients/CreateClient\";\nimport EmailForm from \"../../components/EmailForm\";\nimport Buttons from \"../../components/clients/Buttons\";\nimport LoadingSpinner from \"../../components/LoadingSpinner\";\nimport { Table, Typography } from '@material-ui/core';\nimport TableBodyMui from \"@material-ui/core/TableBody\";\nimport languages from \"../../library/languages\";\n\nconst Clients = ({\n  fieldData,\n  clientData\n}) => {\n  const router = useRouter();\n  const user = useContext(UserContext);\n  const {\n    0: clients,\n    1: setClients\n  } = useReducer((state, action) => {\n    switch (action.type) {\n      case \"handleCheckedClients\":\n        return state.map(client => client._id === action.payload.id ? client.isChecked === false || client.isChecked === undefined ? _objectSpread({}, client, {\n          isChecked: true\n        }) : _objectSpread({}, client, {\n          isChecked: false\n        }) : client);\n\n      case \"addClient\":\n        return [...state, action.payload.newClient];\n\n      case \"deleteCheckedClients\":\n        return state.filter(client => !client.isChecked);\n\n      case \"unCheckAll\":\n        return state.map(client => client = _objectSpread({}, client, {\n          isChecked: false\n        }));\n\n      default:\n        return state;\n    }\n  }, clientData);\n  const {\n    0: sort,\n    1: setSort\n  } = useState({\n    sortBy: \"First name\",\n    reverse: true\n  });\n  const {\n    0: initialized,\n    1: setInitialized\n  } = useState(false);\n  const {\n    0: isClientAdded,\n    1: setIsClientAdded\n  } = useState(false);\n  const {\n    0: isEmailCreated,\n    1: setIsEmailCreated\n  } = useState(false);\n  useEffect(() => {\n    // set page title\n    const title = new stringMethods(router.pathname).removeSlash().removeSlashAndTextAfter().firstCharUpperCase().addStringToEnd(globalVars.titleSubText).getString();\n    document.title = title;\n    setInitialized(true);\n    user.checkUser();\n  }, [router]);\n  useEffect(() => {\n    // reset email state, when user uncheck all recievers / clients\n    filterCheckedClients().length === 0 && isEmailCreated ? setIsEmailCreated(!isEmailCreated) : null;\n  }, [clients]); // create H1\n\n  const h1 = new stringMethods(router.pathname).removeSlash().removeSlashAndTextAfter().firstCharUpperCase().getString();\n\n  const sortBy = fieldName => {\n    setSort(_objectSpread({}, sort, {\n      sortBy: fieldName,\n      reverse: fieldName === sort.sortBy // if clicked again on same field ->Â reverse sort based on current reverse state\n      ? !sort.reverse ? true : false // if new field being clicked -> set reverse true to immediately sort column ASC \n      : true\n    }));\n  };\n\n  const handleCheckbox = id => {\n    setClients({\n      type: \"handleCheckedClients\",\n      payload: {\n        id\n      }\n    });\n  };\n\n  const addNewClientToState = newClient => {\n    setClients({\n      type: \"addClient\",\n      payload: {\n        newClient\n      }\n    });\n  };\n\n  const filterCheckedClients = () => clients.filter(client => client.isChecked);\n\n  const unCheckAll = () => {\n    setClients({\n      type: \"unCheckAll\"\n    });\n  };\n\n  const toggleIsEmailCreated = () => {\n    setIsEmailCreated(isEmailCreated ? false : true);\n  };\n\n  const toggleIsClientAdded = () => {\n    isClientAdded ? setIsClientAdded(false) : setIsClientAdded(true);\n  };\n\n  const deleteMultipleClients = async () => {\n    setClients({\n      type: \"deleteCheckedClients\"\n    });\n    await axios({\n      method: \"DELETE\",\n      data: filterCheckedClients().map(e => e._id),\n      url: `${globalVars.serverURL}/clients/`,\n      params: {\n        key: user.user.userkey\n      },\n      responseType: \"json\"\n    });\n  };\n\n  return !user.user.signedIn && !initialized ? __jsx(LoadingSpinner, null) : __jsx(\"div\", null, __jsx(Header, null), __jsx(Typography, {\n    component: \"h1\",\n    variant: \"h3\"\n  }, h1), __jsx(Typography, {\n    variant: \"h5\",\n    gutterBottom: true\n  }, languages.en.saved, \" \", clients.length), __jsx(EmailForm, {\n    to: filterCheckedClients().map(e => e[\"Email\"]),\n    isEmailCreated: isEmailCreated,\n    toggleIsEmailCreated: toggleIsEmailCreated,\n    unCheckAll: unCheckAll\n  }), __jsx(CreateClient, {\n    fields: fieldData,\n    isClientAdded: isClientAdded,\n    toggleIsClientAdded: toggleIsClientAdded,\n    addNewClientToState: addNewClientToState\n  }), __jsx(Buttons, {\n    clientsAreNotChecked: !clients.some(client => client.isChecked),\n    deleteMultipleClients: deleteMultipleClients,\n    toggleIsClientAdded: toggleIsClientAdded,\n    isClientAdded: isClientAdded,\n    toggleIsEmailCreated: toggleIsEmailCreated,\n    isEmailCreated: isEmailCreated\n  }), __jsx(Table, {\n    \"aria-label\": \"clients table\",\n    size: \"small\",\n    style: {\n      backgroundColor: \"white\",\n      border: \"1px solid #e0e0e0\"\n    }\n  }, __jsx(TableHead, {\n    fields: fieldData,\n    sortBy: sortBy,\n    sort: sort\n  }), __jsx(TableBodyMui, null, __jsx(TableBody, {\n    clients: clients,\n    fields: fieldData,\n    sort: sort,\n    handleCheckbox: handleCheckbox\n  }))));\n};\n\nClients.getInitialProps = async context => {\n  //fetch clients\n  const clientRes = await axios({\n    method: \"GET\",\n    url: `${globalVars.serverURL}/clients/`,\n    params: {\n      key: context.query.key\n    },\n    responseType: \"json\"\n  });\n  const clientData = await clientRes.data; //fetch fields\n\n  const fieldRes = await axios({\n    method: \"GET\",\n    url: `${globalVars.serverURL}/fields`,\n    params: {\n      key: context.query.key\n    },\n    responseType: \"json\"\n  });\n  const fieldData = await fieldRes.data; //? fetch clients counter -> unsued takes number from main clients\n  // const resClientCount = await axios(\n  //   `${globalVars.serverURL}/clients/count?key=${context.query.key}`\n  // );\n  // const clientCount = await resClientCount.data\n\n  return {\n    clientData,\n    fieldData\n  };\n};\n\nexport default Clients;","map":null,"metadata":{},"sourceType":"module"}