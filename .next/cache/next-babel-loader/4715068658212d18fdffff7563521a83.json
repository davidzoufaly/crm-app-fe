{"ast":null,"code":"var _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/pages/clients.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport Header from \"../components/Header\";\nimport TableBody from \"../components/clientTable/TableBody\";\nimport stringMethods from \"../library/stringMethods\";\nimport globalVars from \"../library/globalVariables\";\nimport TableHead from \"../components/clientTable/TableHead\";\nimport CreateClient from \"../components/CreateClient\";\nimport Button from \"@material-ui/core/Button\";\n\nconst Clients = ({\n  fieldData,\n  clientData\n}) => {\n  const router = useRouter();\n  const {\n    0: clients,\n    1: setClients\n  } = useState(clientData); //TODO: SPOJIT DO JEDNOHO STATU\n\n  const {\n    0: reverse,\n    1: setReverseOrder\n  } = useState(false);\n  const {\n    0: sort,\n    1: setSortBy\n  } = useState(\"firstName\"); //\n\n  const {\n    0: initialized,\n    1: setInitialized\n  } = useState(false);\n  const {\n    0: isClientAdded,\n    1: setIsClientAdded\n  } = useState(false);\n  useEffect(() => {\n    const title = new stringMethods(router.pathname).removeSlash().firstCharUpperCase().addStringToEnd(globalVars.titleSubText).getString();\n    document.title = title;\n    setInitialized(true);\n  });\n\n  const refreshList = async () => {\n    //get data from DB after change\n    const res = await axios({\n      method: \"get\",\n      url: `${globalVars.serverURL}/clients/`,\n      responseType: \"json\"\n    });\n    const data = await res.data;\n    setClients(data);\n  };\n\n  const sortBy = fieldName => {\n    setSortBy(fieldName);\n    !reverse ? setReverseOrder(true) : setReverseOrder(false);\n  };\n\n  const toggleIsClientAdded = () => {\n    isClientAdded ? setIsClientAdded(false) : setIsClientAdded(true);\n  };\n\n  if (!initialized) {\n    return \"Loading\";\n  }\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, new stringMethods(router.pathname).removeSlash().firstCharUpperCase().getString()), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: () => setIsClientAdded(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Add new client\"), __jsx(CreateClient, {\n    fields: fieldData,\n    isClientAdded: isClientAdded,\n    toggleIsClientAdded: toggleIsClientAdded,\n    refreshList: refreshList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), __jsx(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, __jsx(TableHead, {\n    fields: fieldData,\n    sortBy: sortBy,\n    reverse: reverse,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), __jsx(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, __jsx(TableBody, {\n    clients: clients,\n    fields: fieldData,\n    sort: sort,\n    reverse: reverse,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }))));\n};\n\nClients.getInitialProps = async () => {\n  const clientRes = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/clients`,\n    responseType: \"json\"\n  });\n  const clientData = await clientRes.data;\n  const fieldRes = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/fields`,\n    responseType: \"json\"\n  });\n  const fieldData = await fieldRes.data;\n  return {\n    clientData,\n    fieldData\n  };\n};\n\nexport default Clients;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/pages/clients.tsx"],"names":["useState","useEffect","useRouter","axios","Header","TableBody","stringMethods","globalVars","TableHead","CreateClient","Button","Clients","fieldData","clientData","router","clients","setClients","reverse","setReverseOrder","sort","setSortBy","initialized","setInitialized","isClientAdded","setIsClientAdded","title","pathname","removeSlash","firstCharUpperCase","addStringToEnd","titleSubText","getString","document","refreshList","res","method","url","serverURL","responseType","data","sortBy","fieldName","toggleIsClientAdded","getInitialProps","clientRes","fieldRes"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport Header from \"../components/Header\";\nimport TableBody from \"../components/clientTable/TableBody\";\nimport stringMethods from \"../library/stringMethods\";\nimport globalVars from \"../library/globalVariables\";\nimport TableHead from \"../components/clientTable/TableHead\";\nimport CreateClient from \"../components/CreateClient\";\nimport Button from \"@material-ui/core/Button\";\n\nconst Clients = ({ fieldData, clientData }: any) => {\n  const router = useRouter();\n\n  const [clients, setClients] = useState(clientData);\n  //TODO: SPOJIT DO JEDNOHO STATU\n  const [reverse, setReverseOrder] = useState(false);\n  const [sort, setSortBy] = useState(\"firstName\");\n  //\n  const [initialized, setInitialized] = useState(false);\n  const [isClientAdded, setIsClientAdded] = useState(false);\n\n  useEffect(() => {\n    const title = new stringMethods(router.pathname)\n      .removeSlash()\n      .firstCharUpperCase()\n      .addStringToEnd(globalVars.titleSubText)\n      .getString();\n    document.title = title;\n    setInitialized(true);\n  });\n\n  const refreshList = async () => {\n    //get data from DB after change\n    const res = await axios({\n      method: \"get\",\n      url: `${globalVars.serverURL}/clients/`,\n      responseType: \"json\"\n    });\n    const data = await res.data;\n    setClients(data);\n  }\n\n  const sortBy = (fieldName) => {\n    setSortBy(fieldName);\n    !reverse ? setReverseOrder(true) : setReverseOrder(false);\n  }\n\n  const toggleIsClientAdded = () => {\n    isClientAdded ? setIsClientAdded(false) : setIsClientAdded(true);\n  }\n\n  if (!initialized) {\n    return \"Loading\";\n  }\n  return (\n    <div>\n      <Header />\n      <h1>{new stringMethods(router.pathname)\n        .removeSlash()\n        .firstCharUpperCase()\n        .getString()}</h1>\n      <Button variant=\"contained\" color=\"primary\" onClick={() => setIsClientAdded(true)}>\n      Add new client\n      </Button>\n      <CreateClient fields={fieldData} isClientAdded={isClientAdded} toggleIsClientAdded={toggleIsClientAdded} refreshList={refreshList} />\n      <table>\n          <TableHead fields={fieldData} sortBy={sortBy} reverse={reverse}/>\n          <tbody>\n          <TableBody clients={clients} fields={fieldData} sort={sort} reverse={reverse}/>\n          </tbody>\n      </table>\n\n    </div>\n  );\n};\n\nClients.getInitialProps = async () => {\n  const clientRes = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/clients`,\n    responseType: \"json\"\n  });\n  const clientData = await clientRes.data;\n\n  const fieldRes = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/fields`,\n    responseType: \"json\"\n  })\n  const fieldData = await fieldRes.data\n\n  return {\n    clientData, fieldData\n  };\n};\n\nexport default Clients;\n"]},"metadata":{},"sourceType":"module"}