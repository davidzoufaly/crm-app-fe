{"ast":null,"code":"import _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nvar stringMethods = function stringMethods(text) {\n  var _this = this;\n\n  _classCallCheck(this, stringMethods);\n\n  _defineProperty(this, \"text\", void 0);\n\n  _defineProperty(this, \"helperArray\", void 0);\n\n  _defineProperty(this, \"getIndexUpperCase\", function () {\n    var textInArray = _Array$from(_this.text);\n\n    for (var i = 0; i < textInArray.length; i++) {\n      if (textInArray[i] === textInArray[i].toUpperCase()) {\n        _this.helperArray.push(i);\n      }\n    }\n\n    return _this;\n  });\n\n  _defineProperty(this, \"splitStringByIndex\", function () {\n    var arrayText = [];\n\n    for (var i = 0; i <= _this.helperArray.length; i++) {\n      if (i === 0) {\n        //first iteration\n        arrayText.push(_this.text.substr(0, _this.helperArray[i]));\n      } else if (i > 0 && i < _this.helperArray.length) {\n        //iteration in the middle\n        arrayText.push(_this.text.substr(_this.helperArray[i - 1], _this.helperArray[i] - _this.helperArray[i - 1]));\n      } else if (i === _this.helperArray.length) {\n        //last iteration\n        arrayText.push(_this.text.substr(_this.helperArray[i - 1]));\n      }\n    }\n\n    _this.text = arrayText.join(\" \");\n    return _this;\n  });\n\n  _defineProperty(this, \"firstCharUpperCase\", function () {\n    var str = _this.text.toLowerCase();\n\n    var firstCharString = str.substr(0, 1).toUpperCase();\n    var restString = str.substr(1);\n    _this.text = firstCharString + restString;\n    return _this;\n  });\n\n  this.text = text;\n  this.helperArray = [];\n};\n\n;\nexport default stringMethods;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/functions/stringMethods.tsx"],"names":["stringMethods","text","textInArray","i","length","toUpperCase","helperArray","push","arrayText","substr","join","str","toLowerCase","firstCharString","restString"],"mappings":";;;;IAAMA,a,GAIF,uBAAYC,IAAZ,EAA2B;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,6CAKP,YAAM;AACxB,QAAMC,WAAW,GAAG,YAAW,KAAI,CAACD,IAAhB,CAApB;;AAEA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAAW,CAACE,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,UAAID,WAAW,CAACC,CAAD,CAAX,KAAmBD,WAAW,CAACC,CAAD,CAAX,CAAeE,WAAf,EAAvB,EAAqD;AACnD,QAAA,KAAI,CAACC,WAAL,CAAiBC,IAAjB,CAAsBJ,CAAtB;AACD;AACF;;AACD,WAAO,KAAP;AACD,GAd0B;;AAAA,8CAgBN,YAAM;AACzB,QAAIK,SAAS,GAAG,EAAhB;;AAEA,SAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,KAAI,CAACG,WAAL,CAAiBF,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;AACjD,UAAIA,CAAC,KAAK,CAAV,EAAa;AACX;AACAK,QAAAA,SAAS,CAACD,IAAV,CAAe,KAAI,CAACN,IAAL,CAAUQ,MAAV,CAAiB,CAAjB,EAAoB,KAAI,CAACH,WAAL,CAAiBH,CAAjB,CAApB,CAAf;AACD,OAHD,MAGO,IAAIA,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAG,KAAI,CAACG,WAAL,CAAiBF,MAAlC,EAA0C;AAC/C;AACAI,QAAAA,SAAS,CAACD,IAAV,CAAe,KAAI,CAACN,IAAL,CAAUQ,MAAV,CAAiB,KAAI,CAACH,WAAL,CAAiBH,CAAC,GAAG,CAArB,CAAjB,EAA0C,KAAI,CAACG,WAAL,CAAiBH,CAAjB,IAAsB,KAAI,CAACG,WAAL,CAAiBH,CAAC,GAAG,CAArB,CAAhE,CAAf;AACD,OAHM,MAGA,IAAIA,CAAC,KAAK,KAAI,CAACG,WAAL,CAAiBF,MAA3B,EAAmC;AACxC;AACAI,QAAAA,SAAS,CAACD,IAAV,CAAe,KAAI,CAACN,IAAL,CAAUQ,MAAV,CAAiB,KAAI,CAACH,WAAL,CAAiBH,CAAC,GAAG,CAArB,CAAjB,CAAf;AACD;AACF;;AACD,IAAA,KAAI,CAACF,IAAL,GAAYO,SAAS,CAACE,IAAV,CAAe,GAAf,CAAZ;AAEA,WAAO,KAAP;AACD,GAlC0B;;AAAA,8CAoCN,YAAM;AACzB,QAAIC,GAAG,GAAG,KAAI,CAACV,IAAL,CAAUW,WAAV,EAAV;;AACA,QAAMC,eAAe,GAAGF,GAAG,CAACF,MAAJ,CAAW,CAAX,EAAc,CAAd,EAAiBJ,WAAjB,EAAxB;AACA,QAAMS,UAAU,GAAGH,GAAG,CAACF,MAAJ,CAAW,CAAX,CAAnB;AACA,IAAA,KAAI,CAACR,IAAL,GAAYY,eAAe,GAAGC,UAA9B;AACA,WAAO,KAAP;AACD,GA1C0B;;AACzB,OAAKb,IAAL,GAAYA,IAAZ;AACA,OAAKK,WAAL,GAAmB,EAAnB;AACD,C;;AAwCF;AAED,eAAeN,aAAf","sourcesContent":["class stringMethods {\n    text : string;\n    helperArray : number[];\n\n    constructor(text : string) {\n      this.text = text;\n      this.helperArray = [];\n    }\n    \n    getIndexUpperCase = () => {\n      const textInArray = Array.from(this.text);\n  \n      for (let i = 0; i < textInArray.length; i++) {\n        if (textInArray[i] === textInArray[i].toUpperCase()) {\n          this.helperArray.push(i);\n        }\n      }\n      return this;\n    };\n  \n    splitStringByIndex = () => {\n      let arrayText = [];\n  \n      for (let i = 0; i <= this.helperArray.length; i++) {\n        if (i === 0) {\n          //first iteration\n          arrayText.push(this.text.substr(0, this.helperArray[i]));\n        } else if (i > 0 && i < this.helperArray.length) {\n          //iteration in the middle\n          arrayText.push(this.text.substr(this.helperArray[i - 1], this.helperArray[i] - this.helperArray[i - 1]));\n        } else if (i === this.helperArray.length) {\n          //last iteration\n          arrayText.push(this.text.substr(this.helperArray[i - 1]));\n        }\n      }\n      this.text = arrayText.join(\" \");\n  \n      return this;\n    };\n  \n    firstCharUpperCase = () => {\n      let str = this.text.toLowerCase();\n      const firstCharString = str.substr(0, 1).toUpperCase();\n      const restString = str.substr(1);\n      this.text = firstCharString + restString;\n      return this;\n    };\n  };\n\n  export default stringMethods;"]},"metadata":{},"sourceType":"module"}