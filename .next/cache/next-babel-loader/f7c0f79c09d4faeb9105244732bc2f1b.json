{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useReducer, useEffect, useState, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport generateUniqueId from \"generate-unique-id\";\nimport UserContext from \"../UserContext\";\nimport ClientForm from \"./ClientForm\";\nimport globalVars from \"../../library/globalVariables\";\nimport languages from \"../../library/languages\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    formWrapper: _defineProperty({\n      marginTop: theme.spacing(3),\n      borderRadius: theme.spacing(1),\n      padding: theme.spacing(3),\n      backgroundColor: theme.palette.grey[\"200\"],\n      boxShadow: theme.shadows[\"1\"],\n      width: \"50%\"\n    }, theme.breakpoints.down(\"sm\"), {\n      width: \"100%\"\n    }),\n    textField: {\n      marginTop: theme.spacing(2)\n    }\n  });\n});\n\nvar CreateClient = function CreateClient(_ref) {\n  var fields = _ref.fields,\n      isClientAdded = _ref.isClientAdded,\n      toggleIsClientAdded = _ref.toggleIsClientAdded,\n      addNewClientToState = _ref.addNewClientToState;\n  var classes = useStyles({});\n  var initialNewClientState = fields.map(function (e) {\n    return e.fieldName;\n  }).reduce(function (o, key) {\n    return _Object$assign(o, _defineProperty({}, key, \"\"));\n  }, {});\n  var user = useContext(UserContext);\n\n  var _useState = useState(false),\n      submitting = _useState[0],\n      setSubmitting = _useState[1];\n\n  var _useReducer = useReducer(function (state, action) {\n    switch (action.type) {\n      case \"onChange\":\n        return _objectSpread({}, state, _defineProperty({}, action.payload.fieldName, action.payload.fieldType === globalVars.fieldTypes.number ? _parseInt(action.payload.value) : action.payload.value));\n\n      case \"addId\":\n        return _objectSpread({}, state, {\n          _id: generateUniqueId({\n            length: 24,\n            useNumbers: true,\n            useLetters: false,\n            includeSymbols: [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n          })\n        });\n\n      case \"addDate\":\n        return _objectSpread({}, state, _defineProperty({}, \"Date added\", moment().format(\"llll\")));\n\n      case \"clear\":\n        return {\n          initialNewClientState: initialNewClientState\n        };\n\n      default:\n        return state;\n    }\n  }, initialNewClientState),\n      newClient = _useReducer[0],\n      setNewClient = _useReducer[1];\n\n  var onChange = function onChange(event) {\n    setNewClient({\n      type: \"onChange\",\n      payload: {\n        fieldName: event.target.name,\n        value: event.target.value,\n        fieldType: event.target.type\n      }\n    });\n  };\n\n  useEffect(function () {\n    //trigger side effect when submitting state is changed and its is true\n    submitting ? submitNewClient() : null;\n  }, [submitting]);\n\n  var onSubmit = function onSubmit(e) {\n    // on Button Click prepare client object to be ready to send\n    e.preventDefault();\n    setNewClient({\n      type: \"addDate\"\n    });\n    setNewClient({\n      type: \"addId\"\n    }); // change submitting state to trigger effect with POST req.\n\n    setSubmitting(true);\n  };\n\n  var submitNewClient =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var clientRes, clientData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return axios({\n                method: \"POST\",\n                data: newClient,\n                url: \"\".concat(globalVars.serverURL, \"/clients\"),\n                params: {\n                  key: user.user.userkey\n                },\n                responseType: \"json\"\n              });\n\n            case 2:\n              clientRes = _context.sent;\n              _context.next = 5;\n              return clientRes.data;\n\n            case 5:\n              clientData = _context.sent;\n\n              if (clientData.msg === globalVars.msgSuccess) {\n                // add client data to clients state for table update\n                addNewClientToState(newClient); // reset newClient state\n\n                setNewClient({\n                  type: \"clear\"\n                }); // hide form\n\n                toggleIsClientAdded(); //reset submitting\n\n                setSubmitting(false);\n              } else {\n                alert(languages.en.somethingWentWrong);\n              }\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function submitNewClient() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var onCancel = function onCancel() {\n    setNewClient({\n      type: \"clear\"\n    });\n    toggleIsClientAdded();\n  };\n\n  return isClientAdded ? __jsx(Box, {\n    className: classes.formWrapper\n  }, __jsx(Typography, {\n    variant: \"h4\",\n    component: \"h2\",\n    gutterBottom: true\n  }, languages.en.addNewClient), __jsx(\"form\", {\n    onSubmit: onSubmit\n  }, __jsx(ClientForm, {\n    fields: fields,\n    onChange: onChange,\n    newClient: newClient\n  }), __jsx(Box, {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    mt: \"2rem\"\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    style: {\n      marginRight: \"1rem\"\n    },\n    onClick: onCancel\n  }, languages.en.cancel), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\"\n  }, languages.en.save)))) : null;\n};\n\nexport default CreateClient;","map":null,"metadata":{},"sourceType":"module"}