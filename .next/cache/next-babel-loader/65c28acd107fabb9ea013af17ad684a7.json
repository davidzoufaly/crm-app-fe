{"ast":null,"code":"var _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/CustomFieldsList.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport stringMethods from \"../library/stringMethods\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Grid from \"@material-ui/core/Grid\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport Fab from '@material-ui/core/Fab';\n\nvar CustomFields = function CustomFields(_ref) {\n  var fields = _ref.fields,\n      setupEditedField = _ref.setupEditedField,\n      deleteField = _ref.deleteField;\n  var useStyles = makeStyles({\n    card: {\n      textAlign: \"center\",\n      height: \"100%\",\n      minWidth: \"300px\"\n    },\n    list: {\n      listStyleType: \"disc\"\n    },\n    title: {\n      fontSize: 14\n    },\n    pos: {\n      marginBottom: 12\n    }\n  });\n  var classes = useStyles({});\n  var separatedCustomFields = fields.filter(function (_ref2) {\n    var fieldPermanent = _ref2.fieldPermanent;\n    return !fieldPermanent;\n  }).map(function (_ref3) {\n    var fieldName = _ref3.fieldName,\n        _id = _ref3._id,\n        fieldType = _ref3.fieldType,\n        fieldOptions = _ref3.fieldOptions;\n    var customFieldNameFormated = new stringMethods(fieldName.toLowerCase()).firstCharUpperCase().getString();\n    var options = fieldOptions.map(function (e) {\n      return __jsx(ListItem, {\n        key: e.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, __jsx(ListItemText, {\n        primary: e.value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }));\n    });\n    return __jsx(Grid, {\n      item: true,\n      key: _id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, __jsx(Card, {\n      className: classes.card,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, __jsx(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, __jsx(Typography, {\n      variant: \"h5\",\n      component: \"h3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, customFieldNameFormated), __jsx(Typography, {\n      className: classes.pos,\n      color: \"textSecondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"(\", fieldType.toLowerCase(), \")\"), fieldType === \"select\" && fieldOptions.length > 0 ? __jsx(List, {\n      className: classes.list,\n      dense: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, options) : null, __jsx(Fab, {\n      \"aria-label\": \"edit\",\n      color: \"primary\",\n      onClick: function onClick() {\n        return setupEditedField({\n          fieldName: customFieldNameFormated,\n          fieldType: fieldType,\n          fieldPermanent: false,\n          fieldOptions: fieldOptions,\n          id: _id\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, __jsx(EditIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    })), __jsx(Fab, {\n      \"aria-label\": \"delete\",\n      onClick: deleteField,\n      id: _id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, __jsx(DeleteIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })))));\n  });\n  return __jsx(Grid, {\n    container: true,\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, separatedCustomFields);\n};\n\nexport default CustomFields;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/CustomFieldsList.tsx"],"names":["stringMethods","makeStyles","Card","CardContent","Typography","ListItemText","List","ListItem","Grid","EditIcon","DeleteIcon","Fab","CustomFields","fields","setupEditedField","deleteField","useStyles","card","textAlign","height","minWidth","list","listStyleType","title","fontSize","pos","marginBottom","classes","separatedCustomFields","filter","fieldPermanent","map","fieldName","_id","fieldType","fieldOptions","customFieldNameFormated","toLowerCase","firstCharUpperCase","getString","options","e","id","value","length"],"mappings":";;;AAAA,OAAOA,aAAP,MAA0B,0BAA1B;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AAGA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAAoD;AAAA,MAAjDC,MAAiD,QAAjDA,MAAiD;AAAA,MAAzCC,gBAAyC,QAAzCA,gBAAyC;AAAA,MAAvBC,WAAuB,QAAvBA,WAAuB;AACvE,MAAMC,SAAS,GAAGf,UAAU,CAAC;AAC3BgB,IAAAA,IAAI,EAAE;AACJC,MAAAA,SAAS,EAAE,QADP;AAEJC,MAAAA,MAAM,EAAE,MAFJ;AAGJC,MAAAA,QAAQ,EAAE;AAHN,KADqB;AAM3BC,IAAAA,IAAI,EAAE;AACJC,MAAAA,aAAa,EAAE;AADX,KANqB;AAS3BC,IAAAA,KAAK,EAAE;AACLC,MAAAA,QAAQ,EAAE;AADL,KAToB;AAY3BC,IAAAA,GAAG,EAAE;AACHC,MAAAA,YAAY,EAAE;AADX;AAZsB,GAAD,CAA5B;AAiBA,MAAMC,OAAO,GAAGX,SAAS,CAAC,EAAD,CAAzB;AAEA,MAAMY,qBAAqB,GAAGf,MAAM,CACjCgB,MAD2B,CACpB;AAAA,QAAGC,cAAH,SAAGA,cAAH;AAAA,WAA6B,CAACA,cAA9B;AAAA,GADoB,EAE3BC,GAF2B,CAEvB,iBAAsD;AAAA,QAAnDC,SAAmD,SAAnDA,SAAmD;AAAA,QAAxCC,GAAwC,SAAxCA,GAAwC;AAAA,QAAnCC,SAAmC,SAAnCA,SAAmC;AAAA,QAAxBC,YAAwB,SAAxBA,YAAwB;AACzD,QAAMC,uBAAuB,GAAG,IAAIpC,aAAJ,CAAkBgC,SAAS,CAACK,WAAV,EAAlB,EAC7BC,kBAD6B,GAE7BC,SAF6B,EAAhC;AAIA,QAAMC,OAAO,GAAGL,YAAY,CAACJ,GAAb,CAAiB,UAACU,CAAD,EAAY;AAC3C,aACE,MAAC,QAAD;AAAU,QAAA,GAAG,EAAEA,CAAC,CAACC,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,YAAD;AAAc,QAAA,OAAO,EAAED,CAAC,CAACE,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAKD,KANe,CAAhB;AAQA,WACE,MAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,GAAG,EAAEV,GAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,SAAS,EAAEN,OAAO,CAACV,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,UAAD;AAAY,MAAA,OAAO,EAAC,IAApB;AAAyB,MAAA,SAAS,EAAC,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGmB,uBADH,CADF,EAIE,MAAC,UAAD;AAAY,MAAA,SAAS,EAAET,OAAO,CAACF,GAA/B;AAAoC,MAAA,KAAK,EAAC,eAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YACIS,SAAS,CAACG,WAAV,EADJ,MAJF,EAOGH,SAAS,KAAK,QAAd,IAA0BC,YAAY,CAACS,MAAb,GAAsB,CAAhD,GACC,MAAC,IAAD;AAAM,MAAA,SAAS,EAAEjB,OAAO,CAACN,IAAzB;AAA+B,MAAA,KAAK,EAAE,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGmB,OADH,CADD,GAIG,IAXN,EAYE,MAAC,GAAD;AAAK,oBAAW,MAAhB;AACE,MAAA,KAAK,EAAC,SADR;AAEE,MAAA,OAAO,EAAE;AAAA,eACP1B,gBAAgB,CAAC;AACfkB,UAAAA,SAAS,EAAEI,uBADI;AAEfF,UAAAA,SAAS,EAATA,SAFe;AAGfJ,UAAAA,cAAc,EAAE,KAHD;AAIfK,UAAAA,YAAY,EAAZA,YAJe;AAKfO,UAAAA,EAAE,EAAET;AALW,SAAD,CADT;AAAA,OAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAYE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,CAZF,EA0BE,MAAC,GAAD;AAAK,oBAAW,QAAhB;AAAyB,MAAA,OAAO,EAAElB,WAAlC;AAA+C,MAAA,EAAE,EAAEkB,GAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA1BF,CADF,CADF,CADF;AAoCD,GAnD2B,CAA9B;AAqDA,SACE,MAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,qBADH,CADF;AAKD,CA9ED;;AAgFA,eAAehB,YAAf","sourcesContent":["import stringMethods from \"../library/stringMethods\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport Fab from '@material-ui/core/Fab';\n\nconst CustomFields = ({ fields, setupEditedField, deleteField }: any) => {\n  const useStyles = makeStyles({\n    card: {\n      textAlign: \"center\",\n      height: \"100%\",\n      minWidth: \"300px\"\n    },\n    list: {\n      listStyleType: \"disc\"\n    },\n    title: {\n      fontSize: 14\n    },\n    pos: {\n      marginBottom: 12\n    }\n  });\n\n  const classes = useStyles({});\n\n  const separatedCustomFields = fields\n    .filter(({ fieldPermanent }: any) => !fieldPermanent)\n    .map(({ fieldName, _id, fieldType, fieldOptions }: any) => {\n      const customFieldNameFormated = new stringMethods(fieldName.toLowerCase())\n        .firstCharUpperCase()\n        .getString();\n\n      const options = fieldOptions.map((e: any) => {\n        return (\n          <ListItem key={e.id}>\n            <ListItemText primary={e.value} />\n          </ListItem>\n        );\n      });\n\n      return (\n        <Grid item key={_id}>\n          <Card className={classes.card}>\n            <CardContent>\n              <Typography variant=\"h5\" component=\"h3\">\n                {customFieldNameFormated}\n              </Typography>\n              <Typography className={classes.pos} color=\"textSecondary\">\n                ({fieldType.toLowerCase()})\n              </Typography>\n              {fieldType === \"select\" && fieldOptions.length > 0 ? (\n                <List className={classes.list} dense={true}>\n                  {options}\n                </List>\n              ) : null}\n              <Fab aria-label=\"edit\"\n                color=\"primary\"\n                onClick={() =>\n                  setupEditedField({\n                    fieldName: customFieldNameFormated,\n                    fieldType,\n                    fieldPermanent: false,\n                    fieldOptions,\n                    id: _id\n                  })\n                }\n              >\n                <EditIcon/>\n              </Fab>\n              <Fab aria-label=\"delete\" onClick={deleteField} id={_id}>\n                <DeleteIcon />\n              </Fab>\n            </CardContent>\n          </Card>\n        </Grid>\n      );\n    });\n\n  return (\n    <Grid container spacing={2}>\n      {separatedCustomFields}\n    </Grid>\n  );\n};\n\nexport default CustomFields;\n"]},"metadata":{},"sourceType":"module"}