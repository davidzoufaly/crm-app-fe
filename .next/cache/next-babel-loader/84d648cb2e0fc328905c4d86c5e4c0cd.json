{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/CustomFields.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useReducer, useEffect } from \"react\";\nimport AddOrEditField from \"./AddOrEditField\";\nimport axios from \"axios\";\nimport globalVars from \"../library/globalVariables\";\nimport uniqid from \"uniqid\";\nimport CustomFieldsList from \"./CustomFieldsList\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SelectFieldOptions from \"./SelectFieldOptions\"; //TODO: EDIT OPTIONU SE PRERENDEROVAVA\n//TODO: TO much baskspace u optionu uplne odstranÃ­ pole\n\nconst CustomClientFields = ({\n  fields,\n  refreshList\n}) => {\n  const blankFieldObject = {\n    fieldName: \"\",\n    fieldType: \"text\",\n    fieldOptions: []\n  };\n  useEffect(() => {\n    console.log(editedField);\n  });\n  const {\n    0: displayComponent,\n    1: setDisplayComponent\n  } = useState(false);\n  const {\n    0: editedField,\n    1: setEditedField\n  } = useReducer((state, action) => {\n    switch (action.type) {\n      case \"fieldNameChange\":\n        return _objectSpread({}, state, {\n          fieldName: action.payload.event.target.value\n        });\n\n      case \"selectValueChange\":\n        console.log(action.payload.event);\n      // return {\n      //   ...state,\n      //   fieldType:\n      //     action.payload.event.target.options[\n      //       action.payload.event.target.options.selectedIndex\n      //     ].value\n      // };\n\n      case \"newOptionSpawn\":\n        return _objectSpread({}, state, {\n          fieldOptions: [...state.fieldOptions, {\n            id: uniqid(),\n            value: \"\"\n          }]\n        });\n\n      case \"clear\":\n        return {\n          blankFieldObject\n        };\n\n      case \"optionValueChange\":\n        return _objectSpread({}, state, {\n          fieldOptions: state.fieldOptions.filter(el => action.payload.event.target.id === el.id ? el.value = action.payload.event.target.value : el)\n        });\n\n      case \"optionDelete\":\n        return _objectSpread({}, state, {\n          fieldOptions: state.fieldOptions.filter(e => action.payload.event.target.id !== e.id)\n        });\n\n      case \"setWithPaylod\":\n        return action.payload.obj;\n\n      default:\n        return state;\n    }\n  }, blankFieldObject);\n  const fieldMethods = {\n    onNameChange(event) {\n      setEditedField({\n        type: \"fieldNameChange\",\n        payload: {\n          event\n        }\n      });\n    },\n\n    onSelectChange(event) {\n      setEditedField({\n        type: \"selectValueChange\",\n        payload: {\n          event\n        }\n      });\n    },\n\n    handleOptionSpawn() {\n      setEditedField({\n        type: \"newOptionSpawn\"\n      });\n    },\n\n    toggleDisplayComponent() {\n      displayComponent ? setDisplayComponent(false) : setDisplayComponent(true);\n      setEditedField({\n        type: \"clear\"\n      });\n    },\n\n    saveEditedField() {\n      const fieldIsUpdated = async () => {\n        const {\n          fieldName,\n          fieldType,\n          fieldOptions,\n          id\n        } = editedField;\n        const res = await axios({\n          method: \"put\",\n          url: `${globalVars.serverURL}/fields/${id}`,\n          data: {\n            fieldName,\n            fieldType,\n            fieldOptions\n          },\n          responseType: \"json\"\n        });\n        const data = await res.data;\n\n        if (data.msg === \"Success\") {\n          reset();\n        }\n      };\n\n      const fieldIsCreated = async () => {\n        const res = await axios({\n          method: \"post\",\n          url: `${globalVars.serverURL}/fields/`,\n          data: editedField,\n          responseType: \"json\"\n        });\n        const data = await res.data;\n\n        if (data.msg === \"Success\") {\n          reset();\n        }\n      };\n\n      !editedField.id ? fieldIsCreated() : fieldIsUpdated();\n    }\n\n  };\n\n  const reset = () => {\n    setDisplayComponent(false);\n    setEditedField({\n      type: \"clear\"\n    });\n    refreshList();\n  };\n\n  const deleteField = async id => {\n    const res = await axios({\n      method: \"delete\",\n      url: `${globalVars.serverURL}/fields/${id}`,\n      responseType: \"json\"\n    });\n    const resData = await res.data;\n    resData.msg === \"Success\" ? refreshList() : null;\n  };\n\n  const onOptionChange = event => {\n    setEditedField({\n      type: \"optionValueChange\",\n      payload: {\n        event\n      }\n    });\n  };\n\n  const onOptionDelete = event => {\n    setEditedField({\n      type: \"optionDelete\",\n      payload: {\n        event\n      }\n    });\n  };\n\n  const setupEditedField = obj => {\n    setEditedField({\n      type: \"setWithPaylod\",\n      payload: {\n        obj\n      }\n    });\n    !displayComponent ? setDisplayComponent(true) : null;\n  };\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"h4\",\n    component: \"h2\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, \"Custom Client Fields\"), __jsx(CustomFieldsList, {\n    deleteField: deleteField,\n    fields: fields,\n    setupEditedField: setupEditedField,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }), __jsx(AddOrEditField, {\n    editedField: editedField,\n    displayComponent: displayComponent,\n    fieldMethods: fieldMethods,\n    handleOption: __jsx(SelectFieldOptions, {\n      options: editedField.fieldOptions,\n      onOptionChange: onOptionChange,\n      onOptionDelete: onOptionDelete,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }));\n};\n\nexport default CustomClientFields;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/CustomFields.tsx"],"names":["useState","useReducer","useEffect","AddOrEditField","axios","globalVars","uniqid","CustomFieldsList","Typography","SelectFieldOptions","CustomClientFields","fields","refreshList","blankFieldObject","fieldName","fieldType","fieldOptions","console","log","editedField","displayComponent","setDisplayComponent","setEditedField","state","action","type","payload","event","target","value","id","filter","el","e","obj","fieldMethods","onNameChange","onSelectChange","handleOptionSpawn","toggleDisplayComponent","saveEditedField","fieldIsUpdated","res","method","url","serverURL","data","responseType","msg","reset","fieldIsCreated","deleteField","resData","onOptionChange","onOptionDelete","setupEditedField"],"mappings":"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","sourcesContent":["import { useState, useReducer, useEffect } from \"react\";\nimport AddOrEditField from \"./AddOrEditField\";\nimport axios from \"axios\";\nimport globalVars from \"../library/globalVariables\";\nimport uniqid from \"uniqid\";\nimport CustomFieldsList from \"./CustomFieldsList\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SelectFieldOptions from \"./SelectFieldOptions\";\n\n//TODO: EDIT OPTIONU SE PRERENDEROVAVA\n//TODO: TO much baskspace u optionu uplne odstranÃ­ pole\n\nconst CustomClientFields = ({ fields, refreshList }: any) => {\n  const blankFieldObject = {\n    fieldName: \"\",\n    fieldType: \"text\",\n    fieldOptions: []\n  };\n\n  useEffect(() =>Â {\n    console.log(editedField)\n  })\n\n  const [displayComponent, setDisplayComponent] = useState(false);\n\n  const [editedField, setEditedField] = useReducer((state, action) => {\n    switch (action.type) {\n      case \"fieldNameChange\":\n        return {\n          ...state,\n          fieldName: action.payload.event.target.value\n        };\n      case \"selectValueChange\":\n        console.log(action.payload.event);\n        // return {\n        //   ...state,\n        //   fieldType:\n        //     action.payload.event.target.options[\n        //       action.payload.event.target.options.selectedIndex\n        //     ].value\n        // };\n      case \"newOptionSpawn\":\n        return {\n          ...state,\n          fieldOptions: [\n            ...state.fieldOptions,\n            { id: uniqid(), value: \"\" }\n          ]\n        };\n      case \"clear\":\n        return {\n          blankFieldObject\n        };\n      case \"optionValueChange\":\n        return {\n          ...state,\n          fieldOptions: state.fieldOptions.filter((el: any) =>\n            action.payload.event.target.id === el.id\n              ? (el.value = action.payload.event.target.value)\n              : el\n          )\n        };\n      case \"optionDelete\":\n        return {\n          ...state,\n          fieldOptions: state.fieldOptions.filter((e: any) =>\n            action.payload.event.target.id !== e.id\n          )\n        };\n      case \"setWithPaylod\":\n        return action.payload.obj;\n\n      default:\n        return state;\n    }\n  }, blankFieldObject);\n\n  const fieldMethods = {\n    onNameChange(event: any) {\n      setEditedField({\n        type: \"fieldNameChange\",\n        payload: { event }\n      });\n    },\n    onSelectChange(event: any) {\n      setEditedField({\n        type: \"selectValueChange\",\n        payload: { event }\n      });\n    },\n    handleOptionSpawn() {\n      setEditedField({\n        type: \"newOptionSpawn\"\n      });\n    },\n    toggleDisplayComponent() {\n      displayComponent ? setDisplayComponent(false) : setDisplayComponent(true);\n      setEditedField({\n        type: \"clear\"\n      });\n    },\n    saveEditedField() {\n      const fieldIsUpdated = async () => {\n        const { fieldName, fieldType, fieldOptions, id } = editedField;\n        const res = await axios({\n          method: \"put\",\n          url: `${globalVars.serverURL}/fields/${id}`,\n          data: { fieldName, fieldType, fieldOptions },\n          responseType: \"json\"\n        });\n        const data = await res.data;\n        if (data.msg === \"Success\") {\n          reset();\n        }\n      };\n\n      const fieldIsCreated = async () => {\n        const res = await axios({\n          method: \"post\",\n          url: `${globalVars.serverURL}/fields/`,\n          data: editedField,\n          responseType: \"json\"\n        });\n        const data = await res.data;\n        if (data.msg === \"Success\") {\n          reset();\n        }\n      };\n      !editedField.id ? fieldIsCreated() : fieldIsUpdated();\n    }\n  };\n\n  const reset = () => {\n    setDisplayComponent(false);\n    setEditedField({ type: \"clear\" });\n    refreshList();\n  };\n\n  const deleteField = async (id: any) => {\n    const res = await axios({\n      method: \"delete\",\n      url: `${globalVars.serverURL}/fields/${id}`,\n      responseType: \"json\"\n    });\n    const resData = await res.data;\n    resData.msg === \"Success\" ? refreshList() : null;\n  };\n\n  const onOptionChange = (event: any) => {\n    setEditedField({\n      type: \"optionValueChange\",\n      payload: { event }\n    });\n  };\n\n  const onOptionDelete = (event: any) => {\n    setEditedField({\n      type: \"optionDelete\",\n      payload: { event }\n    });\n  };\n\n  const setupEditedField = (obj: any) => {\n    setEditedField({\n      type: \"setWithPaylod\",\n      payload: { obj }\n    });\n    !displayComponent ? setDisplayComponent(true) : null;\n  };\n\n  return (\n    <div>\n      <Typography variant=\"h4\" component=\"h2\" gutterBottom>\n        Custom Client Fields\n      </Typography>\n      <CustomFieldsList\n        deleteField={deleteField}\n        fields={fields}\n        setupEditedField={setupEditedField}\n      />\n      <AddOrEditField\n        editedField={editedField}\n        displayComponent={displayComponent}\n        fieldMethods={fieldMethods}\n        handleOption={\n          <SelectFieldOptions\n            options={editedField.fieldOptions}\n            onOptionChange={onOptionChange}\n            onOptionDelete={onOptionDelete}\n          />\n        }\n      />\n    </div>\n  );\n};\n\nexport default CustomClientFields;\n"]},"metadata":{},"sourceType":"module"}