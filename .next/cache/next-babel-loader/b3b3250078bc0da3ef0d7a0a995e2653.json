{"ast":null,"code":"import _getIterator from \"@babel/runtime-corejs2/core-js/get-iterator\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/ClientList.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from 'next/link';\n\nvar ClientsList = function ClientsList(_ref) {\n  var clients = _ref.clients,\n      reverse = _ref.reverse,\n      sort = _ref.sort;\n  reverse ? clients.sort(function (a, b) {\n    return b[sort] > a[sort] ? 1 : -1;\n  }) : clients.sort(function (a, b) {\n    return b[sort] > a[sort] ? -1 : 1;\n  });\n  var tableClients = clients.map(function (e) {\n    var tableItem = function tableItem() {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _getIterator(e), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var key = _step.value;\n          return __jsx(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 18\n            },\n            __self: this\n          }, e[key]);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    };\n\n    return __jsx(\"tr\", {\n      key: e._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, tableItem(), __jsx(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, __jsx(Link, {\n      href: \"/clients/[id]\",\n      as: \"/clients/\".concat(e._id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \"Go to client\"))));\n  });\n  return tableClients;\n};\n\nexport default ClientsList;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/ClientList.tsx"],"names":["Link","ClientsList","clients","reverse","sort","a","b","tableClients","map","e","tableItem","key","_id"],"mappings":";;;;AACA,OAAOA,IAAP,MAAiB,WAAjB;;AAQA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAuC;AAAA,MAArCC,OAAqC,QAArCA,OAAqC;AAAA,MAA5BC,OAA4B,QAA5BA,OAA4B;AAAA,MAAnBC,IAAmB,QAAnBA,IAAmB;AAEvDD,EAAAA,OAAO,GAAGD,OAAO,CAACE,IAAR,CAAa,UAACC,CAAD,EAAUC,CAAV;AAAA,WAAsBA,CAAC,CAACF,IAAD,CAAD,GAAUC,CAAC,CAACD,IAAD,CAAX,GAAoB,CAApB,GAAwB,CAAC,CAA/C;AAAA,GAAb,CAAH,GAAoEF,OAAO,CAACE,IAAR,CAAa,UAACC,CAAD,EAAUC,CAAV;AAAA,WAAsBA,CAAC,CAACF,IAAD,CAAD,GAAUC,CAAC,CAACD,IAAD,CAAX,GAAoB,CAAC,CAArB,GAAyB,CAA/C;AAAA,GAAb,CAA3E;AAEA,MAAMG,YAAY,GAAGL,OAAO,CAACM,GAAR,CAAY,UAACC,CAAD,EAAW;AAE1C,QAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA;AAAA;AAAA;;AAAA;AACtB,0CAAeD,CAAf,4GAAkB;AAAA,cAAVE,GAAU;AAChB,iBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAKF,CAAC,CAACE,GAAD,CAAN,CAAP;AACD;AAHqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIzB,KAJC;;AAMA,WACE;AAAI,MAAA,GAAG,EAAEF,CAAC,CAACG,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGF,SAAS,EADZ,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,eAAX;AAA2B,MAAA,EAAE,qBAAcD,CAAC,CAACG,GAAhB,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CADF,CAFA,CADF;AASA,GAjBmB,CAArB;AAkBA,SAAOL,YAAP;AACD,CAvBH;;AAyBE,eAAeN,WAAf","sourcesContent":["\nimport Link from 'next/link';\n\ninterface IProps {\n    clients: any,\n    reverse: boolean\n    sort: string\n  }\n\nconst ClientsList = ({clients, reverse, sort} : IProps) => {\n    \n    reverse ? clients.sort((a : any, b : any) => b[sort] > a[sort] ? 1 : -1) : clients.sort((a : any, b : any) => b[sort] > a[sort] ? -1 : 1);\n\n    const tableClients = clients.map((e:any) => {\n\n      const tableItem = () => {\n        for(let key of e) {\n          return <td>{e[key]}</td>;\n        }\n    }\n\n      return (\n        <tr key={e._id}>\n          {tableItem()}\n        <td>\n          <Link href=\"/clients/[id]\" as={`/clients/${e._id}`}>\n            <a>Go to client</a>\n          </Link>\n        </td>\n      </tr>\n    )})\n    return tableClients;\n  };\n\n  export default ClientsList;"]},"metadata":{},"sourceType":"module"}