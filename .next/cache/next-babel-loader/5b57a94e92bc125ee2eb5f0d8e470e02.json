{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/settings/EmailSettings.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport axios from \"axios\";\nimport { useState, useRef, useContext } from \"react\";\nimport UserContext from \"../UserContext\";\nimport globalVars from \"../../library/globalVariables\";\nimport languages from \"../../library/languages\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst EmailSettings = ({\n  username,\n  pass\n}) => {\n  const {\n    0: emailSettings,\n    1: setEmailSettings\n  } = useState({\n    username,\n    pass\n  });\n  const {\n    0: isPassShown,\n    1: setIsPassShown\n  } = useState(false);\n  const passEl = useRef(null);\n  const user = useContext(UserContext);\n\n  const onSubmit = async e => {\n    e.preventDefault();\n    const res = await axios({\n      method: \"post\",\n      url: `${globalVars.serverURL}/emails`,\n      params: {\n        key: user.user.userkey\n      },\n      data: {\n        username,\n        pass\n      },\n      responseType: \"json\"\n    });\n    const data = res.data;\n\n    if (data === \"Success\") {\n      alert(languages.en.emailSettingsUpdatedSuccess);\n    } else {\n      alert(languages.en.somethingWentWrong);\n    }\n  };\n\n  const togglePass = e => {\n    e.preventDefault();\n\n    if (!isPassShown) {\n      passEl.current.type = \"text\";\n      setIsPassShown(true);\n    } else {\n      passEl.current.type = \"password\";\n      setIsPassShown(false);\n    }\n  };\n\n  const onChange = e => {\n    setEmailSettings(_objectSpread({}, emailSettings, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Typography, {\n    variant: \"h4\",\n    component: \"h2\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, languages.en.emailAccount), __jsx(\"form\", {\n    onSubmit: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: \"acc-name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, languages.en.email), __jsx(\"input\", {\n    id: \"acc-name\",\n    type: \"text\",\n    name: \"username\",\n    autoComplete: \"email\",\n    value: username,\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), __jsx(\"label\", {\n    htmlFor: \"acc-pass\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, languages.en.password), __jsx(\"input\", {\n    id: \"acc-pass\",\n    type: \"password\",\n    autoComplete: \"current-password\",\n    name: \"pass\",\n    ref: passEl,\n    value: pass,\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: togglePass,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, isPassShown ? languages.en.hidePassword : languages.en.showPassword), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, languages.en.save)));\n};\n\nexport default EmailSettings;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/settings/EmailSettings.tsx"],"names":["axios","useState","useRef","useContext","UserContext","globalVars","languages","Button","Typography","EmailSettings","username","pass","emailSettings","setEmailSettings","isPassShown","setIsPassShown","passEl","user","onSubmit","e","preventDefault","res","method","url","serverURL","params","key","userkey","data","responseType","alert","en","emailSettingsUpdatedSuccess","somethingWentWrong","togglePass","current","type","onChange","target","name","value","emailAccount","email","password","hidePassword","showPassword","save"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { useState, useRef, useContext, useEffect } from \"react\";\nimport UserContext from \"../UserContext\";\nimport globalVars from \"../../library/globalVariables\";\nimport languages from \"../../library/languages\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst EmailSettings = ({username, pass}: any) => {\n  const [emailSettings, setEmailSettings] = useState({username, pass});\n  const [isPassShown, setIsPassShown] = useState(false);\n  const passEl = useRef(null);\n  const user = useContext(UserContext);\n\n\n  const onSubmit = async e => {\n    e.preventDefault();\n\n    const res = await axios({\n      method: \"post\",\n      url: `${globalVars.serverURL}/emails`,\n      params: {key: user.user.userkey},\n      data: { username, pass },\n      responseType: \"json\"\n    });\n    const data = res.data;\n    if (data === \"Success\") {\n      alert(languages.en.emailSettingsUpdatedSuccess);\n    } else {\n      alert(languages.en.somethingWentWrong);\n    }\n  };\n\n  const togglePass = e => {\n    e.preventDefault();\n    if(!isPassShown) {\n      passEl.current.type = \"text\";\n      setIsPassShown(true);\n    } else {\n      passEl.current.type = \"password\";\n      setIsPassShown(false);\n    }\n  };\n\n  const onChange = e => {\n    setEmailSettings({ ...emailSettings, [e.target.name]: e.target.value });\n  };\n\n  return (\n    <>\n      <Typography variant=\"h4\" component=\"h2\" gutterBottom>\n        {languages.en.emailAccount}\n      </Typography>\n      <form onSubmit={onSubmit}>\n        <label htmlFor=\"acc-name\">{languages.en.email}</label>\n        <input\n          id=\"acc-name\"\n          type=\"text\"\n          name=\"username\"\n          autoComplete=\"email\"\n          value={username}\n          onChange={onChange}\n        />\n        <label htmlFor=\"acc-pass\">{languages.en.password}</label>\n        <input\n          id=\"acc-pass\"\n          type=\"password\"\n          autoComplete=\"current-password\"\n          name=\"pass\"\n          ref={passEl}\n          value={pass}\n          onChange={onChange}\n        />\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={togglePass}\n        >\n          {isPassShown ? languages.en.hidePassword : languages.en.showPassword}\n        </Button>\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n          {languages.en.save}\n        </Button>\n      </form>\n    </>\n  );\n};\n\nexport default EmailSettings;\n"]},"metadata":{},"sourceType":"module"}