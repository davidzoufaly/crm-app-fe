{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useReducer, useContext } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport Header from \"../../components/Header\";\nimport TableBody from \"../../components/clients/TableBody\";\nimport UserContext from \"../../components/UserContext\";\nimport stringMethods from \"../../library/stringMethods\";\nimport globalVars from \"../../library/globalVariables\";\nimport TableHead from \"../../components/clients/TableHead\";\nimport CreateClient from \"../../components/clients/CreateClient\";\nimport EmailForm from \"../../components/EmailForm\";\nimport Buttons from \"../../components/clients/Buttons\";\nimport LoadingSpinner from \"../../components/LoadingSpinner\";\nimport { Table, Typography } from '@material-ui/core';\nimport TableBodyMui from \"@material-ui/core/TableBody\";\nimport languages from \"../../library/languages\";\n\nvar Clients = function Clients(_ref) {\n  var fieldData = _ref.fieldData,\n      clientData = _ref.clientData;\n  var router = useRouter();\n  var user = useContext(UserContext);\n\n  var _useReducer = useReducer(function (state, action) {\n    switch (action.type) {\n      case \"handleCheckedClients\":\n        return state.map(function (client) {\n          return client._id === action.payload.id ? client.isChecked === false || client.isChecked === undefined ? _objectSpread({}, client, {\n            isChecked: true\n          }) : _objectSpread({}, client, {\n            isChecked: false\n          }) : client;\n        });\n\n      case \"addClient\":\n        return [].concat(_toConsumableArray(state), [action.payload.newClient]);\n\n      case \"deleteCheckedClients\":\n        return state.filter(function (client) {\n          return !client.isChecked;\n        });\n\n      case \"unCheckAll\":\n        return state.map(function (client) {\n          return client = _objectSpread({}, client, {\n            isChecked: false\n          });\n        });\n\n      default:\n        return state;\n    }\n  }, clientData),\n      clients = _useReducer[0],\n      setClients = _useReducer[1];\n\n  var _useState = useState({\n    sortBy: \"First name\",\n    reverse: true\n  }),\n      sort = _useState[0],\n      setSort = _useState[1];\n\n  var _useState2 = useState(false),\n      initialized = _useState2[0],\n      setInitialized = _useState2[1];\n\n  var _useState3 = useState(false),\n      isClientAdded = _useState3[0],\n      setIsClientAdded = _useState3[1];\n\n  var _useState4 = useState(false),\n      isEmailCreated = _useState4[0],\n      setIsEmailCreated = _useState4[1];\n\n  useEffect(function () {\n    // set page title\n    var title = new stringMethods(router.pathname).removeSlash().removeSlashAndTextAfter().firstCharUpperCase().addStringToEnd(globalVars.titleSubText).getString();\n    document.title = title;\n    setInitialized(true);\n    user.checkUser();\n  }, [router]);\n  useEffect(function () {\n    // reset email state, when user uncheck all recievers / clients\n    filterCheckedClients().length === 0 && isEmailCreated ? setIsEmailCreated(!isEmailCreated) : null;\n  }, [clients]); // create H1\n\n  var h1 = new stringMethods(router.pathname).removeSlash().removeSlashAndTextAfter().firstCharUpperCase().getString();\n\n  var sortBy = function sortBy(fieldName) {\n    setSort(_objectSpread({}, sort, {\n      sortBy: fieldName,\n      reverse: fieldName === sort.sortBy // if clicked again on same field ->Â reverse sort based on current reverse state\n      ? !sort.reverse ? true : false // if new field being clicked -> set reverse true to immediately sort column ASC \n      : true\n    }));\n  };\n\n  var handleCheckbox = function handleCheckbox(id) {\n    setClients({\n      type: \"handleCheckedClients\",\n      payload: {\n        id: id\n      }\n    });\n  };\n\n  var addNewClientToState = function addNewClientToState(newClient) {\n    setClients({\n      type: \"addClient\",\n      payload: {\n        newClient: newClient\n      }\n    });\n  };\n\n  var filterCheckedClients = function filterCheckedClients() {\n    return clients.filter(function (client) {\n      return client.isChecked;\n    });\n  };\n\n  var unCheckAll = function unCheckAll() {\n    setClients({\n      type: \"unCheckAll\"\n    });\n  };\n\n  var toggleIsEmailCreated = function toggleIsEmailCreated() {\n    setIsEmailCreated(isEmailCreated ? false : true);\n  };\n\n  var toggleIsClientAdded = function toggleIsClientAdded() {\n    isClientAdded ? setIsClientAdded(false) : setIsClientAdded(true);\n  };\n\n  var deleteMultipleClients =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setClients({\n                type: \"deleteCheckedClients\"\n              });\n              _context.next = 3;\n              return axios({\n                method: \"DELETE\",\n                data: filterCheckedClients().map(function (e) {\n                  return e._id;\n                }),\n                url: \"\".concat(globalVars.serverURL, \"/clients/\"),\n                params: {\n                  key: user.user.userkey\n                },\n                responseType: \"json\"\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function deleteMultipleClients() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return !user.user.signedIn && !initialized ? __jsx(LoadingSpinner, null) : __jsx(\"div\", null, __jsx(Header, null), __jsx(Typography, {\n    component: \"h1\",\n    variant: \"h3\"\n  }, h1), __jsx(Typography, {\n    variant: \"h5\",\n    gutterBottom: true\n  }, languages.en.saved, \" \", clients.length), __jsx(EmailForm, {\n    to: filterCheckedClients().map(function (e) {\n      return e[\"Email\"];\n    }),\n    isEmailCreated: isEmailCreated,\n    toggleIsEmailCreated: toggleIsEmailCreated,\n    unCheckAll: unCheckAll\n  }), __jsx(CreateClient, {\n    fields: fieldData,\n    isClientAdded: isClientAdded,\n    toggleIsClientAdded: toggleIsClientAdded,\n    addNewClientToState: addNewClientToState\n  }), __jsx(Buttons, {\n    clientsAreNotChecked: !clients.some(function (client) {\n      return client.isChecked;\n    }),\n    deleteMultipleClients: deleteMultipleClients,\n    toggleIsClientAdded: toggleIsClientAdded,\n    isClientAdded: isClientAdded,\n    toggleIsEmailCreated: toggleIsEmailCreated,\n    isEmailCreated: isEmailCreated\n  }), __jsx(Table, {\n    \"aria-label\": \"clients table\",\n    size: \"small\",\n    style: {\n      backgroundColor: \"white\",\n      border: \"1px solid #e0e0e0\"\n    }\n  }, __jsx(TableHead, {\n    fields: fieldData,\n    sortBy: sortBy,\n    sort: sort\n  }), __jsx(TableBodyMui, null, __jsx(TableBody, {\n    clients: clients,\n    fields: fieldData,\n    sort: sort,\n    handleCheckbox: handleCheckbox\n  }))));\n};\n\nClients.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(context) {\n    var clientRes, clientData, fieldRes, fieldData;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return axios({\n              method: \"GET\",\n              url: \"\".concat(globalVars.serverURL, \"/clients/\"),\n              params: {\n                key: context.query.key\n              },\n              responseType: \"json\"\n            });\n\n          case 2:\n            clientRes = _context2.sent;\n            _context2.next = 5;\n            return clientRes.data;\n\n          case 5:\n            clientData = _context2.sent;\n            _context2.next = 8;\n            return axios({\n              method: \"GET\",\n              url: \"\".concat(globalVars.serverURL, \"/fields\"),\n              params: {\n                key: context.query.key\n              },\n              responseType: \"json\"\n            });\n\n          case 8:\n            fieldRes = _context2.sent;\n            _context2.next = 11;\n            return fieldRes.data;\n\n          case 11:\n            fieldData = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              clientData: clientData,\n              fieldData: fieldData\n            });\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default Clients;","map":null,"metadata":{},"sourceType":"module"}