{"ast":null,"code":"import _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\n\nvar varToString = function varToString(text) {\n  var textArray = _Array$from(text);\n\n  var getIndexUpperCase = function getIndexUpperCase(textInArray) {\n    var indexUpperCaseLetters = [];\n\n    for (var i = 0; i < textInArray.length; i++) {\n      if (textInArray[i] === textInArray[i].toUpperCase()) {\n        indexUpperCaseLetters.push(i);\n      }\n    }\n\n    return indexUpperCaseLetters;\n  };\n\n  var indexArray = getIndexUpperCase(textArray);\n\n  var splitStringByIndex = function splitStringByIndex(iArray, txt) {\n    var arrayText = [];\n\n    for (var i = 0; i <= iArray.length; i++) {\n      if (i === 0) {\n        //first iteration\n        arrayText.push(txt.substr(0, iArray[i]));\n      } else if (i > 0 && i < iArray.length) {\n        //iteration in the middle\n        arrayText.push(txt.substr(iArray[i - 1], iArray[i] - iArray[i - 1]));\n      } else if (i === iArray.length) {\n        //last iteration\n        arrayText.push(txt.substr(iArray[i - 1]));\n      }\n    }\n\n    return arrayText.join(\" \");\n  };\n\n  var splitString = splitStringByIndex(indexArray, text);\n\n  var firstCharUpperCase = function firstCharUpperCase(string) {\n    var str = string.toLowerCase();\n    var firstCharString = str.substr(0, 1).toUpperCase();\n    var restString = str.substr(1);\n    return firstCharString + restString;\n  };\n\n  var caseCorrectString = firstCharUpperCase(splitString);\n  return caseCorrectString;\n};\n\nexport default varToString;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/functions/varToString.tsx"],"names":["varToString","text","textArray","getIndexUpperCase","textInArray","indexUpperCaseLetters","i","length","toUpperCase","push","indexArray","splitStringByIndex","iArray","txt","arrayText","substr","join","splitString","firstCharUpperCase","string","str","toLowerCase","firstCharString","restString","caseCorrectString"],"mappings":";;AAAA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAmB;AACnC,MAAMC,SAAS,GAAG,YAAWD,IAAX,CAAlB;;AAEA,MAAME,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,WAAD,EAA4B;AACpD,QAAIC,qBAAqB,GAAG,EAA5B;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,WAAW,CAACG,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,UAAIF,WAAW,CAACE,CAAD,CAAX,KAAmBF,WAAW,CAACE,CAAD,CAAX,CAAeE,WAAf,EAAvB,EAAqD;AACnDH,QAAAA,qBAAqB,CAACI,IAAtB,CAA2BH,CAA3B;AACD;AACF;;AACD,WAAOD,qBAAP;AACD,GATD;;AAWA,MAAMK,UAAU,GAAGP,iBAAiB,CAACD,SAAD,CAApC;;AAEA,MAAMS,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,MAAD,EAASC,GAAT,EAAiB;AAC1C,QAAIC,SAAS,GAAG,EAAhB;;AAEA,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIM,MAAM,CAACL,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,UAAIA,CAAC,KAAK,CAAV,EAAa;AACX;AACAQ,QAAAA,SAAS,CAACL,IAAV,CAAeI,GAAG,CAACE,MAAJ,CAAW,CAAX,EAAcH,MAAM,CAACN,CAAD,CAApB,CAAf;AACD,OAHD,MAGO,IAAIA,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAGM,MAAM,CAACL,MAAxB,EAAgC;AACrC;AACAO,QAAAA,SAAS,CAACL,IAAV,CAAeI,GAAG,CAACE,MAAJ,CAAWH,MAAM,CAACN,CAAC,GAAG,CAAL,CAAjB,EAA0BM,MAAM,CAACN,CAAD,CAAN,GAAYM,MAAM,CAACN,CAAC,GAAG,CAAL,CAA5C,CAAf;AACD,OAHM,MAGA,IAAIA,CAAC,KAAKM,MAAM,CAACL,MAAjB,EAAyB;AAC9B;AACAO,QAAAA,SAAS,CAACL,IAAV,CAAeI,GAAG,CAACE,MAAJ,CAAWH,MAAM,CAACN,CAAC,GAAG,CAAL,CAAjB,CAAf;AACD;AACF;;AACD,WAAOQ,SAAS,CAACE,IAAV,CAAe,GAAf,CAAP;AACD,GAhBD;;AAkBA,MAAMC,WAAW,GAAGN,kBAAkB,CAACD,UAAD,EAAaT,IAAb,CAAtC;;AAEA,MAAMiB,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,MAAM,EAAI;AACnC,QAAIC,GAAG,GAAGD,MAAM,CAACE,WAAP,EAAV;AACA,QAAMC,eAAe,GAAGF,GAAG,CAACL,MAAJ,CAAW,CAAX,EAAc,CAAd,EAAiBP,WAAjB,EAAxB;AACA,QAAMe,UAAU,GAAGH,GAAG,CAACL,MAAJ,CAAW,CAAX,CAAnB;AACA,WAAOO,eAAe,GAAGC,UAAzB;AACD,GALD;;AAOA,MAAMC,iBAAiB,GAAGN,kBAAkB,CAACD,WAAD,CAA5C;AAEA,SAAOO,iBAAP;AACD,CA9CH;;AAgDA,eAAexB,WAAf","sourcesContent":["const varToString = (text : string) => {\n    const textArray = Array.from(text);\n  \n    const getIndexUpperCase = (textInArray : string[]) => {\n      let indexUpperCaseLetters = [];\n  \n      for (let i = 0; i < textInArray.length; i++) {\n        if (textInArray[i] === textInArray[i].toUpperCase()) {\n          indexUpperCaseLetters.push(i);\n        }\n      }\n      return indexUpperCaseLetters;\n    };\n  \n    const indexArray = getIndexUpperCase(textArray);\n  \n    const splitStringByIndex = (iArray, txt) => {\n      let arrayText = [];\n  \n      for (let i = 0; i <= iArray.length; i++) {\n        if (i === 0) {\n          //first iteration\n          arrayText.push(txt.substr(0, iArray[i]));\n        } else if (i > 0 && i < iArray.length) {\n          //iteration in the middle\n          arrayText.push(txt.substr(iArray[i - 1], iArray[i] - iArray[i - 1]));\n        } else if (i === iArray.length) {\n          //last iteration\n          arrayText.push(txt.substr(iArray[i - 1]));\n        }\n      }\n      return arrayText.join(\" \");\n    };\n  \n    const splitString = splitStringByIndex(indexArray, text);\n  \n    const firstCharUpperCase = string => {\n      let str = string.toLowerCase();\n      const firstCharString = str.substr(0, 1).toUpperCase();\n      const restString = str.substr(1);\n      return firstCharString + restString;\n    };\n  \n    const caseCorrectString = firstCharUpperCase(splitString);\n  \n    return caseCorrectString;\n  };\n\nexport default varToString;"]},"metadata":{},"sourceType":"module"}