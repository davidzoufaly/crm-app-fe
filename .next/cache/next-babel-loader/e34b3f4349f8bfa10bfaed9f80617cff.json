{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/pages/clients.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useReducer } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport Header from \"../components/Header\";\nimport TableBody from \"../components/clients/TableBody\";\nimport stringMethods from \"../library/stringMethods\";\nimport globalVars from \"../library/globalVariables\";\nimport TableHead from \"../components/clients/TableHead\";\nimport CreateClient from \"../components/CreateClient\";\nimport Buttons from \"../components/clients/Buttons\";\nimport LoadingSpinner from \"../components/loadingSpinner\";\nimport EmailForm from \"../components/EmailForm\"; //TODO: TOGGLOVAT EMAIL COMPONENTU -> po cancelu, odeslání\n\nconst Clients = ({\n  fieldData,\n  clientData\n}) => {\n  const router = useRouter();\n  const {\n    0: clients,\n    1: setClients\n  } = useReducer((state, action) => {\n    switch (action.type) {\n      case \"handleCheckedClients\":\n        return state.map(client => client._id === action.payload.id ? client.isChecked === false || client.isChecked === undefined ? _objectSpread({}, client, {\n          isChecked: true\n        }) : _objectSpread({}, client, {\n          isChecked: false\n        }) : client);\n\n      case \"addClient\":\n        return [...state, action.payload.newClient];\n\n      case \"deleteCheckedClients\":\n        return state.filter(client => !client.isChecked);\n\n      default:\n        return state;\n    }\n  }, clientData); //TODO: SPOJIT DO JEDNOHO STATU\n\n  const {\n    0: reverse,\n    1: setReverseOrder\n  } = useState(false);\n  const {\n    0: sort,\n    1: setSortBy\n  } = useState(\"firstName\"); //\n\n  const {\n    0: initialized,\n    1: setInitialized\n  } = useState(false);\n  const {\n    0: isClientAdded,\n    1: setIsClientAdded\n  } = useState(false);\n  useEffect(() => {\n    const title = new stringMethods(router.pathname).removeSlash().firstCharUpperCase().addStringToEnd(globalVars.titleSubText).getString();\n    document.title = title;\n    setInitialized(true);\n  });\n  const h1 = new stringMethods(router.pathname).removeSlash().firstCharUpperCase().getString();\n\n  const sortBy = fieldName => {\n    setSortBy(fieldName);\n    !reverse ? setReverseOrder(true) : setReverseOrder(false);\n  };\n\n  const toggleIsClientAdded = () => {\n    isClientAdded ? setIsClientAdded(false) : setIsClientAdded(true);\n  };\n\n  const handleCheckbox = id => {\n    setClients({\n      type: \"handleCheckedClients\",\n      payload: {\n        id\n      }\n    });\n  };\n\n  const addNewClientToState = newClient => {\n    setClients({\n      type: \"addClient\",\n      payload: {\n        newClient\n      }\n    });\n  };\n\n  const checkedClients = () => clients.filter(client => client.isChecked);\n\n  const deleteMultipleClients = async () => {\n    setClients({\n      type: \"deleteCheckedClients\"\n    });\n    await axios({\n      method: \"delete\",\n      data: checkedClients().map(e => e._id),\n      url: `${globalVars.serverURL}/clients/`,\n      responseType: \"json\"\n    });\n  };\n\n  return !initialized ? __jsx(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }) : __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, h1), __jsx(EmailForm, {\n    to: checkedClients().map(e => e.email),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }), __jsx(CreateClient, {\n    fields: fieldData,\n    isClientAdded: isClientAdded,\n    toggleIsClientAdded: toggleIsClientAdded,\n    addNewClientToState: addNewClientToState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }), __jsx(Buttons, {\n    disabled: !clients.some(client => client.isChecked),\n    deleteMultipleClients: deleteMultipleClients,\n    toggleIsClientAdded: toggleIsClientAdded,\n    isClientAdded: isClientAdded,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }), __jsx(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, __jsx(TableHead, {\n    fields: fieldData,\n    sortBy: sortBy,\n    reverse: reverse,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }), __jsx(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, __jsx(TableBody, {\n    clients: clients,\n    fields: fieldData,\n    sort: sort,\n    reverse: reverse,\n    handleCheckbox: handleCheckbox,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }))));\n};\n\nClients.getInitialProps = async () => {\n  //fetch clients\n  const clientRes = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/clients`,\n    responseType: \"json\"\n  });\n  const clientData = await clientRes.data; //fetch fields\n\n  const fieldRes = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/fields`,\n    responseType: \"json\"\n  });\n  const fieldData = await fieldRes.data;\n  return {\n    clientData,\n    fieldData\n  };\n};\n\nexport default Clients;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/pages/clients.tsx"],"names":["useState","useEffect","useReducer","useRouter","axios","Header","TableBody","stringMethods","globalVars","TableHead","CreateClient","Buttons","LoadingSpinner","EmailForm","Clients","fieldData","clientData","router","clients","setClients","state","action","type","map","client","_id","payload","id","isChecked","undefined","newClient","filter","reverse","setReverseOrder","sort","setSortBy","initialized","setInitialized","isClientAdded","setIsClientAdded","title","pathname","removeSlash","firstCharUpperCase","addStringToEnd","titleSubText","getString","document","h1","sortBy","fieldName","toggleIsClientAdded","handleCheckbox","addNewClientToState","checkedClients","deleteMultipleClients","method","data","e","url","serverURL","responseType","email","some","getInitialProps","clientRes","fieldRes"],"mappings":"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","sourcesContent":["import { useState, useEffect, useReducer } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport Header from \"../components/Header\";\nimport TableBody from \"../components/clients/TableBody\";\nimport stringMethods from \"../library/stringMethods\";\nimport globalVars from \"../library/globalVariables\";\nimport TableHead from \"../components/clients/TableHead\";\nimport CreateClient from \"../components/CreateClient\";\nimport Buttons from \"../components/clients/Buttons\";\nimport LoadingSpinner from \"../components/loadingSpinner\";\nimport EmailForm from \"../components/EmailForm\";\n\n//TODO: TOGGLOVAT EMAIL COMPONENTU -> po cancelu, odeslání\n\n\nconst Clients = ({ fieldData, clientData }: any) => {\n  const router = useRouter();\n\n  const [clients, setClients] = useReducer((state, action) => {\n    switch (action.type) {\n      case \"handleCheckedClients\":\n        return state.map(client =>\n          client._id === action.payload.id\n            ? \n                client.isChecked === false || client.isChecked === undefined\n                  ? {...client, isChecked: true }\n                  : {...client, isChecked: false }\n            : client\n        );\n      case \"addClient\":\n        return [...state, action.payload.newClient];\n      case \"deleteCheckedClients\":\n        return state.filter(client => !client.isChecked);\n      default:\n        return state;\n    }\n  }, clientData);\n  //TODO: SPOJIT DO JEDNOHO STATU\n  const [reverse, setReverseOrder] = useState(false);\n  const [sort, setSortBy] = useState(\"firstName\");\n  //\n  const [initialized, setInitialized] = useState(false);\n  const [isClientAdded, setIsClientAdded] = useState(false);\n\n  useEffect(() => {\n    const title = new stringMethods(router.pathname)\n      .removeSlash()\n      .firstCharUpperCase()\n      .addStringToEnd(globalVars.titleSubText)\n      .getString();\n    document.title = title;\n    setInitialized(true);\n  });\n\n  const h1 = new stringMethods(router.pathname)\n    .removeSlash()\n    .firstCharUpperCase()\n    .getString();\n\n  const sortBy = fieldName => {\n    setSortBy(fieldName);\n    !reverse ? setReverseOrder(true) : setReverseOrder(false);\n  };\n\n  const toggleIsClientAdded = () => {\n    isClientAdded ? setIsClientAdded(false) : setIsClientAdded(true);\n  };\n\n  const handleCheckbox = id => {\n    setClients({\n      type: \"handleCheckedClients\",\n      payload: { id }\n    });\n  };\n\n  const addNewClientToState = newClient => {\n    setClients({\n      type: \"addClient\",\n      payload: { newClient }\n    });\n  };\n\n  const checkedClients = () => (clients.filter(client => client.isChecked))\n\n  const deleteMultipleClients = async () => {\n    setClients({\n      type: \"deleteCheckedClients\"\n    });\n\n    await axios({\n      method: \"delete\",\n      data: checkedClients().map(e => e._id),\n      url: `${globalVars.serverURL}/clients/`,\n      responseType: \"json\"\n    });\n  };\n\n  return !initialized ? (\n    <LoadingSpinner/>\n  ) : (\n    <div>\n      <Header />\n      <h1>{h1}</h1>\n      <EmailForm to={checkedClients().map(e => e.email)} />\n      <CreateClient\n        fields={fieldData}\n        isClientAdded={isClientAdded}\n        toggleIsClientAdded={toggleIsClientAdded}\n        addNewClientToState={addNewClientToState}\n      />\n      <Buttons\n        disabled={!clients.some(client => client.isChecked)}\n        deleteMultipleClients={deleteMultipleClients}\n        toggleIsClientAdded={toggleIsClientAdded}\n        isClientAdded={isClientAdded}\n      />\n      <table>\n        <TableHead fields={fieldData} sortBy={sortBy} reverse={reverse} />\n        <tbody>\n          <TableBody\n            clients={clients}\n            fields={fieldData}\n            sort={sort}\n            reverse={reverse}\n            handleCheckbox={handleCheckbox}\n          />\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nClients.getInitialProps = async () => {\n  //fetch clients\n  const clientRes = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/clients`,\n    responseType: \"json\"\n  });\n  const clientData = await clientRes.data;\n\n  //fetch fields\n  const fieldRes = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/fields`,\n    responseType: \"json\"\n  });\n  const fieldData = await fieldRes.data;\n\n  return {\n    clientData,\n    fieldData\n  };\n};\n\nexport default Clients;\n"]},"metadata":{},"sourceType":"module"}