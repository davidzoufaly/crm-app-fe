{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/countContext.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState, createContext } from \"react\";\nimport axios from \"axios\";\nimport globalVars from \"../library/globalVariables\";\n\nvar CountContext = function CountContext(props) {\n  var _useState = useState({}),\n      count = _useState[0],\n      setCount = _useState[1];\n\n  var Context = createContext(count);\n  useEffect(function () {\n    var getCounts =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var resClientCount, clientData, resFieldsData, fieldData, resEmailsCount, emailsData;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios({\n                  method: \"GET\",\n                  url: \"\".concat(globalVars.serverURL, \"/clients/count\"),\n                  responseType: \"json\"\n                });\n\n              case 2:\n                resClientCount = _context.sent;\n                _context.next = 5;\n                return resClientCount.data;\n\n              case 5:\n                clientData = _context.sent;\n                _context.next = 8;\n                return axios({\n                  method: \"GET\",\n                  url: \"\".concat(globalVars.serverURL, \"/fields/count\"),\n                  responseType: \"json\"\n                });\n\n              case 8:\n                resFieldsData = _context.sent;\n                _context.next = 11;\n                return resFieldsData.data;\n\n              case 11:\n                fieldData = _context.sent;\n                _context.next = 14;\n                return axios({\n                  method: \"GET\",\n                  url: \"\".concat(globalVars.serverURL, \"/emails/count\"),\n                  responseType: \"json\"\n                });\n\n              case 14:\n                resEmailsCount = _context.sent;\n                _context.next = 17;\n                return resEmailsCount.data;\n\n              case 17:\n                emailsData = _context.sent;\n                setCount({\n                  clientData: clientData,\n                  fieldData: fieldData,\n                  emailsData: emailsData\n                });\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function getCounts() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    getCounts();\n  }, []);\n  return __jsx(Context.Provider, {\n    value: count,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default CountContext;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/countContext.tsx"],"names":["useEffect","useState","createContext","axios","globalVars","CountContext","props","count","setCount","Context","getCounts","method","url","serverURL","responseType","resClientCount","data","clientData","resFieldsData","fieldData","resEmailsCount","emailsData","children"],"mappings":";;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,aAA9B,QAAmD,OAAnD;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AAAA,kBACFL,QAAQ,CAAC,EAAD,CADN;AAAA,MACrBM,KADqB;AAAA,MACdC,QADc;;AAE5B,MAAMC,OAAO,GAAGP,aAAa,CAACK,KAAD,CAA7B;AAEAP,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAMU,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACeP,KAAK,CAAC;AAC/BQ,kBAAAA,MAAM,EAAE,KADuB;AAE/BC,kBAAAA,GAAG,YAAKR,UAAU,CAACS,SAAhB,mBAF4B;AAG/BC,kBAAAA,YAAY,EAAE;AAHiB,iBAAD,CADpB;;AAAA;AACRC,gBAAAA,cADQ;AAAA;AAAA,uBAMaA,cAAc,CAACC,IAN5B;;AAAA;AAMNC,gBAAAA,UANM;AAAA;AAAA,uBAQgBd,KAAK,CAAC;AAChCQ,kBAAAA,MAAM,EAAE,KADwB;AAEhCC,kBAAAA,GAAG,YAAKR,UAAU,CAACS,SAAhB,kBAF6B;AAGhCC,kBAAAA,YAAY,EAAE;AAHkB,iBAAD,CARrB;;AAAA;AAQNI,gBAAAA,aARM;AAAA;AAAA,uBAaYA,aAAa,CAACF,IAb1B;;AAAA;AAaNG,gBAAAA,SAbM;AAAA;AAAA,uBAeiBhB,KAAK,CAAC;AACjCQ,kBAAAA,MAAM,EAAE,KADyB;AAEjCC,kBAAAA,GAAG,YAAKR,UAAU,CAACS,SAAhB,kBAF8B;AAGjCC,kBAAAA,YAAY,EAAE;AAHmB,iBAAD,CAftB;;AAAA;AAeNM,gBAAAA,cAfM;AAAA;AAAA,uBAoBaA,cAAc,CAACJ,IApB5B;;AAAA;AAoBNK,gBAAAA,UApBM;AAsBZb,gBAAAA,QAAQ,CAAC;AACLS,kBAAAA,UAAU,EAAVA,UADK;AAELE,kBAAAA,SAAS,EAATA,SAFK;AAGLE,kBAAAA,UAAU,EAAVA;AAHK,iBAAD,CAAR;;AAtBY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAATX,SAAS;AAAA;AAAA;AAAA,OAAf;;AA4BAA,IAAAA,SAAS;AACZ,GA9BQ,EA8BN,EA9BM,CAAT;AAgCA,SACI,MAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAEH,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,KAAK,CAACgB,QADX,CADJ;AAKH,CAzCD;;AA2CA,eAAejB,YAAf","sourcesContent":["import { useEffect, useState, createContext } from \"react\";\n\nimport axios from \"axios\";\nimport globalVars from \"../library/globalVariables\";\n\nconst CountContext = (props) => {\n    const [count, setCount] = useState({});\n    const Context = createContext(count);\n\n    useEffect(() => {\n        const getCounts = async () => {\n            const resClientCount = await axios({\n                method: \"GET\",\n                url: `${globalVars.serverURL}/clients/count`,\n                responseType: \"json\"\n              });\n              const clientData = await resClientCount.data;\n            \n              const resFieldsData = await axios({\n                method: \"GET\",\n                url: `${globalVars.serverURL}/fields/count`,\n                responseType: \"json\"\n              });\n              const fieldData = await resFieldsData.data;\n            \n              const resEmailsCount = await axios({\n                method: \"GET\",\n                url: `${globalVars.serverURL}/emails/count`,\n                responseType: \"json\"\n              })\n              const emailsData = await resEmailsCount.data;\n\n              setCount({\n                  clientData,\n                  fieldData,\n                  emailsData\n              })\n        } \n        getCounts();\n    }, [])\n\n    return (\n        <Context.Provider value={count}>\n            {props.children}\n        </Context.Provider>\n    )\n}\n\nexport default CountContext;"]},"metadata":{},"sourceType":"module"}