{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/pages/clients.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport Header from \"../components/Header\";\nimport TableBody from \"../components/clientTable/TableBody\";\nimport stringMethods from \"../library/stringMethods\";\nimport globalVars from \"../library/globalVariables\";\nimport TableHead from \"../components/clientTable/TableHead\";\nimport CreateClient from \"../components/CreateClient\";\nimport Button from \"@material-ui/core/Button\";\n\nconst Clients = ({\n  fieldData,\n  clientData\n}) => {\n  const router = useRouter();\n  const {\n    0: clients,\n    1: setClients\n  } = useState(clientData); //TODO: SPOJIT DO JEDNOHO STATU\n\n  const {\n    0: reverse,\n    1: setReverseOrder\n  } = useState(false);\n  const {\n    0: sort,\n    1: setSortBy\n  } = useState(\"firstName\"); //\n\n  const {\n    0: initialized,\n    1: setInitialized\n  } = useState(false);\n  const {\n    0: isClientAdded,\n    1: setIsClientAdded\n  } = useState(false);\n  useEffect(() => {\n    const title = new stringMethods(router.pathname).removeSlash().firstCharUpperCase().addStringToEnd(globalVars.titleSubText).getString();\n    document.title = title;\n    setInitialized(true);\n  });\n  const h1 = new stringMethods(router.pathname).removeSlash().firstCharUpperCase().getString();\n\n  const refreshList = async () => {\n    //get data from DB after change\n    const res = await axios({\n      method: \"get\",\n      url: `${globalVars.serverURL}/clients`,\n      responseType: \"json\"\n    });\n    const data = await res.data;\n    setClients(data);\n  };\n\n  const sortBy = fieldName => {\n    setSortBy(fieldName);\n    !reverse ? setReverseOrder(true) : setReverseOrder(false);\n  };\n\n  const toggleIsClientAdded = () => {\n    isClientAdded ? setIsClientAdded(false) : setIsClientAdded(true);\n  };\n\n  const handleCheckbox = id => {\n    setClients(clients.map(client => {\n      if (client._id === id) {\n        return client.isChecked === false || client.isChecked === undefined ? _objectSpread({}, client, {\n          isChecked: true\n        }) : _objectSpread({}, client, {\n          isChecked: false\n        });\n      } else {\n        return client;\n      }\n    }));\n  };\n\n  const deleteMultipleClients = async () => {\n    const clientsToDelete = [];\n    clients.map(client => client.isChecked ? clientsToDelete.push(client._id) : null);\n    const resDelete = await axios({\n      method: \"delete\",\n      data: clientsToDelete,\n      url: `${globalVars.serverURL}/clients/`,\n      responseType: \"json\"\n    });\n    const dataDelete = await resDelete.data;\n    dataDelete.msg === \"Success\" ? refreshList() : console.error();\n    ;\n  };\n\n  if (!initialized) {\n    return \"Loading\";\n  }\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, h1), __jsx(CreateClient, {\n    fields: fieldData,\n    isClientAdded: isClientAdded,\n    toggleIsClientAdded: toggleIsClientAdded,\n    refreshList: refreshList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: () => setIsClientAdded(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Add new client\"), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    disabled: true,\n    onClick: deleteMultipleClients,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Delete\"), __jsx(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, __jsx(TableHead, {\n    fields: fieldData,\n    sortBy: sortBy,\n    reverse: reverse,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), __jsx(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, __jsx(TableBody, {\n    clients: clients,\n    fields: fieldData,\n    sort: sort,\n    reverse: reverse,\n    handleCheckbox: handleCheckbox,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }))));\n};\n\nClients.getInitialProps = async () => {\n  const clientRes = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/clients`,\n    responseType: \"json\"\n  });\n  const clientData = await clientRes.data;\n  const fieldRes = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/fields`,\n    responseType: \"json\"\n  });\n  const fieldData = await fieldRes.data;\n  return {\n    clientData,\n    fieldData\n  };\n};\n\nexport default Clients;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/pages/clients.tsx"],"names":["useState","useEffect","useRouter","axios","Header","TableBody","stringMethods","globalVars","TableHead","CreateClient","Button","Clients","fieldData","clientData","router","clients","setClients","reverse","setReverseOrder","sort","setSortBy","initialized","setInitialized","isClientAdded","setIsClientAdded","title","pathname","removeSlash","firstCharUpperCase","addStringToEnd","titleSubText","getString","document","h1","refreshList","res","method","url","serverURL","responseType","data","sortBy","fieldName","toggleIsClientAdded","handleCheckbox","id","map","client","_id","isChecked","undefined","deleteMultipleClients","clientsToDelete","push","resDelete","dataDelete","msg","console","error","getInitialProps","clientRes","fieldRes"],"mappings":";;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,qCAAtB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAOC,SAAP,MAAsB,qCAAtB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAAoC;AAClD,QAAMC,MAAM,GAAGZ,SAAS,EAAxB;AAEA,QAAM;AAAA,OAACa,OAAD;AAAA,OAAUC;AAAV,MAAwBhB,QAAQ,CAACa,UAAD,CAAtC,CAHkD,CAIlD;;AACA,QAAM;AAAA,OAACI,OAAD;AAAA,OAAUC;AAAV,MAA6BlB,QAAQ,CAAC,KAAD,CAA3C;AACA,QAAM;AAAA,OAACmB,IAAD;AAAA,OAAOC;AAAP,MAAoBpB,QAAQ,CAAC,WAAD,CAAlC,CANkD,CAOlD;;AACA,QAAM;AAAA,OAACqB,WAAD;AAAA,OAAcC;AAAd,MAAgCtB,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM;AAAA,OAACuB,aAAD;AAAA,OAAgBC;AAAhB,MAAoCxB,QAAQ,CAAC,KAAD,CAAlD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMwB,KAAK,GAAG,IAAInB,aAAJ,CAAkBQ,MAAM,CAACY,QAAzB,EACXC,WADW,GAEXC,kBAFW,GAGXC,cAHW,CAGItB,UAAU,CAACuB,YAHf,EAIXC,SAJW,EAAd;AAKAC,IAAAA,QAAQ,CAACP,KAAT,GAAiBA,KAAjB;AACAH,IAAAA,cAAc,CAAC,IAAD,CAAd;AACD,GARQ,CAAT;AAUA,QAAMW,EAAE,GAAG,IAAI3B,aAAJ,CAAkBQ,MAAM,CAACY,QAAzB,EACVC,WADU,GAEVC,kBAFU,GAGVG,SAHU,EAAX;;AAKA,QAAMG,WAAW,GAAG,YAAY;AAC9B;AACA,UAAMC,GAAG,GAAG,MAAMhC,KAAK,CAAC;AACtBiC,MAAAA,MAAM,EAAE,KADc;AAEtBC,MAAAA,GAAG,EAAG,GAAE9B,UAAU,CAAC+B,SAAU,UAFP;AAGtBC,MAAAA,YAAY,EAAE;AAHQ,KAAD,CAAvB;AAKA,UAAMC,IAAI,GAAG,MAAML,GAAG,CAACK,IAAvB;AACAxB,IAAAA,UAAU,CAACwB,IAAD,CAAV;AACD,GATD;;AAWA,QAAMC,MAAM,GAAIC,SAAD,IAAe;AAC5BtB,IAAAA,SAAS,CAACsB,SAAD,CAAT;AACA,KAACzB,OAAD,GAAWC,eAAe,CAAC,IAAD,CAA1B,GAAmCA,eAAe,CAAC,KAAD,CAAlD;AACD,GAHD;;AAKA,QAAMyB,mBAAmB,GAAG,MAAM;AAChCpB,IAAAA,aAAa,GAAGC,gBAAgB,CAAC,KAAD,CAAnB,GAA6BA,gBAAgB,CAAC,IAAD,CAA1D;AACD,GAFD;;AAIA,QAAMoB,cAAc,GAAIC,EAAD,IAAQ;AAC7B7B,IAAAA,UAAU,CAACD,OAAO,CAAC+B,GAAR,CAAYC,MAAM,IAAI;AAC/B,UAAGA,MAAM,CAACC,GAAP,KAAeH,EAAlB,EAAsB;AACpB,eAAOE,MAAM,CAACE,SAAP,KAAqB,KAArB,IAA8BF,MAAM,CAACE,SAAP,KAAqBC,SAAnD,qBAAmEH,MAAnE;AAA2EE,UAAAA,SAAS,EAAE;AAAtF,+BAAkGF,MAAlG;AAA0GE,UAAAA,SAAS,EAAE;AAArH,UAAP;AACD,OAFD,MAEO;AACL,eAAOF,MAAP;AACD;AACF,KANU,CAAD,CAAV;AAOG,GARL;;AAUA,QAAMI,qBAAqB,GAAG,YAAY;AACxC,UAAMC,eAAe,GAAG,EAAxB;AACArC,IAAAA,OAAO,CAAC+B,GAAR,CAAYC,MAAM,IAAIA,MAAM,CAACE,SAAP,GAAmBG,eAAe,CAACC,IAAhB,CAAqBN,MAAM,CAACC,GAA5B,CAAnB,GAAsD,IAA5E;AACA,UAAMM,SAAS,GAAG,MAAMnD,KAAK,CAAC;AAC5BiC,MAAAA,MAAM,EAAE,QADoB;AAE5BI,MAAAA,IAAI,EAAEY,eAFsB;AAG5Bf,MAAAA,GAAG,EAAG,GAAE9B,UAAU,CAAC+B,SAAU,WAHD;AAI5BC,MAAAA,YAAY,EAAE;AAJc,KAAD,CAA7B;AAMA,UAAMgB,UAAU,GAAG,MAAMD,SAAS,CAACd,IAAnC;AACAe,IAAAA,UAAU,CAACC,GAAX,KAAmB,SAAnB,GAA+BtB,WAAW,EAA1C,GAA+CuB,OAAO,CAACC,KAAR,EAA/C;AACA;AACD,GAZD;;AAcA,MAAI,CAACrC,WAAL,EAAkB;AAChB,WAAO,SAAP;AACD;;AACD,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKY,EAAL,CAFF,EAGE,MAAC,YAAD;AAAc,IAAA,MAAM,EAAErB,SAAtB;AAAiC,IAAA,aAAa,EAAEW,aAAhD;AAA+D,IAAA,mBAAmB,EAAEoB,mBAApF;AAAyG,IAAA,WAAW,EAAET,WAAtH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIE,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,WAAhB;AAA4B,IAAA,KAAK,EAAC,SAAlC;AAA4C,IAAA,OAAO,EAAE,MAAMV,gBAAgB,CAAC,IAAD,CAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJF,EAOE,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,WAAhB;AAA4B,IAAA,KAAK,EAAC,SAAlC;AAA4C,IAAA,QAAQ,MAApD;AAAqD,IAAA,OAAO,EAAE2B,qBAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AAAW,IAAA,MAAM,EAAEvC,SAAnB;AAA8B,IAAA,MAAM,EAAE6B,MAAtC;AAA8C,IAAA,OAAO,EAAExB,OAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,SAAD;AAAW,IAAA,OAAO,EAAEF,OAApB;AAA6B,IAAA,MAAM,EAAEH,SAArC;AAAgD,IAAA,IAAI,EAAEO,IAAtD;AAA4D,IAAA,OAAO,EAAEF,OAArE;AAA8E,IAAA,cAAc,EAAE2B,cAA9F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CAFJ,CAVF,CADF;AAoBD,CA7FD;;AA+FAjC,OAAO,CAACgD,eAAR,GAA0B,YAAY;AACpC,QAAMC,SAAS,GAAG,MAAMzD,KAAK,CAAC;AAC5BiC,IAAAA,MAAM,EAAE,KADoB;AAE5BC,IAAAA,GAAG,EAAG,GAAE9B,UAAU,CAAC+B,SAAU,UAFD;AAG5BC,IAAAA,YAAY,EAAE;AAHc,GAAD,CAA7B;AAKA,QAAM1B,UAAU,GAAG,MAAM+C,SAAS,CAACpB,IAAnC;AAEA,QAAMqB,QAAQ,GAAG,MAAM1D,KAAK,CAAC;AAC3BiC,IAAAA,MAAM,EAAE,KADmB;AAE3BC,IAAAA,GAAG,EAAG,GAAE9B,UAAU,CAAC+B,SAAU,SAFF;AAG3BC,IAAAA,YAAY,EAAE;AAHa,GAAD,CAA5B;AAKA,QAAM3B,SAAS,GAAG,MAAMiD,QAAQ,CAACrB,IAAjC;AAEA,SAAO;AACL3B,IAAAA,UADK;AACOD,IAAAA;AADP,GAAP;AAGD,CAlBD;;AAoBA,eAAeD,OAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport Header from \"../components/Header\";\nimport TableBody from \"../components/clientTable/TableBody\";\nimport stringMethods from \"../library/stringMethods\";\nimport globalVars from \"../library/globalVariables\";\nimport TableHead from \"../components/clientTable/TableHead\";\nimport CreateClient from \"../components/CreateClient\";\nimport Button from \"@material-ui/core/Button\";\n\nconst Clients = ({ fieldData, clientData }: any) => {\n  const router = useRouter();\n\n  const [clients, setClients] = useState(clientData);\n  //TODO: SPOJIT DO JEDNOHO STATU\n  const [reverse, setReverseOrder] = useState(false);\n  const [sort, setSortBy] = useState(\"firstName\");\n  //\n  const [initialized, setInitialized] = useState(false);\n  const [isClientAdded, setIsClientAdded] = useState(false);\n\n  useEffect(() => {\n    const title = new stringMethods(router.pathname)\n      .removeSlash()\n      .firstCharUpperCase()\n      .addStringToEnd(globalVars.titleSubText)\n      .getString();\n    document.title = title;\n    setInitialized(true);\n  });\n\n  const h1 = new stringMethods(router.pathname)\n  .removeSlash()\n  .firstCharUpperCase()\n  .getString()\n\n  const refreshList = async () => {\n    //get data from DB after change\n    const res = await axios({\n      method: \"get\",\n      url: `${globalVars.serverURL}/clients`,\n      responseType: \"json\"\n    });\n    const data = await res.data;\n    setClients(data);\n  }\n\n  const sortBy = (fieldName) => {\n    setSortBy(fieldName);\n    !reverse ? setReverseOrder(true) : setReverseOrder(false);\n  }\n\n  const toggleIsClientAdded = () => {\n    isClientAdded ? setIsClientAdded(false) : setIsClientAdded(true);\n  }\n\n  const handleCheckbox = (id) => {\n    setClients(clients.map(client => {\n      if(client._id === id) {\n        return client.isChecked === false || client.isChecked === undefined ? {...client, isChecked: true} : {...client, isChecked: false}\n      } else {\n        return client\n      }\n    }\n    ))}\n\n  const deleteMultipleClients = async () => {\n    const clientsToDelete = [];\n    clients.map(client => client.isChecked ? clientsToDelete.push(client._id) : null);\n    const resDelete = await axios({\n      method: \"delete\",\n      data: clientsToDelete,\n      url: `${globalVars.serverURL}/clients/`,\n      responseType: \"json\"\n    })\n    const dataDelete = await resDelete.data;\n    dataDelete.msg === \"Success\" ? refreshList() : console.error();\n    ;\n  }\n\n  if (!initialized) {\n    return \"Loading\";\n  }\n  return (\n    <div>\n      <Header />\n      <h1>{h1}</h1>\n      <CreateClient fields={fieldData} isClientAdded={isClientAdded} toggleIsClientAdded={toggleIsClientAdded} refreshList={refreshList} />\n      <Button variant=\"contained\" color=\"primary\" onClick={() => setIsClientAdded(true)}>\n      Add new client\n      </Button>\n      <Button variant=\"contained\" color=\"primary\" disabled onClick={deleteMultipleClients}>\n      Delete\n      </Button>\n      <table>\n          <TableHead fields={fieldData} sortBy={sortBy} reverse={reverse}/>\n          <tbody>\n          <TableBody clients={clients} fields={fieldData} sort={sort} reverse={reverse} handleCheckbox={handleCheckbox}/>\n          </tbody>\n      </table>\n\n    </div>\n  );\n};\n\nClients.getInitialProps = async () => {\n  const clientRes = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/clients`,\n    responseType: \"json\"\n  });\n  const clientData = await clientRes.data;\n\n  const fieldRes = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/fields`,\n    responseType: \"json\"\n  })\n  const fieldData = await fieldRes.data\n\n  return {\n    clientData, fieldData\n  };\n};\n\nexport default Clients;\n"]},"metadata":{},"sourceType":"module"}