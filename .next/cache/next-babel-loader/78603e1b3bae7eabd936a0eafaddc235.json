{"ast":null,"code":"var _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/clients/TableBody.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from \"next/link\";\nimport uniqid from \"uniqid\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\"; //TODO Filtrují se i polé které neexistujou na straně body\n\nconst TableBody = ({\n  clients,\n  reverse,\n  sort,\n  fields,\n  handleCheckbox\n}) => {\n  if (fields.some(e => e.fieldName === sort && e.fieldType === \"number\")) {\n    if (reverse) {\n      clients.sort((a, b) => b[sort] - a[sort]);\n    } else {\n      clients.sort((a, b) => a[sort] - b[sort]);\n    }\n  } else {\n    if (reverse) {\n      clients.sort((a, b) => b[sort] > a[sort] ? -1 : 1);\n    } else {\n      clients.sort((a, b) => b[sort] < a[sort] ? -1 : 1);\n    }\n  }\n\n  let fieldNames = [];\n  fields.forEach(e => fieldNames.push(e.fieldName, e.fieldType));\n  const tableClients = clients.map(client => {\n    const tableItem = () => {\n      let items = fieldNames.map((e, i) => e[i] = null);\n\n      for (let key in client) {\n        //show only clients data with existing fields\n        if (client[key] !== client._id && fieldNames.includes(key)) {\n          items[fieldNames.indexOf(key)] = __jsx(TableCell, {\n            key: uniqid(),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 49\n            },\n            __self: this\n          }, client[key]);\n        }\n      }\n\n      items = items.map(e => e === null ? __jsx(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }) : e); // add checkbox at first position\n\n      items.unshift(__jsx(TableCell, {\n        padding: \"checkbox\",\n        key: uniqid(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, __jsx(\"input\", {\n        type: \"checkbox\",\n        checked: client.isChecked === undefined ? false : client.isChecked,\n        onChange: () => handleCheckbox(client._id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }))); // add profile link at last position\n\n      items.push(__jsx(TableCell, {\n        key: uniqid(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, __jsx(Link, {\n        href: \"/clients/[id]\",\n        as: `/clients/${client._id}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, __jsx(\"a\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Go\"))));\n      return items;\n    };\n\n    return __jsx(TableRow, {\n      key: client._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, tableItem());\n  });\n  return tableClients;\n};\n\nexport default TableBody;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/clients/TableBody.tsx"],"names":["Link","uniqid","TableCell","TableRow","TableBody","clients","reverse","sort","fields","handleCheckbox","some","e","fieldName","fieldType","a","b","fieldNames","forEach","push","tableClients","map","client","tableItem","items","i","key","_id","includes","indexOf","unshift","isChecked","undefined"],"mappings":"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","sourcesContent":["import Link from \"next/link\";\nimport uniqid from \"uniqid\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\n//TODO Filtrují se i polé které neexistujou na straně body\n\ninterface IProps {\n  clients: any;\n  reverse: boolean;\n  sort: string;\n  fields: any;\n  handleCheckbox: any;\n}\n\nconst TableBody = ({\n  clients,\n  reverse,\n  sort,\n  fields,\n  handleCheckbox\n}: IProps) => {\n  if (fields.some(e => e.fieldName === sort && e.fieldType === \"number\")) {\n    if (reverse) {\n      clients.sort((a: any, b: any) => b[sort] - a[sort]);\n    } else {\n      clients.sort((a: any, b: any) => a[sort] - b[sort]);\n    }\n  } else {\n    if (reverse) {\n      clients.sort((a: any, b: any) => (b[sort] > a[sort] ? -1 : 1));\n    } else {\n      clients.sort((a: any, b: any) => (b[sort] < a[sort] ? -1 : 1));\n    }\n  }\n\n  let fieldNames = [];\n  fields.forEach((e: any) => fieldNames.push(e.fieldName, e.fieldType));\n\n  const tableClients = clients.map((client: any) => {\n    const tableItem = () => {\n\n      let items = fieldNames.map((e, i) => e[i] = null);\n\n      for (let key in client) {\n        //show only clients data with existing fields\n        if (client[key] !== client._id && fieldNames.includes(key)) {\n          items[fieldNames.indexOf(key)] = (\n            <TableCell key={uniqid()}>{client[key]}</TableCell>\n          );\n        }\n      }\n\n      items = items.map(e => e === null ? <td></td> : e);\n\n      // add checkbox at first position\n      items.unshift(\n        <TableCell padding=\"checkbox\" key={uniqid()}>\n          <input\n            type=\"checkbox\"\n            checked={client.isChecked === undefined ? false : client.isChecked}\n            onChange={() => handleCheckbox(client._id)}\n          />\n        </TableCell>\n      );\n      // add profile link at last position\n      items.push(\n        <TableCell key={uniqid()}>\n          <Link href=\"/clients/[id]\" as={`/clients/${client._id}`}>\n            <a>Go</a>\n          </Link>\n        </TableCell>\n      );\n      return items;\n    };\n\n    return <TableRow key={client._id}>{tableItem()}</TableRow>;\n  });\n  return tableClients;\n};\n\nexport default TableBody;\n"]},"metadata":{},"sourceType":"module"}