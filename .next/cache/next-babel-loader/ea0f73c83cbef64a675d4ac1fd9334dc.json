{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/AddOrEditField.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport SelectFieldOptions from \"../components/SelectFieldOptions\";\nimport uniqid from \"uniqid\";\nimport axios from \"axios\";\nimport globalVars from \"../library/globalVariables\";\n\nconst AddOrEditField = ({\n  changeDisplayComponent,\n  refreshList\n}) => {\n  const {\n    0: updatedField,\n    1: setUpdatedField\n  } = useState({\n    fieldName: \"\",\n    fieldType: \"text\",\n    fieldPermanent: false,\n    fieldOptions: []\n  });\n\n  const saveField = async () => {\n    const res = await axios({\n      method: \"post\",\n      url: `${globalVars.serverURL}/fields/`,\n      data: updatedField,\n      responseType: \"json\"\n    });\n    const data = await res.data;\n    data.msg === \"Success\" ? changeDisplayComponent() : null;\n    console.log(fieldObject);\n    refreshList();\n  };\n\n  const onNameChange = event => {\n    setUpdatedField(_objectSpread({}, updatedField, {\n      fieldName: event.target.value\n    }));\n    console.log(updatedField);\n  };\n\n  const onSelectChange = event => {\n    setUpdatedField(_objectSpread({}, updatedField, {\n      fieldType: event.target.options[event.target.options.selectedIndex].value\n    }));\n  };\n\n  const handleOptionSpawn = () => {\n    setUpdatedField(_objectSpread({}, updatedField, {\n      fieldOptions: [...updatedField.fieldOptions, {\n        id: uniqid(),\n        value: \"\"\n      }]\n    }));\n  };\n\n  const onChange = event => {\n    setUpdatedField(_objectSpread({}, updatedField, {\n      fieldOptions: updatedField.fieldOptions.filter(e => event.target.id === e.id ? e.value = event.target.value : e)\n    }));\n  };\n\n  const onDelete = event => {\n    setUpdatedField(_objectSpread({}, updatedField, {\n      fieldOptions: updatedField.fieldOptions.filter(e => event.target.id !== e.id ? e : null)\n    }));\n  };\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: \"field-name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Field name\"), __jsx(\"input\", {\n    type: \"text\",\n    id: \"field-name\",\n    defaultValue: updatedField.fieldName,\n    onChange: onNameChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), __jsx(\"label\", {\n    htmlFor: \"field-type\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"Field type\"), __jsx(\"select\", {\n    id: \"field-type\",\n    onChange: onSelectChange,\n    defaultValue: updatedField.fieldType,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, __jsx(\"option\", {\n    value: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Text\"), __jsx(\"option\", {\n    value: \"select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Select\"), __jsx(\"option\", {\n    value: \"number\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Number\")), __jsx(SelectFieldOptions, {\n    options: updatedField.fieldOptions,\n    onChange: onChange,\n    onDelete: onDelete,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), updatedField.fieldType === \"select\" ? __jsx(\"button\", {\n    onClick: handleOptionSpawn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"New\") : null, __jsx(\"button\", {\n    onClick: saveField,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Save\"), __jsx(\"button\", {\n    onClick: changeDisplayComponent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Cancel\"));\n};\n\nexport default AddOrEditField;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/AddOrEditField.tsx"],"names":["useState","SelectFieldOptions","uniqid","axios","globalVars","AddOrEditField","changeDisplayComponent","refreshList","updatedField","setUpdatedField","fieldName","fieldType","fieldPermanent","fieldOptions","saveField","res","method","url","serverURL","data","responseType","msg","console","log","fieldObject","onNameChange","event","target","value","onSelectChange","options","selectedIndex","handleOptionSpawn","id","onChange","filter","e","onDelete"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport SelectFieldOptions from \"../components/SelectFieldOptions\";\nimport uniqid from \"uniqid\";\nimport axios from \"axios\";\nimport globalVars from \"../library/globalVariables\";\n\nconst AddOrEditField = ({ changeDisplayComponent, refreshList }: any) => {\n  const [updatedField, setUpdatedField] = useState({\n    fieldName: \"\",\n    fieldType: \"text\",\n    fieldPermanent: false,\n    fieldOptions: []\n  });\n\n  const saveField = async () => {\n    const res = await axios({\n      method: \"post\",\n      url: `${globalVars.serverURL}/fields/`,\n      data: updatedField,\n      responseType: \"json\"\n    });\n    const data = await res.data;\n    data.msg === \"Success\" ? changeDisplayComponent() : null;\n    console.log(fieldObject);\n    refreshList();\n  };\n\n  const onNameChange = (event: any) => {\n    setUpdatedField({ ...updatedField, fieldName: event.target.value });\n    console.log(updatedField);\n  };\n\n  const onSelectChange = (event: any) => {\n    setUpdatedField({\n      ...updatedField,\n      fieldType: event.target.options[event.target.options.selectedIndex].value\n    });\n  };\n\n  const handleOptionSpawn = () => {\n    setUpdatedField({\n      ...updatedField,\n      fieldOptions: [...updatedField.fieldOptions, { id: uniqid(), value: \"\" }]\n    });\n  };\n\n  const onChange = (event: any) => {\n    setUpdatedField({\n      ...updatedField,\n      fieldOptions: updatedField.fieldOptions.filter((e: any) =>\n        event.target.id === e.id ? (e.value = event.target.value) : e\n      )\n    });\n  };\n\n  const onDelete = (event: any) => {\n    setUpdatedField({\n      ...updatedField,\n      fieldOptions: updatedField.fieldOptions.filter((e: any) =>\n        event.target.id !== e.id ? e : null\n      )\n    });\n  };\n\n  return (\n    <div>\n      <label htmlFor=\"field-name\">Field name</label>\n      <input\n        type=\"text\"\n        id=\"field-name\"\n        defaultValue={updatedField.fieldName}\n        onChange={onNameChange}\n      />\n      <label htmlFor=\"field-type\">Field type</label>\n      <select\n        id=\"field-type\"\n        onChange={onSelectChange}\n        defaultValue={updatedField.fieldType}\n      >\n        <option value=\"text\">Text</option>\n        <option value=\"select\">Select</option>\n        <option value=\"number\">Number</option>\n      </select>\n      <SelectFieldOptions\n        options={updatedField.fieldOptions}\n        onChange={onChange}\n        onDelete={onDelete}\n      />\n      {updatedField.fieldType === \"select\" ? (\n        <button onClick={handleOptionSpawn}>New</button>\n      ) : null}\n      <button onClick={saveField}>Save</button>\n      <button onClick={changeDisplayComponent}>Cancel</button>\n    </div>\n  );\n};\n\nexport default AddOrEditField;\n"]},"metadata":{},"sourceType":"module"}