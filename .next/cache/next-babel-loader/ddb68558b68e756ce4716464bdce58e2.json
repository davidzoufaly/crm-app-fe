{"ast":null,"code":"var _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/settings/webform/WebFormOptionSelect.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport WebFormOptions from \"./WebFormOptions\";\n\nvar webFormOptionSelect = function webFormOptionSelect(_ref) {\n  var optionSelect = _ref.optionSelect,\n      webFields = _ref.webFields,\n      addVisibleSelect = _ref.addVisibleSelect;\n\n  var _useState = useState(false),\n      showOptions = _useState[0],\n      setShowOptions = _useState[1];\n\n  var showOptionsOnClick = function showOptionsOnClick() {\n    setShowOptions(true);\n  };\n\n  var insertIntoForm = webFields.map(function (field) {\n    return optionSelect !== null ? optionSelect[0].fieldName === field.fieldName ? __jsx(\"div\", {\n      key: field.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"Should be \", __jsx(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, field.fieldName), \" visible in form?\"), __jsx(\"button\", {\n      id: field.fieldName,\n      onClick: addVisibleSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, \"YES\"), __jsx(\"button\", {\n      onClick: showOptionsOnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, \"NO\")) : null : null;\n  });\n  return __jsx(React.Fragment, null, showOptions ? __jsx(WebFormOptions, {\n    optionSelect: optionSelect,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }) : null, insertIntoForm);\n};\n\nexport default webFormOptionSelect;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/settings/webform/WebFormOptionSelect.tsx"],"names":["useState","WebFormOptions","webFormOptionSelect","optionSelect","webFields","addVisibleSelect","showOptions","setShowOptions","showOptionsOnClick","insertIntoForm","map","field","fieldName","id"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,OAAmD;AAAA,MAAhDC,YAAgD,QAAhDA,YAAgD;AAAA,MAAlCC,SAAkC,QAAlCA,SAAkC;AAAA,MAAvBC,gBAAuB,QAAvBA,gBAAuB;;AAAA,kBACvCL,QAAQ,CAAC,KAAD,CAD+B;AAAA,MACtEM,WADsE;AAAA,MACzDC,cADyD;;AAG7E,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC/BD,IAAAA,cAAc,CAAC,IAAD,CAAd;AACD,GAFD;;AAIA,MAAME,cAAc,GAAGL,SAAS,CAACM,GAAV,CAAc,UAAAC,KAAK;AAAA,WACxCR,YAAY,KAAK,IAAjB,GACEA,YAAY,CAAC,CAAD,CAAZ,CAAgBS,SAAhB,KAA8BD,KAAK,CAACC,SAApC,GACE;AAAK,MAAA,GAAG,EAAED,KAAK,CAACE,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAASF,KAAK,CAACC,SAAf,CADZ,sBADF,EAIE;AAAQ,MAAA,EAAE,EAAED,KAAK,CAACC,SAAlB;AAA6B,MAAA,OAAO,EAAEP,gBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAJF,EAOE;AAAQ,MAAA,OAAO,EAAEG,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,CADF,GAUI,IAXN,GAYI,IAboC;AAAA,GAAnB,CAAvB;AAgBA,SACE,4BACGF,WAAW,GAAG,MAAC,cAAD;AAAgB,IAAA,YAAY,EAAEH,YAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAoD,IADlE,EAEGM,cAFH,CADF;AAMD,CA7BD;;AA+BA,eAAeP,mBAAf","sourcesContent":["import { useState } from \"react\";\nimport WebFormOptions from \"./WebFormOptions\";\n\nconst webFormOptionSelect = ({ optionSelect, webFields, addVisibleSelect }) => {\n  const [showOptions, setShowOptions] = useState(false);\n\n  const showOptionsOnClick = () => {\n    setShowOptions(true);\n  };\n\n  const insertIntoForm = webFields.map(field =>\n    optionSelect !== null ? (\n      optionSelect[0].fieldName === field.fieldName ? (\n        <div key={field.id}>\n          <p>\n            Should be <strong>{field.fieldName}</strong> visible in form?\n          </p>\n          <button id={field.fieldName} onClick={addVisibleSelect}>\n            YES\n          </button>\n          <button onClick={showOptionsOnClick}>NO</button>\n        </div>\n      ) : null\n    ) : null\n  );\n\n  return (\n    <>\n      {showOptions ? <WebFormOptions optionSelect={optionSelect} /> : null}\n      {insertIntoForm}\n    </>\n  );\n};\n\nexport default webFormOptionSelect;\n"]},"metadata":{},"sourceType":"module"}