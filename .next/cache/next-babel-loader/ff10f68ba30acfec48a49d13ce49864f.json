{"ast":null,"code":"var _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/pages/emails.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState, useContext } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport generateUniqueId from \"generate-unique-id\";\nimport Header from \"../components/Header\";\nimport LoadingSpinner from \"../components/LoadingSpinner\";\nimport CountContext from \"../components/CountContext\";\nimport UserContext from \"../components/UserContext\";\nimport stringMethods from \"../library/stringMethods\";\nimport globalVars from \"../library/globalVariables\";\nimport languages from \"../library/languages\";\n\nconst Emails = props => {\n  const {\n    emailsCounter\n  } = useContext(CountContext);\n  const {\n    0: initialized,\n    1: setInitialized\n  } = useState(false);\n  const router = useRouter();\n  const user = useContext(UserContext);\n  useEffect(() => {\n    const title = new stringMethods(router.pathname).removeSlash().firstCharUpperCase().addStringToEnd(globalVars.titleSubText).getString();\n    document.title = title;\n    setInitialized(true);\n    user.checkUser();\n  }, [router]);\n  const tableBody = props.data.map(email => __jsx(\"tr\", {\n    key: generateUniqueId(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, __jsx(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, email.date), __jsx(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, email.to.map(e => __jsx(\"p\", {\n    key: generateUniqueId(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, e))), __jsx(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, email.subject), __jsx(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, email.message.length > 50 ? `${email.message.slice(0, 50)}...` : email.message))).reverse();\n  const h1 = new stringMethods(router.pathname).removeSlash().firstCharUpperCase().getString();\n  return !user.user.signedIn && !initialized ? __jsx(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }) : __jsx(React.Fragment, null, __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, h1), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, emailsCounter), __jsx(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, __jsx(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, __jsx(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, __jsx(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, languages.en.dateAndTime), __jsx(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, languages.en.to), __jsx(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, languages.en.subject), __jsx(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, languages.en.message))), __jsx(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, tableBody)));\n};\n\nEmails.getInitialProps = async context => {\n  const res = await axios({\n    method: \"get\",\n    params: {\n      key: context.query.Api_KEY\n    },\n    url: `${globalVars.serverURL}/emails`,\n    responseType: \"json\"\n  });\n  const data = await res.data;\n  return {\n    data\n  };\n};\n\nexport default Emails;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/pages/emails.tsx"],"names":["useEffect","useState","useContext","useRouter","axios","generateUniqueId","Header","LoadingSpinner","CountContext","UserContext","stringMethods","globalVars","languages","Emails","props","emailsCounter","initialized","setInitialized","router","user","title","pathname","removeSlash","firstCharUpperCase","addStringToEnd","titleSubText","getString","document","checkUser","tableBody","data","map","email","date","to","e","subject","message","length","slice","reverse","h1","signedIn","en","dateAndTime","getInitialProps","context","res","method","params","key","query","Api_KEY","url","serverURL","responseType"],"mappings":"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","sourcesContent":["import { useEffect, useState, useContext } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport generateUniqueId from \"generate-unique-id\";\nimport Header from \"../components/Header\";\nimport LoadingSpinner from \"../components/LoadingSpinner\";\nimport CountContext from \"../components/CountContext\";\nimport UserContext from \"../components/UserContext\";\nimport stringMethods from \"../library/stringMethods\";\nimport globalVars from \"../library/globalVariables\";\nimport languages from \"../library/languages\";\n\nconst Emails = props => {\n  const { emailsCounter } = useContext(CountContext);\n  const [initialized, setInitialized] = useState(false);\n  const router = useRouter();\n  const user = useContext(UserContext);\n\n  useEffect(() => {\n    const title = new stringMethods(router.pathname)\n      .removeSlash()\n      .firstCharUpperCase()\n      .addStringToEnd(globalVars.titleSubText)\n      .getString();\n    document.title = title;\n    setInitialized(true);\n    user.checkUser();\n  }, [router]);\n\n  const tableBody = props.data\n    .map(email => (\n      <tr key={generateUniqueId()}>\n        <td>{email.date}</td>\n        <td>\n          {email.to.map(e => (\n            <p key={generateUniqueId()}>{e}</p>\n          ))}\n        </td>\n        <td>{email.subject}</td>\n        <td>\n          {email.message.length > 50\n            ? `${email.message.slice(0, 50)}...`\n            : email.message}\n        </td>\n      </tr>\n    ))\n    .reverse();\n\n  const h1 = new stringMethods(router.pathname)\n    .removeSlash()\n    .firstCharUpperCase()\n    .getString();\n\n  return !user.user.signedIn && !initialized ? (\n    <LoadingSpinner />\n  ) : (\n    <>\n      <Header />\n      <h1>{h1}</h1>\n      <p>{emailsCounter}</p>\n      <table>\n        <thead>\n          <tr>\n            <td>{languages.en.dateAndTime}</td>\n            <td>{languages.en.to}</td>\n            <td>{languages.en.subject}</td>\n            <td>{languages.en.message}</td>\n          </tr>\n        </thead>\n        <tbody>{tableBody}</tbody>\n      </table>\n    </>\n  );\n};\n\nEmails.getInitialProps = async (context : any) => {\n  const res = await axios({\n    method: \"get\",\n    params: {key: context.query.Api_KEY},\n    url: `${globalVars.serverURL}/emails`,\n    responseType: \"json\"\n  });\n  const data = await res.data;\n  return { data };\n};\n\nexport default Emails;\n"]},"metadata":{},"sourceType":"module"}