{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/pages/clients.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useReducer } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport Header from \"../components/Header\";\nimport TableBody from \"../components/clients/TableBody\";\nimport stringMethods from \"../library/stringMethods\";\nimport globalVars from \"../library/globalVariables\";\nimport TableHead from \"../components/clients/TableHead\";\nimport CreateClient from \"../components/CreateClient\";\nimport Buttons from \"../components/clients/Buttons\";\nimport LoadingSpinner from \"../components/loadingSpinner\";\nimport EmailForm from \"../components/EmailForm\"; //TODO: Po odeslání\n\nconst Clients = ({\n  fieldData,\n  clientData\n}) => {\n  const router = useRouter();\n  const {\n    0: clients,\n    1: setClients\n  } = useReducer((state, action) => {\n    switch (action.type) {\n      case \"handleCheckedClients\":\n        return state.map(client => client._id === action.payload.id ? client.isChecked === false || client.isChecked === undefined ? _objectSpread({}, client, {\n          isChecked: true\n        }) : _objectSpread({}, client, {\n          isChecked: false\n        }) : client);\n\n      case \"addClient\":\n        return [...state, action.payload.newClient];\n\n      case \"deleteCheckedClients\":\n        return state.filter(client => !client.isChecked);\n\n      default:\n        return state;\n    }\n  }, clientData); //TODO: SPOJIT DO JEDNOHO STATU\n\n  const {\n    0: reverse,\n    1: setReverseOrder\n  } = useState(false);\n  const {\n    0: sort,\n    1: setSortBy\n  } = useState(\"firstName\"); //\n\n  const {\n    0: initialized,\n    1: setInitialized\n  } = useState(false);\n  const {\n    0: isClientAdded,\n    1: setIsClientAdded\n  } = useState(false);\n  const {\n    0: isEmailCreated,\n    1: setIsEmailCreated\n  } = useState(false);\n  useEffect(() => {\n    console.log(isEmailCreated);\n    const title = new stringMethods(router.pathname).removeSlash().firstCharUpperCase().addStringToEnd(globalVars.titleSubText).getString();\n    document.title = title;\n    setInitialized(true);\n  });\n  useEffect(() => {\n    filterCheckedClients().length === 0 && isEmailCreated ? setIsEmailCreated(!isEmailCreated) : null;\n  }, [clients]);\n  const h1 = new stringMethods(router.pathname).removeSlash().firstCharUpperCase().getString();\n\n  const sortBy = fieldName => {\n    setSortBy(fieldName);\n    !reverse ? setReverseOrder(true) : setReverseOrder(false);\n  };\n\n  const toggleIsClientAdded = e => {\n    e.preventDefault();\n    isClientAdded ? setIsClientAdded(false) : setIsClientAdded(true);\n  };\n\n  const handleCheckbox = id => {\n    setClients({\n      type: \"handleCheckedClients\",\n      payload: {\n        id\n      }\n    });\n  };\n\n  const addNewClientToState = newClient => {\n    setClients({\n      type: \"addClient\",\n      payload: {\n        newClient\n      }\n    });\n  };\n\n  const filterCheckedClients = () => clients.filter(client => client.isChecked);\n\n  const toggleIsEmailCreated = () => {\n    setIsEmailCreated(isEmailCreated ? false : true);\n  };\n\n  const deleteMultipleClients = async () => {\n    setClients({\n      type: \"deleteCheckedClients\"\n    });\n    await axios({\n      method: \"delete\",\n      data: filterCheckedClients().map(e => e._id),\n      url: `${globalVars.serverURL}/clients/`,\n      responseType: \"json\"\n    });\n  };\n\n  return !initialized ? __jsx(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }) : __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, h1), __jsx(EmailForm, {\n    to: filterCheckedClients().map(e => e.email),\n    isEmailCreated: isEmailCreated,\n    toggleIsEmailCreated: toggleIsEmailCreated,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }), __jsx(CreateClient, {\n    fields: fieldData,\n    isClientAdded: isClientAdded,\n    toggleIsClientAdded: toggleIsClientAdded,\n    addNewClientToState: addNewClientToState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }), __jsx(Buttons, {\n    disabled: !clients.some(client => client.isChecked),\n    deleteMultipleClients: deleteMultipleClients,\n    toggleIsClientAdded: toggleIsClientAdded,\n    isClientAdded: isClientAdded,\n    toggleIsEmailCreated: toggleIsEmailCreated,\n    isEmailCreated: isEmailCreated,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }), __jsx(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, __jsx(TableHead, {\n    fields: fieldData,\n    sortBy: sortBy,\n    reverse: reverse,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }), __jsx(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, __jsx(TableBody, {\n    clients: clients,\n    fields: fieldData,\n    sort: sort,\n    reverse: reverse,\n    handleCheckbox: handleCheckbox,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }))));\n};\n\nClients.getInitialProps = async () => {\n  //fetch clients\n  const clientRes = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/clients`,\n    responseType: \"json\"\n  });\n  const clientData = await clientRes.data; //fetch fields\n\n  const fieldRes = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/fields`,\n    responseType: \"json\"\n  });\n  const fieldData = await fieldRes.data;\n  return {\n    clientData,\n    fieldData\n  };\n};\n\nexport default Clients;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/pages/clients.tsx"],"names":["useState","useEffect","useReducer","useRouter","axios","Header","TableBody","stringMethods","globalVars","TableHead","CreateClient","Buttons","LoadingSpinner","EmailForm","Clients","fieldData","clientData","router","clients","setClients","state","action","type","map","client","_id","payload","id","isChecked","undefined","newClient","filter","reverse","setReverseOrder","sort","setSortBy","initialized","setInitialized","isClientAdded","setIsClientAdded","isEmailCreated","setIsEmailCreated","console","log","title","pathname","removeSlash","firstCharUpperCase","addStringToEnd","titleSubText","getString","document","filterCheckedClients","length","h1","sortBy","fieldName","toggleIsClientAdded","e","preventDefault","handleCheckbox","addNewClientToState","toggleIsEmailCreated","deleteMultipleClients","method","data","url","serverURL","responseType","email","some","getInitialProps","clientRes","fieldRes"],"mappings":"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","sourcesContent":["import { useState, useEffect, useReducer } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport Header from \"../components/Header\";\nimport TableBody from \"../components/clients/TableBody\";\nimport stringMethods from \"../library/stringMethods\";\nimport globalVars from \"../library/globalVariables\";\nimport TableHead from \"../components/clients/TableHead\";\nimport CreateClient from \"../components/CreateClient\";\nimport Buttons from \"../components/clients/Buttons\";\nimport LoadingSpinner from \"../components/loadingSpinner\";\nimport EmailForm from \"../components/EmailForm\";\n\n//TODO: Po odeslání\n\nconst Clients = ({ fieldData, clientData }: any) => {\n  const router = useRouter();\n\n  const [clients, setClients] = useReducer((state, action) => {\n    switch (action.type) {\n      case \"handleCheckedClients\":\n        return state.map(client =>\n          client._id === action.payload.id\n            ? client.isChecked === false || client.isChecked === undefined\n              ? { ...client, isChecked: true }\n              : { ...client, isChecked: false }\n            : client\n        );\n      case \"addClient\":\n        return [...state, action.payload.newClient];\n      case \"deleteCheckedClients\":\n        return state.filter(client => !client.isChecked);\n      default:\n        return state;\n    }\n  }, clientData);\n  //TODO: SPOJIT DO JEDNOHO STATU\n  const [reverse, setReverseOrder] = useState(false);\n  const [sort, setSortBy] = useState(\"firstName\");\n  //\n  const [initialized, setInitialized] = useState(false);\n  const [isClientAdded, setIsClientAdded] = useState(false);\n  const [isEmailCreated, setIsEmailCreated] = useState(false);\n\n  useEffect(() => {\n    console.log(isEmailCreated);\n    const title = new stringMethods(router.pathname)\n      .removeSlash()\n      .firstCharUpperCase()\n      .addStringToEnd(globalVars.titleSubText)\n      .getString();\n    document.title = title;\n    setInitialized(true);\n  });\n\n  useEffect(() => {\n    filterCheckedClients().length === 0 && isEmailCreated ? setIsEmailCreated(!isEmailCreated) : null\n  }, [clients])\n\n  const h1 = new stringMethods(router.pathname)\n    .removeSlash()\n    .firstCharUpperCase()\n    .getString();\n\n  const sortBy = fieldName => {\n    setSortBy(fieldName);\n    !reverse ? setReverseOrder(true) : setReverseOrder(false);\n  };\n\n  const toggleIsClientAdded = e => {\n    e.preventDefault();\n    isClientAdded ? setIsClientAdded(false) : setIsClientAdded(true);\n  };\n\n  const handleCheckbox = id => {\n    setClients({\n      type: \"handleCheckedClients\",\n      payload: { id }\n    });\n  };\n\n  const addNewClientToState = newClient => {\n    setClients({\n      type: \"addClient\",\n      payload: { newClient }\n    });\n  };\n\n  const filterCheckedClients = () => clients.filter(client => client.isChecked);\n\n  const toggleIsEmailCreated = () => {\n    setIsEmailCreated(isEmailCreated ? false : true);\n  };\n\n\n\n  const deleteMultipleClients = async () => {\n    setClients({\n      type: \"deleteCheckedClients\"\n    });\n\n    await axios({\n      method: \"delete\",\n      data: filterCheckedClients().map(e => e._id),\n      url: `${globalVars.serverURL}/clients/`,\n      responseType: \"json\"\n    });\n  };\n\n  return !initialized ? (\n    <LoadingSpinner />\n  ) : (\n    <div>\n      <Header />\n      <h1>{h1}</h1>\n      <EmailForm\n        to={filterCheckedClients().map(e => e.email)}\n        isEmailCreated={isEmailCreated}\n        toggleIsEmailCreated={toggleIsEmailCreated}\n      />\n      <CreateClient\n        fields={fieldData}\n        isClientAdded={isClientAdded}\n        toggleIsClientAdded={toggleIsClientAdded}\n        addNewClientToState={addNewClientToState}\n      />\n      <Buttons\n        disabled={!clients.some(client => client.isChecked)}\n        deleteMultipleClients={deleteMultipleClients}\n        toggleIsClientAdded={toggleIsClientAdded}\n        isClientAdded={isClientAdded}\n        toggleIsEmailCreated={toggleIsEmailCreated}\n        isEmailCreated={isEmailCreated}\n      />\n      <table>\n        <TableHead fields={fieldData} sortBy={sortBy} reverse={reverse} />\n        <tbody>\n          <TableBody\n            clients={clients}\n            fields={fieldData}\n            sort={sort}\n            reverse={reverse}\n            handleCheckbox={handleCheckbox}\n          />\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nClients.getInitialProps = async () => {\n  //fetch clients\n  const clientRes = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/clients`,\n    responseType: \"json\"\n  });\n  const clientData = await clientRes.data;\n\n  //fetch fields\n  const fieldRes = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/fields`,\n    responseType: \"json\"\n  });\n  const fieldData = await fieldRes.data;\n\n  return {\n    clientData,\n    fieldData\n  };\n};\n\nexport default Clients;\n"]},"metadata":{},"sourceType":"module"}