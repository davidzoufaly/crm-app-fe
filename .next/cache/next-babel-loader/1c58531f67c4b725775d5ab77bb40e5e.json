{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/AddOrEditField.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport SelectFieldOptions from \"../components/SelectFieldOptions\";\nimport uniqid from \"uniqid\";\nimport axios from \"axios\";\nimport globalVars from \"../library/globalVariables\";\nimport stringMethods from \"../library/stringMethods\";\n\nvar AddOrEditField = function AddOrEditField(_ref) {\n  var fieldObject = _ref.fieldObject,\n      changeDisplayComponent = _ref.changeDisplayComponent,\n      refreshList = _ref.refreshList;\n\n  var _useState = useState(fieldObject),\n      updatedField = _useState[0],\n      setUpdatedField = _useState[1];\n\n  var saveField =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var fieldNameInDB, res, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              fieldNameInDB = new stringMethods(updatedField.fieldName).replaceStringDiacritics().textToCamelString().getString();\n              setUpdatedField(_objectSpread({}, updatedField, {\n                fieldName: fieldNameInDB\n              }));\n              _context.next = 4;\n              return axios({\n                method: \"post\",\n                url: \"\".concat(globalVars.serverURL, \"/fields/\"),\n                data: updatedField,\n                responseType: \"json\"\n              });\n\n            case 4:\n              res = _context.sent;\n              _context.next = 7;\n              return res.data;\n\n            case 7:\n              data = _context.sent;\n              data.msg === \"Success\" ? changeDisplayComponent() : null;\n              console.log(fieldObject);\n              refreshList();\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function saveField() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var onNameChange = function onNameChange(event) {\n    setUpdatedField(_objectSpread({}, updatedField, {\n      fieldName: event.target.value\n    }));\n    console.log(updatedField);\n  };\n\n  var onSelectChange = function onSelectChange(event) {\n    setUpdatedField(_objectSpread({}, updatedField, {\n      fieldType: event.target.options[event.target.options.selectedIndex].value\n    }));\n  };\n\n  var handleOptionSpawn = function handleOptionSpawn() {\n    setUpdatedField(_objectSpread({}, updatedField, {\n      fieldOptions: [].concat(_toConsumableArray(updatedField.fieldOptions), [{\n        id: uniqid(),\n        value: \"\"\n      }])\n    }));\n  };\n\n  var onChange = function onChange(event) {\n    setUpdatedField(_objectSpread({}, updatedField, {\n      fieldOptions: updatedField.fieldOptions.filter(function (e) {\n        return event.target.id === e.id ? e.value = event.target.value : e;\n      })\n    }));\n  };\n\n  var onDelete = function onDelete(event) {\n    setUpdatedField(_objectSpread({}, updatedField, {\n      fieldOptions: updatedField.fieldOptions.filter(function (e) {\n        return event.target.id !== e.id ? e : null;\n      })\n    }));\n  };\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: \"field-name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Field name\"), __jsx(\"input\", {\n    type: \"text\",\n    id: \"field-name\",\n    defaultValue: updatedField.fieldName,\n    onChange: onNameChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), __jsx(\"label\", {\n    htmlFor: \"field-type\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"Field type\"), __jsx(\"select\", {\n    id: \"field-type\",\n    onChange: onSelectChange,\n    defaultValue: updatedField.fieldType,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, __jsx(\"option\", {\n    value: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Text\"), __jsx(\"option\", {\n    value: \"select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"Select\"), __jsx(\"option\", {\n    value: \"number\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Number\")), __jsx(SelectFieldOptions, {\n    options: updatedField.fieldOptions,\n    onChange: onChange,\n    onDelete: onDelete,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), updatedField.fieldType === \"select\" ? __jsx(\"button\", {\n    onClick: handleOptionSpawn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"New\") : null, __jsx(\"button\", {\n    onClick: saveField,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"Save\"), __jsx(\"button\", {\n    onClick: changeDisplayComponent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Cancel\"));\n};\n\nexport default AddOrEditField;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/AddOrEditField.tsx"],"names":["useState","SelectFieldOptions","uniqid","axios","globalVars","stringMethods","AddOrEditField","fieldObject","changeDisplayComponent","refreshList","updatedField","setUpdatedField","saveField","fieldNameInDB","fieldName","replaceStringDiacritics","textToCamelString","getString","method","url","serverURL","data","responseType","res","msg","console","log","onNameChange","event","target","value","onSelectChange","fieldType","options","selectedIndex","handleOptionSpawn","fieldOptions","id","onChange","filter","e","onDelete"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport SelectFieldOptions from \"../components/SelectFieldOptions\";\nimport uniqid from \"uniqid\";\nimport axios from \"axios\";\nimport globalVars from \"../library/globalVariables\";\nimport stringMethods from \"../library/stringMethods\";\n\nconst AddOrEditField = ({ fieldObject, changeDisplayComponent, refreshList }: any) => {\n  const [updatedField, setUpdatedField] = useState(fieldObject);\n\n  const saveField = async () => {\n\n    const fieldNameInDB = new stringMethods(updatedField.fieldName).replaceStringDiacritics().textToCamelString().getString();\n    \n    setUpdatedField({...updatedField, fieldName: fieldNameInDB})\n\n    const res = await axios({\n      method: \"post\",\n      url: `${globalVars.serverURL}/fields/`,\n      data: updatedField,\n      responseType: \"json\"\n    });\n    const data = await res.data;\n    data.msg === \"Success\" ? changeDisplayComponent() : null;\n    console.log(fieldObject);\n    refreshList();\n  };\n\n  const onNameChange = (event: any) => {\n    setUpdatedField({ ...updatedField, fieldName: event.target.value});\n    console.log(updatedField);\n  };\n\n  const onSelectChange = (event: any) => {\n    setUpdatedField({\n      ...updatedField,\n      fieldType: event.target.options[event.target.options.selectedIndex].value\n    });\n  };\n\n  const handleOptionSpawn = () => {\n    setUpdatedField({\n      ...updatedField,\n      fieldOptions: [...updatedField.fieldOptions, { id: uniqid(), value: \"\" }]\n    });\n  };\n\n  const onChange = (event: any) => {\n    setUpdatedField({\n      ...updatedField,\n      fieldOptions: updatedField.fieldOptions.filter((e: any) =>\n        event.target.id === e.id ? (e.value = event.target.value) : e\n      )\n    });\n  };\n\n  const onDelete = (event: any) => {\n    setUpdatedField({\n      ...updatedField,\n      fieldOptions: updatedField.fieldOptions.filter((e: any) =>\n        event.target.id !== e.id ? e : null\n      )\n    });\n  };\n\n  return (\n    <div>\n      <label htmlFor=\"field-name\">Field name</label>\n      <input\n        type=\"text\"\n        id=\"field-name\"\n        defaultValue={updatedField.fieldName}\n        onChange={onNameChange}\n      />\n      <label htmlFor=\"field-type\">Field type</label>\n      <select id=\"field-type\" onChange={onSelectChange} defaultValue={updatedField.fieldType}> \n        <option value=\"text\">Text</option>\n        <option value=\"select\">Select</option>\n        <option value=\"number\">Number</option>\n      </select>\n      <SelectFieldOptions\n        options={updatedField.fieldOptions}\n        onChange={onChange}\n        onDelete={onDelete}\n      />\n      {updatedField.fieldType === \"select\" ? (\n        <button onClick={handleOptionSpawn}>New</button>\n      ) : null}\n      <button onClick={saveField}>Save</button>\n      <button onClick={changeDisplayComponent}>Cancel</button>\n    </div>\n  );\n};\n\nexport default AddOrEditField;\n"]},"metadata":{},"sourceType":"module"}