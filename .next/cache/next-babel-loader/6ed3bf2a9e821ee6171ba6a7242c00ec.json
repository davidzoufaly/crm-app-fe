{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/pages/clients/[key].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useReducer, useContext } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport Header from \"../../components/Header\";\nimport TableBody from \"../../components/clients/TableBody\";\nimport UserContext from \"../../components/UserContext\";\nimport stringMethods from \"../../library/stringMethods\";\nimport globalVars from \"../../library/globalVariables\";\nimport TableHead from \"../../components/clients/TableHead\";\nimport CreateClient from \"../../components/clients/CreateClient\";\nimport EmailForm from \"../../components/EmailForm\";\nimport Buttons from \"../../components/clients/Buttons\";\nimport LoadingSpinner from \"../../components/LoadingSpinner\";\nimport { Table, Typography } from '@material-ui/core';\nimport TableBodyMui from \"@material-ui/core/TableBody\";\nimport languages from \"../../library/languages\";\n\nconst Clients = ({\n  fieldData,\n  clientData\n}) => {\n  const router = useRouter();\n  const user = useContext(UserContext);\n  const {\n    0: clients,\n    1: setClients\n  } = useReducer((state, action) => {\n    switch (action.type) {\n      case \"handleCheckedClients\":\n        return state.map(client => client._id === action.payload.id ? client.isChecked === false || client.isChecked === undefined ? _objectSpread({}, client, {\n          isChecked: true\n        }) : _objectSpread({}, client, {\n          isChecked: false\n        }) : client);\n\n      case \"addClient\":\n        return [...state, action.payload.newClient];\n\n      case \"deleteCheckedClients\":\n        return state.filter(client => !client.isChecked);\n\n      case \"unCheckAll\":\n        return state.map(client => client = _objectSpread({}, client, {\n          isChecked: false\n        }));\n\n      default:\n        return state;\n    }\n  }, clientData);\n  const {\n    0: sort,\n    1: setSort\n  } = useState({\n    sortBy: \"First name\",\n    reverse: true\n  });\n  const {\n    0: initialized,\n    1: setInitialized\n  } = useState(false);\n  const {\n    0: isClientAdded,\n    1: setIsClientAdded\n  } = useState(false);\n  const {\n    0: isEmailCreated,\n    1: setIsEmailCreated\n  } = useState(false);\n  useEffect(() => {\n    // set page title\n    const title = new stringMethods(router.pathname).removeSlash().removeSlashAndTextAfter().firstCharUpperCase().addStringToEnd(globalVars.titleSubText).getString();\n    document.title = title;\n    setInitialized(true);\n    user.checkUser();\n  }, [router]);\n  useEffect(() => {\n    // reset email state, when user uncheck all recievers / clients\n    filterCheckedClients().length === 0 && isEmailCreated ? setIsEmailCreated(!isEmailCreated) : null;\n  }, [clients]); // create H1\n\n  const h1 = new stringMethods(router.pathname).removeSlash().removeSlashAndTextAfter().firstCharUpperCase().getString();\n\n  const sortBy = fieldName => {\n    setSort(_objectSpread({}, sort, {\n      sortBy: fieldName,\n      reverse: fieldName === sort.sortBy // if clicked again on same field ->Â reverse sort based on current reverse state\n      ? !sort.reverse ? true : false // if new field being clicked -> set reverse true to immediately sort column ASC \n      : true\n    }));\n  };\n\n  const handleCheckbox = id => {\n    setClients({\n      type: \"handleCheckedClients\",\n      payload: {\n        id\n      }\n    });\n  };\n\n  const addNewClientToState = newClient => {\n    setClients({\n      type: \"addClient\",\n      payload: {\n        newClient\n      }\n    });\n  };\n\n  const filterCheckedClients = () => clients.filter(client => client.isChecked);\n\n  const unCheckAll = () => {\n    setClients({\n      type: \"unCheckAll\"\n    });\n  };\n\n  const toggleIsEmailCreated = () => {\n    setIsEmailCreated(isEmailCreated ? false : true);\n  };\n\n  const toggleIsClientAdded = () => {\n    isClientAdded ? setIsClientAdded(false) : setIsClientAdded(true);\n  };\n\n  const deleteMultipleClients = async () => {\n    setClients({\n      type: \"deleteCheckedClients\"\n    });\n    await axios({\n      method: \"DELETE\",\n      data: filterCheckedClients().map(e => e._id),\n      url: `${globalVars.serverURL}/clients/`,\n      params: {\n        key: user.user.userkey\n      },\n      responseType: \"json\"\n    });\n  };\n\n  return !user.user.signedIn && !initialized ? __jsx(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }) : __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }), __jsx(Typography, {\n    component: \"h1\",\n    variant: \"h3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, h1), __jsx(Typography, {\n    variant: \"h5\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, languages.en.saved, \" \", clients.length), __jsx(EmailForm, {\n    to: filterCheckedClients().map(e => e[\"Email\"]),\n    isEmailCreated: isEmailCreated,\n    toggleIsEmailCreated: toggleIsEmailCreated,\n    unCheckAll: unCheckAll,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }), __jsx(CreateClient, {\n    fields: fieldData,\n    isClientAdded: isClientAdded,\n    toggleIsClientAdded: toggleIsClientAdded,\n    addNewClientToState: addNewClientToState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }), __jsx(Buttons, {\n    clientsAreNotChecked: !clients.some(client => client.isChecked),\n    deleteMultipleClients: deleteMultipleClients,\n    toggleIsClientAdded: toggleIsClientAdded,\n    isClientAdded: isClientAdded,\n    toggleIsEmailCreated: toggleIsEmailCreated,\n    isEmailCreated: isEmailCreated,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }), __jsx(Table, {\n    \"aria-label\": \"clients table\",\n    size: \"small\",\n    style: {\n      backgroundColor: \"white\",\n      border: \"1px solid #e0e0e0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, __jsx(TableHead, {\n    fields: fieldData,\n    sortBy: sortBy,\n    sort: sort,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }), __jsx(TableBodyMui, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, __jsx(TableBody, {\n    clients: clients,\n    fields: fieldData,\n    sort: sort,\n    handleCheckbox: handleCheckbox,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }))));\n};\n\nClients.getInitialProps = async context => {\n  //fetch clients\n  const clientRes = await axios({\n    method: \"GET\",\n    url: `${globalVars.serverURL}/clients/`,\n    params: {\n      key: context.query.key\n    },\n    responseType: \"json\"\n  });\n  const clientData = await clientRes.data; //fetch fields\n\n  const fieldRes = await axios({\n    method: \"GET\",\n    url: `${globalVars.serverURL}/fields`,\n    params: {\n      key: context.query.key\n    },\n    responseType: \"json\"\n  });\n  const fieldData = await fieldRes.data; //fetch clients counter -> unsued takes number from main clients\n  // const resClientCount = await axios(\n  //   `${globalVars.serverURL}/clients/count?key=${context.query.key}`\n  // );\n  // const clientCount = await resClientCount.data\n\n  return {\n    clientData,\n    fieldData\n  };\n};\n\nexport default Clients;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/pages/clients/[key].tsx"],"names":["useState","useEffect","useReducer","useContext","useRouter","axios","Header","TableBody","UserContext","stringMethods","globalVars","TableHead","CreateClient","EmailForm","Buttons","LoadingSpinner","Table","Typography","TableBodyMui","languages","Clients","fieldData","clientData","router","user","clients","setClients","state","action","type","map","client","_id","payload","id","isChecked","undefined","newClient","filter","sort","setSort","sortBy","reverse","initialized","setInitialized","isClientAdded","setIsClientAdded","isEmailCreated","setIsEmailCreated","title","pathname","removeSlash","removeSlashAndTextAfter","firstCharUpperCase","addStringToEnd","titleSubText","getString","document","checkUser","filterCheckedClients","length","h1","fieldName","handleCheckbox","addNewClientToState","unCheckAll","toggleIsEmailCreated","toggleIsClientAdded","deleteMultipleClients","method","data","e","url","serverURL","params","key","userkey","responseType","signedIn","en","saved","some","backgroundColor","border","getInitialProps","context","clientRes","query","fieldRes"],"mappings":"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","sourcesContent":["import { useState, useEffect, useReducer, useContext } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport Header from \"../../components/Header\";\nimport TableBody from \"../../components/clients/TableBody\";\nimport UserContext from \"../../components/UserContext\";\nimport stringMethods from \"../../library/stringMethods\";\nimport globalVars from \"../../library/globalVariables\";\nimport TableHead from \"../../components/clients/TableHead\";\nimport CreateClient from \"../../components/clients/CreateClient\";\nimport EmailForm from \"../../components/EmailForm\";\nimport Buttons from \"../../components/clients/Buttons\";\nimport LoadingSpinner from \"../../components/LoadingSpinner\";\nimport {Table, Typography} from '@material-ui/core';\nimport TableBodyMui from \"@material-ui/core/TableBody\"\nimport languages from \"../../library/languages\";\n\n\nconst Clients = ({ fieldData, clientData }: any) => {\n  const router = useRouter();\n  const user = useContext(UserContext);\n\n  const [clients, setClients] = useReducer((state, action) => {\n    switch (action.type) {\n      case \"handleCheckedClients\":\n        return state.map(client =>\n          client._id === action.payload.id\n            ? client.isChecked === false || client.isChecked === undefined\n              ? { ...client, isChecked: true }\n              : { ...client, isChecked: false }\n            : client\n        );\n      case \"addClient\":\n        return [...state, action.payload.newClient];\n      case \"deleteCheckedClients\":\n        return state.filter(client => !client.isChecked);\n      case \"unCheckAll\": \n        return state.map(client => client = {...client, isChecked: false});\n      default:\n        return state;\n    }\n  }, clientData);\n\n  const [sort, setSort] = useState({\n    sortBy: \"First name\",\n    reverse: true\n  })\n  \n  const [initialized, setInitialized] = useState(false);\n  const [isClientAdded, setIsClientAdded] = useState(false);\n  const [isEmailCreated, setIsEmailCreated] = useState(false);\n\n  useEffect(() => {\n    // set page title\n    const title = new stringMethods(router.pathname)\n      .removeSlash()\n      .removeSlashAndTextAfter()      \n      .firstCharUpperCase()\n      .addStringToEnd(globalVars.titleSubText)\n      .getString();\n    document.title = title;\n    setInitialized(true);\n    user.checkUser();\n  }, [router]);\n\n  useEffect(() => {\n    // reset email state, when user uncheck all recievers / clients\n    filterCheckedClients().length === 0 && isEmailCreated\n      ? setIsEmailCreated(!isEmailCreated)\n      : null;\n  }, [clients]);\n\n  // create H1\n  const h1 = new stringMethods(router.pathname)\n    .removeSlash()\n    .removeSlashAndTextAfter()\n    .firstCharUpperCase()\n    .getString();\n\n  const sortBy = fieldName => {\n    setSort({...sort, \n        sortBy: fieldName,\n        reverse: fieldName === sort.sortBy \n                  // if clicked again on same field ->Â reverse sort based on current reverse state\n                  ? !sort.reverse \n                      ? true : false\n                  // if new field being clicked -> set reverse true to immediately sort column ASC \n                  : true\n    });\n  };\n\n  const handleCheckbox = id => {\n    setClients({\n      type: \"handleCheckedClients\",\n      payload: { id }\n    });\n  };\n\n  const addNewClientToState = newClient => {\n    setClients({\n      type: \"addClient\",\n      payload: { newClient }\n    });\n  };\n\n  const filterCheckedClients = () => clients.filter(client => client.isChecked);\n\n  const unCheckAll = () =>Â {\n    setClients({type: \"unCheckAll\"})\n  }\n\n  const toggleIsEmailCreated = () => {\n    setIsEmailCreated(isEmailCreated ? false : true);\n  };\n\n  const toggleIsClientAdded = () => { \n    isClientAdded ? setIsClientAdded(false) : setIsClientAdded(true);\n  };\n\n  const deleteMultipleClients = async () => {\n\n    setClients({\n      type: \"deleteCheckedClients\"\n    });\n\n    await axios({\n      method: \"DELETE\",\n      data: filterCheckedClients().map(e => e._id),\n      url: `${globalVars.serverURL}/clients/`,\n      params: {key: user.user.userkey},\n      responseType: \"json\"\n    });\n  };\n\n  return !user.user.signedIn && !initialized ? (\n    <LoadingSpinner />\n  ) : (\n    <div>\n      <Header />\n      <Typography component=\"h1\" variant=\"h3\">{h1}</Typography>\n      <Typography variant=\"h5\" gutterBottom>{languages.en.saved} {clients.length}</Typography>\n      <EmailForm\n        to={filterCheckedClients().map(e => e[\"Email\"])}\n        isEmailCreated={isEmailCreated}\n        toggleIsEmailCreated={toggleIsEmailCreated}\n        unCheckAll={unCheckAll}\n      />\n      <CreateClient\n        fields={fieldData}\n        isClientAdded={isClientAdded}\n        toggleIsClientAdded={toggleIsClientAdded}\n        addNewClientToState={addNewClientToState}\n      />\n      <Buttons\n        clientsAreNotChecked={!clients.some(client => client.isChecked)}\n        deleteMultipleClients={deleteMultipleClients}\n        toggleIsClientAdded={toggleIsClientAdded}\n        isClientAdded={isClientAdded}\n        toggleIsEmailCreated={toggleIsEmailCreated}\n        isEmailCreated={isEmailCreated}\n      />\n        <Table aria-label=\"clients table\" size=\"small\" style={{backgroundColor: \"white\", border: \"1px solid #e0e0e0\"}}>\n        <TableHead fields={fieldData} sortBy={sortBy} sort={sort} />\n        <TableBodyMui>\n          <TableBody\n            clients={clients}\n            fields={fieldData}\n            sort={sort}\n            handleCheckbox={handleCheckbox}\n          />\n        </TableBodyMui>\n      </Table>\n    </div>\n  );\n};\n\nClients.getInitialProps = async (context : any) => {\n  //fetch clients\n  const clientRes = await axios({\n    method: \"GET\",\n    url: `${globalVars.serverURL}/clients/`,\n    params: {key: context.query.key},\n    responseType: \"json\"\n  });\n  const clientData = await clientRes.data;\n\n  //fetch fields\n  const fieldRes = await axios({\n    method: \"GET\",\n    url: `${globalVars.serverURL}/fields`,\n    params: {key: context.query.key},\n    responseType: \"json\"\n  });\n  const fieldData = await fieldRes.data;\n\n  //fetch clients counter -> unsued takes number from main clients\n  // const resClientCount = await axios(\n  //   `${globalVars.serverURL}/clients/count?key=${context.query.key}`\n  // );\n  // const clientCount = await resClientCount.data\n\n  return {\n    clientData,\n    fieldData\n  };\n};\n\nexport default Clients;\n"]},"metadata":{},"sourceType":"module"}