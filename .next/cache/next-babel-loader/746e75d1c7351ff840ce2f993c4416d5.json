{"ast":null,"code":"var _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/SingleClientData.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport stringMethods from \"../library/stringMethods\";\n\nvar SingleClientData = function SingleClientData(_ref) {\n  var fieldsData = _ref.fieldsData,\n      client = _ref.client,\n      onInputChange = _ref.onInputChange;\n  return fieldsData.map(function (field) {\n    switch (field.fieldType) {\n      case \"text\":\n        return __jsx(\"li\", {\n          key: field.fieldName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 8\n          },\n          __self: this\n        }, new stringMethods(field.fieldName).camelStringToText().firstCharUpperCase().getString(), __jsx(\"textarea\", {\n          name: field.fieldName,\n          value: client[field.fieldName],\n          onChange: onInputChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 13\n          },\n          __self: this\n        }));\n\n      case \"number\":\n        return __jsx(\"li\", {\n          key: field.fieldName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18\n          },\n          __self: this\n        }, new stringMethods(field.fieldName).camelStringToText().firstCharUpperCase().getString(), __jsx(\"input\", {\n          type: \"number\",\n          name: field.fieldName,\n          value: client[field.fieldName],\n          onChange: onInputChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23\n          },\n          __self: this\n        }));\n\n      case \"select\":\n        return __jsx(\"li\", {\n          key: field.fieldName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        }, new stringMethods(field.fieldName).camelStringToText().firstCharUpperCase().getString(), __jsx(\"select\", {\n          name: field.fieldName,\n          value: client[field.fieldName],\n          onChange: onInputChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }, field.fieldOptions.map(function (option) {\n          return __jsx(\"option\", {\n            key: option.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 35\n            },\n            __self: this\n          }, option.value);\n        })));\n    }\n  });\n};\n\nexport default SingleClientData;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/SingleClientData.tsx"],"names":["stringMethods","SingleClientData","fieldsData","client","onInputChange","map","field","fieldType","fieldName","camelStringToText","firstCharUpperCase","getString","fieldOptions","option","id","value"],"mappings":";;;AAAA,OAAOA,aAAP,MAA0B,0BAA1B;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,MAAGC,UAAH,QAAGA,UAAH;AAAA,MAAeC,MAAf,QAAeA,MAAf;AAAA,MAAuBC,aAAvB,QAAuBA,aAAvB;AAAA,SACvBF,UAAU,CAACG,GAAX,CAAe,UAAAC,KAAK,EAAI;AACtB,YAAQA,KAAK,CAACC,SAAd;AACE,WAAK,MAAL;AACE,eACE;AAAI,UAAA,GAAG,EAAED,KAAK,CAACE,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG,IAAIR,aAAJ,CAAkBM,KAAK,CAACE,SAAxB,EACEC,iBADF,GAEEC,kBAFF,GAGEC,SAHF,EADH,EAKE;AAAU,UAAA,IAAI,EAAEL,KAAK,CAACE,SAAtB;AAAiC,UAAA,KAAK,EAAEL,MAAM,CAACG,KAAK,CAACE,SAAP,CAA9C;AAAiE,UAAA,QAAQ,EAAEJ,aAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UALF,CADF;;AASF,WAAK,QAAL;AACE,eACE;AAAI,UAAA,GAAG,EAAEE,KAAK,CAACE,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG,IAAIR,aAAJ,CAAkBM,KAAK,CAACE,SAAxB,EACEC,iBADF,GAEEC,kBAFF,GAGEC,SAHF,EADH,EAKE;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,IAAI,EAAEL,KAAK,CAACE,SAAjC;AAA4C,UAAA,KAAK,EAAEL,MAAM,CAACG,KAAK,CAACE,SAAP,CAAzD;AAA4E,UAAA,QAAQ,EAAEJ,aAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UALF,CADF;;AASF,WAAK,QAAL;AACE,eACE;AAAI,UAAA,GAAG,EAAEE,KAAK,CAACE,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG,IAAIR,aAAJ,CAAkBM,KAAK,CAACE,SAAxB,EACEC,iBADF,GAEEC,kBAFF,GAGEC,SAHF,EADH,EAKE;AAAQ,UAAA,IAAI,EAAEL,KAAK,CAACE,SAApB;AAA+B,UAAA,KAAK,EAAEL,MAAM,CAACG,KAAK,CAACE,SAAP,CAA5C;AAA+D,UAAA,QAAQ,EAAEJ,aAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGE,KAAK,CAACM,YAAN,CAAmBP,GAAnB,CAAuB,UAAAQ,MAAM;AAAA,iBAC5B;AAAQ,YAAA,GAAG,EAAEA,MAAM,CAACC,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAyBD,MAAM,CAACE,KAAhC,CAD4B;AAAA,SAA7B,CADH,CALF,CADF;AAtBJ;AAoCD,GArCD,CADuB;AAAA,CAAzB;;AAwCA,eAAed,gBAAf","sourcesContent":["import stringMethods from \"../library/stringMethods\";\n\nconst SingleClientData = ({ fieldsData, client, onInputChange }: any) =>\n  fieldsData.map(field => {\n    switch (field.fieldType) {\n      case \"text\":\n        return (\n          <li key={field.fieldName}>\n            {new stringMethods(field.fieldName)\n              .camelStringToText()\n              .firstCharUpperCase()\n              .getString()}\n            <textarea name={field.fieldName} value={client[field.fieldName]} onChange={onInputChange}/>\n          </li>\n        );\n      case \"number\":\n        return (\n          <li key={field.fieldName}>\n            {new stringMethods(field.fieldName)\n              .camelStringToText()\n              .firstCharUpperCase()\n              .getString()}\n            <input type=\"number\" name={field.fieldName} value={client[field.fieldName]} onChange={onInputChange}/>\n          </li>\n        );\n      case \"select\":\n        return (\n          <li key={field.fieldName}>\n            {new stringMethods(field.fieldName)\n              .camelStringToText()\n              .firstCharUpperCase()\n              .getString()}\n            <select name={field.fieldName} value={client[field.fieldName]} onChange={onInputChange}>\n              {field.fieldOptions.map(option => (\n                <option key={option.id}>{option.value}</option>\n              ))}\n            </select>\n          </li>\n        );\n    }\n  });\n\nexport default SingleClientData;\n"]},"metadata":{},"sourceType":"module"}