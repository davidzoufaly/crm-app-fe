{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport TextInput from \"./TextInput\";\nimport Button from \"./Button\";\nimport globalVars from \"../../library/globalVariables\";\nimport languages from \"../../library/languages\";\nimport stringMethods from \"../../library/stringMethods\";\nimport { Typography, Box } from '@material-ui/core';\n\nvar RegisterForm = function RegisterForm(_ref) {\n  var changeToLogin = _ref.changeToLogin;\n\n  var _useState = useState({\n    username: \"\",\n    password: \"\",\n    repeatPassword: \"\"\n  }),\n      regUser = _useState[0],\n      setRegUser = _useState[1];\n\n  var onChange = function onChange(e) {\n    setRegUser(_objectSpread({}, regUser, _defineProperty({}, e.target.name, e.target.value)));\n  };\n\n  var sentFormToBe =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var username, password, userRes, userData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              username = regUser.username, password = regUser.password;\n              _context.next = 3;\n              return axios({\n                method: \"POST\",\n                data: {\n                  username: username,\n                  password: password\n                },\n                url: \"\".concat(globalVars.serverURL, \"/users\"),\n                responseType: \"json\"\n              });\n\n            case 3:\n              userRes = _context.sent;\n              _context.next = 6;\n              return userRes.data;\n\n            case 6:\n              userData = _context.sent;\n              _context.t0 = userData.msg;\n              _context.next = _context.t0 === globalVars.msgSuccess ? 10 : _context.t0 === \"Exist\" ? 13 : 15;\n              break;\n\n            case 10:\n              alert(languages.en.success);\n              changeToLogin();\n              return _context.abrupt(\"break\", 16);\n\n            case 13:\n              alert(languages.en.userAlreadyExists);\n              return _context.abrupt(\"break\", 16);\n\n            case 15:\n              alert(languages.en.somethingWentWrong);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function sentFormToBe() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var onRegister = function onRegister() {\n    regUser.password === regUser.repeatPassword ? sentFormToBe() : alert(languages.en.passwordsDoesNotMatch);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Typography, {\n    component: \"h2\",\n    variant: \"h4\",\n    gutterBottom: true\n  }, new stringMethods(languages.en.register).firstCharUpperCase().getString()), __jsx(\"form\", null, __jsx(TextInput, {\n    onChange: onChange,\n    type: \"text\",\n    value: regUser.username,\n    text: \"username\",\n    title: new stringMethods(languages.en.username).firstCharUpperCase().getString()\n  }), __jsx(TextInput, {\n    onChange: onChange,\n    type: \"password\",\n    value: regUser.password,\n    text: \"password\",\n    title: languages.en.password\n  }), __jsx(TextInput, {\n    onChange: onChange,\n    type: \"password\",\n    value: regUser.repeatPassword,\n    text: \"repeatPassword\",\n    title: new stringMethods(languages.en.repeatPassword).firstCharUpperCase().getString()\n  }), __jsx(Box, {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    mt: \"2rem\"\n  }, __jsx(Button, {\n    onClick: onRegister,\n    text: languages.en.register,\n    variant: \"contained\"\n  }))));\n};\n\nexport default RegisterForm;","map":null,"metadata":{},"sourceType":"module"}