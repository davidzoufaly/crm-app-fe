{"ast":null,"code":"var _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/SingleClientData.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport stringMethods from \"../library/stringMethods\";\n\nconst SingleClientData = ({\n  fieldsData,\n  client,\n  onInputChange\n}) => fieldsData.map(field => {\n  switch (field.fieldType) {\n    case \"text\":\n      return __jsx(\"li\", {\n        key: field.fieldName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8\n        },\n        __self: this\n      }, new stringMethods(field.fieldName).camelStringToText().firstCharUpperCase().getString(), __jsx(\"textarea\", {\n        value: client[field.fieldName],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }));\n\n    case \"number\":\n      return __jsx(\"li\", {\n        key: field.fieldName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, new stringMethods(field.fieldName).camelStringToText().firstCharUpperCase().getString(), __jsx(\"input\", {\n        type: \"number\",\n        value: client[field.fieldName],\n        onChange: () => onInputChange(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }));\n\n    case \"select\":\n      return __jsx(\"li\", {\n        key: field.fieldName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, new stringMethods(field.fieldName).camelStringToText().firstCharUpperCase().getString(), __jsx(\"select\", {\n        value: client[field.fieldName],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, field.fieldOptions.map(option => __jsx(\"option\", {\n        key: option.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, option.value))));\n  }\n});\n\nexport default SingleClientData;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/SingleClientData.tsx"],"names":["stringMethods","SingleClientData","fieldsData","client","onInputChange","map","field","fieldType","fieldName","camelStringToText","firstCharUpperCase","getString","fieldOptions","option","id","value"],"mappings":";;;AAAA,OAAOA,aAAP,MAA0B,0BAA1B;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,MAAd;AAAsBC,EAAAA;AAAtB,CAAD,KACvBF,UAAU,CAACG,GAAX,CAAeC,KAAK,IAAI;AACtB,UAAQA,KAAK,CAACC,SAAd;AACE,SAAK,MAAL;AACE,aACE;AAAI,QAAA,GAAG,EAAED,KAAK,CAACE,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,IAAIR,aAAJ,CAAkBM,KAAK,CAACE,SAAxB,EACEC,iBADF,GAEEC,kBAFF,GAGEC,SAHF,EADH,EAKE;AAAU,QAAA,KAAK,EAAER,MAAM,CAACG,KAAK,CAACE,SAAP,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,CADF;;AASF,SAAK,QAAL;AACE,aACE;AAAI,QAAA,GAAG,EAAEF,KAAK,CAACE,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,IAAIR,aAAJ,CAAkBM,KAAK,CAACE,SAAxB,EACEC,iBADF,GAEEC,kBAFF,GAGEC,SAHF,EADH,EAKE;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAER,MAAM,CAACG,KAAK,CAACE,SAAP,CAAlC;AAAqD,QAAA,QAAQ,EAAE,MAAMJ,aAAa,EAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,CADF;;AASF,SAAK,QAAL;AACE,aACE;AAAI,QAAA,GAAG,EAAEE,KAAK,CAACE,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,IAAIR,aAAJ,CAAkBM,KAAK,CAACE,SAAxB,EACEC,iBADF,GAEEC,kBAFF,GAGEC,SAHF,EADH,EAKE;AAAQ,QAAA,KAAK,EAAER,MAAM,CAACG,KAAK,CAACE,SAAP,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGF,KAAK,CAACM,YAAN,CAAmBP,GAAnB,CAAuBQ,MAAM,IAC5B;AAAQ,QAAA,GAAG,EAAEA,MAAM,CAACC,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyBD,MAAM,CAACE,KAAhC,CADD,CADH,CALF,CADF;AAtBJ;AAoCD,CArCD,CADF;;AAwCA,eAAed,gBAAf","sourcesContent":["import stringMethods from \"../library/stringMethods\";\n\nconst SingleClientData = ({ fieldsData, client, onInputChange }: any) =>\n  fieldsData.map(field => {\n    switch (field.fieldType) {\n      case \"text\":\n        return (\n          <li key={field.fieldName}>\n            {new stringMethods(field.fieldName)\n              .camelStringToText()\n              .firstCharUpperCase()\n              .getString()}\n            <textarea value={client[field.fieldName]} />\n          </li>\n        );\n      case \"number\":\n        return (\n          <li key={field.fieldName}>\n            {new stringMethods(field.fieldName)\n              .camelStringToText()\n              .firstCharUpperCase()\n              .getString()}\n            <input type=\"number\" value={client[field.fieldName]} onChange={() => onInputChange()}/>\n          </li>\n        );\n      case \"select\":\n        return (\n          <li key={field.fieldName}>\n            {new stringMethods(field.fieldName)\n              .camelStringToText()\n              .firstCharUpperCase()\n              .getString()}\n            <select value={client[field.fieldName]}>\n              {field.fieldOptions.map(option => (\n                <option key={option.id}>{option.value}</option>\n              ))}\n            </select>\n          </li>\n        );\n    }\n  });\n\nexport default SingleClientData;\n"]},"metadata":{},"sourceType":"module"}