{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/CustomFields.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useReducer } from \"react\";\nimport AddOrEditField from \"./AddOrEditField\";\nimport axios from \"axios\";\nimport globalVars from \"../library/globalVariables\";\nimport uniqid from \"uniqid\";\nimport CustomFieldsList from \"./CustomFieldsList\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SelectFieldOptions from \"./SelectFieldOptions\"; //TODO: EDIT OPTIONU SE PRERENDEROVAVA\n//TODO: TO much baskspace u optionu uplne odstranÃ­ pole\n\nconst CustomClientFields = ({\n  fields,\n  refreshList\n}) => {\n  const blankFieldObject = {\n    fieldName: \"\",\n    fieldType: \"text\",\n    fieldOptions: []\n  };\n  const {\n    0: displayComponent,\n    1: setDisplayComponent\n  } = useState(false);\n  const {\n    0: editedField,\n    1: setEditedField\n  } = useReducer((state, action) => {\n    switch (action.type) {\n      case \"fieldNameChange\":\n        return _objectSpread({}, state, {\n          fieldName: action.payload.event.target.value\n        });\n\n      case \"selectValueChange\":\n        return _objectSpread({}, state, {\n          fieldType: action.payload.event.target.options[action.payload.event.target.options.selectedIndex].value\n        });\n\n      case \"newOptionSpawn\":\n        return _objectSpread({}, state, {\n          fieldOptions: [...editedField.fieldOptions, {\n            id: uniqid(),\n            value: \"\"\n          }]\n        });\n\n      case \"clear\":\n        return {\n          blankFieldObject\n        };\n\n      case \"optionValueChange\":\n        return _objectSpread({}, state, {\n          fieldOptions: state.fieldOptions.filter(el => action.type.event.target.id === el.id ? el.value = action.type.event.target.value : el)\n        });\n\n      default:\n        return state;\n    }\n  }, blankFieldObject);\n  const fieldMethods = {\n    onNameChange(event) {\n      setEditedField({\n        type: \"fieldNameChange\",\n        payload: {\n          event\n        }\n      });\n    },\n\n    onSelectChange(event) {\n      setEditedField({\n        type: \"selectValueChange\",\n        payload: {\n          event\n        }\n      });\n    },\n\n    handleOptionSpawn() {\n      setEditedField({\n        type: \"newOptionSpawn\"\n      });\n    },\n\n    toggleDisplayComponent() {\n      displayComponent ? setDisplayComponent(false) : setDisplayComponent(true);\n      setEditedField({\n        type: \"clear\"\n      });\n    },\n\n    saveEditedField() {\n      const fieldIsUpdated = async () => {\n        const {\n          fieldName,\n          fieldType,\n          fieldOptions,\n          id\n        } = editedField;\n        const res = await axios({\n          method: \"put\",\n          url: `${globalVars.serverURL}/fields/${id}`,\n          data: {\n            fieldName,\n            fieldType,\n            fieldOptions\n          },\n          responseType: \"json\"\n        });\n        const data = await res.data;\n\n        if (data.msg === \"Success\") {\n          reset();\n        }\n      };\n\n      const fieldIsCreated = async () => {\n        const res = await axios({\n          method: \"post\",\n          url: `${globalVars.serverURL}/fields/`,\n          data: editedField,\n          responseType: \"json\"\n        });\n        const data = await res.data;\n\n        if (data.msg === \"Success\") {\n          reset();\n        }\n      };\n\n      !editedField.id ? fieldIsCreated() : fieldIsUpdated();\n    }\n\n  };\n\n  const reset = () => {\n    setDisplayComponent(false);\n    setEditedField({\n      type: \"clear\"\n    });\n    refreshList();\n  };\n\n  const deleteField = async id => {\n    const res = await axios({\n      method: \"delete\",\n      url: `${globalVars.serverURL}/fields/${id}`,\n      responseType: \"json\"\n    });\n    const resData = await res.data;\n    resData.msg === \"Success\" ? refreshList() : null;\n  };\n\n  const onOptionChange = event => {\n    setEditedField({\n      type: \"optionValueChange\",\n      payload: {\n        event\n      }\n    });\n  };\n\n  const onOptionDelete = event => {\n    setEditedField(_objectSpread({}, editedField, {\n      fieldOptions: editedField.fieldOptions.filter(e => event.target.id !== e.id ? e : null)\n    }));\n  };\n\n  const setupEditedField = obj => {\n    setEditedField(obj);\n    !displayComponent ? setDisplayComponent(true) : null;\n  };\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"h4\",\n    component: \"h2\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, \"Custom Client Fields\"), __jsx(CustomFieldsList, {\n    deleteField: deleteField,\n    fields: fields,\n    setupEditedField: setupEditedField,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }), __jsx(AddOrEditField, {\n    editedField: editedField,\n    displayComponent: displayComponent,\n    fieldMethods: fieldMethods,\n    handleOption: __jsx(SelectFieldOptions, {\n      options: editedField.fieldOptions,\n      onOptionChange: onOptionChange,\n      onOptionDelete: onOptionDelete,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }));\n};\n\nexport default CustomClientFields;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/CustomFields.tsx"],"names":["useState","useReducer","AddOrEditField","axios","globalVars","uniqid","CustomFieldsList","Typography","SelectFieldOptions","CustomClientFields","fields","refreshList","blankFieldObject","fieldName","fieldType","fieldOptions","displayComponent","setDisplayComponent","editedField","setEditedField","state","action","type","payload","event","target","value","options","selectedIndex","id","filter","el","fieldMethods","onNameChange","onSelectChange","handleOptionSpawn","toggleDisplayComponent","saveEditedField","fieldIsUpdated","res","method","url","serverURL","data","responseType","msg","reset","fieldIsCreated","deleteField","resData","onOptionChange","onOptionDelete","e","setupEditedField","obj"],"mappings":"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","sourcesContent":["import { useState, useReducer } from \"react\";\nimport AddOrEditField from \"./AddOrEditField\";\nimport axios from \"axios\";\nimport globalVars from \"../library/globalVariables\";\nimport uniqid from \"uniqid\";\nimport CustomFieldsList from \"./CustomFieldsList\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SelectFieldOptions from \"./SelectFieldOptions\";\n\n//TODO: EDIT OPTIONU SE PRERENDEROVAVA\n//TODO: TO much baskspace u optionu uplne odstranÃ­ pole\n\nconst CustomClientFields = ({ fields, refreshList }: any) => {\n  const blankFieldObject = {\n    fieldName: \"\",\n    fieldType: \"text\",\n    fieldOptions: []\n  };\n\n  const [displayComponent, setDisplayComponent] = useState(false);\n\n  const [editedField, setEditedField] = useReducer((state, action) => {\n    switch (action.type) {\n      case \"fieldNameChange\":\n        return {\n          ...state,\n          fieldName: action.payload.event.target.value\n        };\n      case \"selectValueChange\":\n        return {\n          ...state,\n          fieldType:\n            action.payload.event.target.options[\n              action.payload.event.target.options.selectedIndex\n            ].value\n        };\n      case \"newOptionSpawn\":\n        return {\n          ...state,\n          fieldOptions: [\n            ...editedField.fieldOptions,\n            { id: uniqid(), value: \"\" }\n          ]\n        };\n      case \"clear\":\n        return {\n          blankFieldObject\n        };\n      case \"optionValueChange\":\n        return {\n          ...state,\n          fieldOptions: state.fieldOptions.filter((el: any) =>\n            action.type.event.target.id === el.id\n              ? (el.value = action.type.event.target.value)\n              : el\n          )\n        };\n      default:\n        return state;\n    }\n  }, blankFieldObject);\n\n  const fieldMethods = {\n    onNameChange(event: any) {\n      setEditedField({\n        type: \"fieldNameChange\",\n        payload: { event }\n      });\n    },\n    onSelectChange(event: any) {\n      setEditedField({\n        type: \"selectValueChange\",\n        payload: { event }\n      });\n    },\n    handleOptionSpawn() {\n      setEditedField({\n        type: \"newOptionSpawn\"\n      });\n    },\n    toggleDisplayComponent() {\n      displayComponent ? setDisplayComponent(false) : setDisplayComponent(true);\n      setEditedField({\n        type: \"clear\"\n      });\n    },\n    saveEditedField() {\n      const fieldIsUpdated = async () => {\n        const { fieldName, fieldType, fieldOptions, id } = editedField;\n        const res = await axios({\n          method: \"put\",\n          url: `${globalVars.serverURL}/fields/${id}`,\n          data: { fieldName, fieldType, fieldOptions },\n          responseType: \"json\"\n        });\n        const data = await res.data;\n        if (data.msg === \"Success\") {\n          reset();\n        }\n      };\n\n      const fieldIsCreated = async () => {\n        const res = await axios({\n          method: \"post\",\n          url: `${globalVars.serverURL}/fields/`,\n          data: editedField,\n          responseType: \"json\"\n        });\n        const data = await res.data;\n        if (data.msg === \"Success\") {\n          reset();\n        }\n      };\n      !editedField.id ? fieldIsCreated() : fieldIsUpdated();\n    }\n  };\n\n  const reset = () => {\n    setDisplayComponent(false);\n    setEditedField({ type: \"clear\" });\n    refreshList();\n  };\n\n  const deleteField = async (id: any) => {\n    const res = await axios({\n      method: \"delete\",\n      url: `${globalVars.serverURL}/fields/${id}`,\n      responseType: \"json\"\n    });\n    const resData = await res.data;\n    resData.msg === \"Success\" ? refreshList() : null;\n  };\n\n  const onOptionChange = (event: any) => {\n    setEditedField({\n      type: \"optionValueChange\",\n      payload: { event }\n    });\n  };\n\n  const onOptionDelete = (event: any) => {\n    setEditedField({\n      ...editedField,\n      fieldOptions: editedField.fieldOptions.filter((e: any) =>\n        event.target.id !== e.id ? e : null\n      )\n    });\n  };\n\n  const setupEditedField = (obj: any) => {\n    setEditedField(obj);\n    !displayComponent ? setDisplayComponent(true) : null;\n  };\n\n  return (\n    <div>\n      <Typography variant=\"h4\" component=\"h2\" gutterBottom>\n        Custom Client Fields\n      </Typography>\n      <CustomFieldsList\n        deleteField={deleteField}\n        fields={fields}\n        setupEditedField={setupEditedField}\n      />\n      <AddOrEditField\n        editedField={editedField}\n        displayComponent={displayComponent}\n        fieldMethods={fieldMethods}\n        handleOption={\n          <SelectFieldOptions\n            options={editedField.fieldOptions}\n            onOptionChange={onOptionChange}\n            onOptionDelete={onOptionDelete}\n          />\n        }\n      />\n    </div>\n  );\n};\n\nexport default CustomClientFields;\n"]},"metadata":{},"sourceType":"module"}