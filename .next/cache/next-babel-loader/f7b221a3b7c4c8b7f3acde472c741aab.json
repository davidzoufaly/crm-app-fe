{"ast":null,"code":"import _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nclass StringMethods {\n  constructor(_text) {\n    _defineProperty(this, \"text\", void 0);\n\n    _defineProperty(this, \"camelStringToText\", () => {\n      this.text = _Array$from(this.text).map(e => e === e.toUpperCase() ? e = `%-%${e.toLowerCase()}` : e).join(\"\").replace(/%-%/g, \" \");\n      return this;\n    });\n\n    _defineProperty(this, \"firstCharUpperCase\", () => {\n      this.text = _Array$from(this.text).map((e, i) => i === 0 ? e.toLocaleUpperCase() : e).join(\"\");\n      return this;\n    });\n\n    _defineProperty(this, \"removeSlash\", () => {\n      this.text = this.text.replace(\"/\", \"\");\n      return this;\n    });\n\n    _defineProperty(this, \"addStringToEnd\", text => {\n      this.text = this.text + \" \" + text;\n      return this;\n    });\n\n    _defineProperty(this, \"textToCamelString\", () => {\n      let array = _Array$from(this.text.toLowerCase());\n\n      for (let i = 0; i < array.length; i++) {\n        if (array[i] === \" \") {\n          array[i + 1] = array[i + 1].toUpperCase();\n          array.splice(i, 1);\n        }\n      }\n\n      this.text = array.join(\"\");\n      return this;\n    });\n\n    _defineProperty(this, \"replaceStringDiacritics\", () => {\n      this.text = this.text.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n      return this;\n    });\n\n    _defineProperty(this, \"getString\", () => {\n      return this.text;\n    });\n\n    this.text = _text;\n  }\n\n}\n\nexport default StringMethods;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/library/stringMethods.tsx"],"names":["StringMethods","constructor","text","map","e","toUpperCase","toLowerCase","join","replace","i","toLocaleUpperCase","array","length","splice","normalize"],"mappings":";;;AAAA,MAAMA,aAAN,CAAoB;AAGlBC,EAAAA,WAAW,CAACC,KAAD,EAAe;AAAA;;AAAA,+CAIN,MAAM;AACxB,WAAKA,IAAL,GAAY,YAAW,KAAKA,IAAhB,EACTC,GADS,CACLC,CAAC,IAAKA,CAAC,KAAKA,CAAC,CAACC,WAAF,EAAN,GAAyBD,CAAC,GAAI,MAAKA,CAAC,CAACE,WAAF,EAAgB,EAAnD,GAAwDF,CADzD,EAETG,IAFS,CAEJ,EAFI,EAGTC,OAHS,CAGD,MAHC,EAGO,GAHP,CAAZ;AAKA,aAAO,IAAP;AACD,KAXyB;;AAAA,gDAaL,MAAM;AACzB,WAAKN,IAAL,GAAY,YAAW,KAAKA,IAAhB,EACTC,GADS,CACL,CAACC,CAAD,EAAIK,CAAJ,KAAWA,CAAC,KAAK,CAAN,GAAUL,CAAC,CAACM,iBAAF,EAAV,GAAkCN,CADxC,EAETG,IAFS,CAEJ,EAFI,CAAZ;AAIA,aAAO,IAAP;AACD,KAnByB;;AAAA,yCAqBZ,MAAM;AAClB,WAAKL,IAAL,GAAY,KAAKA,IAAL,CAAUM,OAAV,CAAkB,GAAlB,EAAuB,EAAvB,CAAZ;AACA,aAAO,IAAP;AACD,KAxByB;;AAAA,4CA0BRN,IAAD,IAAkB;AACjC,WAAKA,IAAL,GAAY,KAAKA,IAAL,GAAY,GAAZ,GAAkBA,IAA9B;AACA,aAAO,IAAP;AACD,KA7ByB;;AAAA,+CA+BN,MAAM;AACxB,UAAIS,KAAK,GAAG,YAAW,KAAKT,IAAL,CAAUI,WAAV,EAAX,CAAZ;;AAEA,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGE,KAAK,CAACC,MAA1B,EAAkCH,CAAC,EAAnC,EAAuC;AACrC,YAAIE,KAAK,CAACF,CAAD,CAAL,KAAa,GAAjB,EAAsB;AACpBE,UAAAA,KAAK,CAACF,CAAC,GAAG,CAAL,CAAL,GAAeE,KAAK,CAACF,CAAC,GAAG,CAAL,CAAL,CAAaJ,WAAb,EAAf;AACAM,UAAAA,KAAK,CAACE,MAAN,CAAaJ,CAAb,EAAgB,CAAhB;AACD;AACF;;AACD,WAAKP,IAAL,GAAYS,KAAK,CAACJ,IAAN,CAAW,EAAX,CAAZ;AACA,aAAO,IAAP;AACD,KA1CyB;;AAAA,qDA4CA,MAAM;AAC9B,WAAKL,IAAL,GAAY,KAAKA,IAAL,CAAUY,SAAV,CAAoB,KAApB,EAA2BN,OAA3B,CAAmC,kBAAnC,EAAuD,EAAvD,CAAZ;AACA,aAAO,IAAP;AACD,KA/CyB;;AAAA,uCAiDd,MAAM;AAChB,aAAO,KAAKN,IAAZ;AACD,KAnDyB;;AACxB,SAAKA,IAAL,GAAYA,KAAZ;AACD;;AALiB;;AAyDpB,eAAeF,aAAf","sourcesContent":["class StringMethods {\n  private text: string;\n\n  constructor(text: string) {\n    this.text = text;\n  }\n\n  camelStringToText = () => {\n    this.text = Array.from(this.text)\n      .map(e => (e === e.toUpperCase() ? (e = `%-%${e.toLowerCase()}`) : e))\n      .join(\"\")\n      .replace(/%-%/g, \" \");\n\n    return this;\n  };\n\n  firstCharUpperCase = () => {\n    this.text = Array.from(this.text)\n      .map((e, i) => (i === 0 ? e.toLocaleUpperCase() : e ))\n      .join(\"\");\n\n    return this;\n  };\n\n  removeSlash = () => {\n    this.text = this.text.replace(\"/\", \"\");\n    return this;\n  };\n\n  addStringToEnd = (text: string) => {\n    this.text = this.text + \" \" + text;\n    return this;\n  };\n\n  textToCamelString = () => {\n    let array = Array.from(this.text.toLowerCase());\n\n    for (let i = 0; i < array.length; i++) {\n      if (array[i] === \" \") {\n        array[i + 1] = array[i + 1].toUpperCase();\n        array.splice(i, 1);\n      }\n    }\n    this.text = array.join(\"\");\n    return this;\n  };\n\n  replaceStringDiacritics = () => {\n    this.text = this.text.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n    return this;\n  }\n\n  getString = () => {\n    return this.text;\n  }\n}\n\nexport default StringMethods;\n"]},"metadata":{},"sourceType":"module"}