{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/EmailForm.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport axios from \"axios\";\nimport globalVars from \"../library/globalVariables\";\nimport { useState, useEffect } from \"react\";\n\nconst EmailForm = ({\n  to,\n  isEmailCreated,\n  toggleIsEmailCreated,\n  unCheckAll\n}) => {\n  const initEmail = {\n    to,\n    subject: \"\",\n    message: \"\"\n  };\n  const {\n    0: email,\n    1: setEmail\n  } = useState(initEmail);\n  useEffect(() => {\n    setEmail(_objectSpread({}, email, {\n      to: to\n    }));\n  }, [to]);\n\n  const sendEmail = async e => {\n    e.preventDefault();\n    let loading = true;\n    console.log(loading);\n    const res = await axios({\n      method: \"post\",\n      data: email,\n      url: `${globalVars.serverURL}/emails/send`,\n      responseType: \"json\"\n    });\n    const data = await res.data;\n\n    if (data.msg === \"Success\") {\n      alert(\"Your email has been succesfully sent.\");\n      setEmail(initEmail); // if email is sending from clients page\n\n      toggleIsEmailCreated();\n      unCheckAll ? unCheckAll() : null;\n    } else {\n      alert(\"Something went wrong!\");\n    }\n  };\n\n  const onChange = e => {\n    setEmail(_objectSpread({}, email, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return isEmailCreated && to.length > 0 ? __jsx(\"form\", {\n    onSubmit: sendEmail,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: \"email-to\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"To\"), __jsx(\"input\", {\n    type: \"text\",\n    id: \"email-to\",\n    name: \"to\",\n    value: email.to,\n    disabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), __jsx(\"label\", {\n    htmlFor: \"email-subject\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Subject\"), __jsx(\"input\", {\n    type: \"text\",\n    id: \"email-to\",\n    name: \"subject\",\n    value: email.subject,\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), __jsx(\"label\", {\n    htmlFor: \"email-message\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"Message\"), __jsx(\"textarea\", {\n    name: \"message\",\n    onChange: onChange,\n    value: email.message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    onClick: toggleIsEmailCreated,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"Cancel\"), __jsx(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Send\")) : null;\n};\n\nexport default EmailForm;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/EmailForm.tsx"],"names":["axios","globalVars","useState","useEffect","EmailForm","to","isEmailCreated","toggleIsEmailCreated","unCheckAll","initEmail","subject","message","email","setEmail","sendEmail","e","preventDefault","loading","console","log","res","method","data","url","serverURL","responseType","msg","alert","onChange","target","name","value","length"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport globalVars from \"../library/globalVariables\";\nimport { useState, useEffect } from \"react\";\n\nconst EmailForm = ({ to, isEmailCreated, toggleIsEmailCreated, unCheckAll }: any) => {\n  const initEmail = { to, subject: \"\", message: \"\" };\n  const [email, setEmail] = useState(initEmail);\n\n  useEffect(() => {\n    setEmail({ ...email, to: to });\n  }, [to]);\n\n  const sendEmail = async e => {\n    e.preventDefault();\n    let loading = true;\n    console.log(loading);\n    const res = await axios({\n      method: \"post\",\n      data: email,\n      url: `${globalVars.serverURL}/emails/send`,\n      responseType: \"json\"\n    });\n    const data = await res.data;\n    if (data.msg === \"Success\") {\n      alert(\"Your email has been succesfully sent.\");\n      setEmail(initEmail);\n      // if email is sending from clients page\n      toggleIsEmailCreated();\n      unCheckAll ? unCheckAll() : null;\n    } else {\n      alert(\"Something went wrong!\");\n    }\n  };\n\n  const onChange = e => {\n    setEmail({ ...email, [e.target.name]: e.target.value });\n  };\n\n  return isEmailCreated && to.length > 0 ? (\n    <form onSubmit={sendEmail}>\n      <label htmlFor=\"email-to\">To</label>\n      <input type=\"text\" id=\"email-to\" name=\"to\" value={email.to} disabled />\n      <label htmlFor=\"email-subject\">Subject</label>\n      <input\n        type=\"text\"\n        id=\"email-to\"\n        name=\"subject\"\n        value={email.subject}\n        onChange={onChange}\n      />\n      <label htmlFor=\"email-message\">Message</label>\n      <textarea name=\"message\" onChange={onChange} value={email.message} />\n      <button onClick={toggleIsEmailCreated}>Cancel</button>\n      <button type=\"submit\">Send</button>\n    </form>\n  ) : null;\n};\n\nexport default EmailForm;\n"]},"metadata":{},"sourceType":"module"}