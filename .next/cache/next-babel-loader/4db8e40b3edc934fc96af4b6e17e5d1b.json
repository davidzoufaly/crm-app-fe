{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/homepage/LoginForm.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useContext } from \"react\";\nimport axios from \"axios\";\nimport UserContext from \"../UserContext\";\nimport TextInput from \"./TextInput\";\nimport Button from \"./Button\";\nimport LoadingSpinner from \"../LoadingSpinner\";\nimport globalVars from \"../../library/globalVariables\";\nimport languages from \"../../library/languages\";\nimport stringMethods from \"../../library/stringMethods\";\nimport { Typography, Box } from \"@material-ui/core\";\n\nconst LoginForm = () => {\n  const {\n    0: user,\n    1: setUser\n  } = useState({\n    username: \"\",\n    password: \"\"\n  });\n  const userContext = useContext(UserContext);\n  const {\n    0: logging,\n    1: setLogging\n  } = useState(false);\n\n  const onChange = e => {\n    e.target.name === \"username\" ? setUser(_objectSpread({}, user, {\n      username: e.target.value\n    })) : setUser(_objectSpread({}, user, {\n      password: e.target.value\n    }));\n  };\n\n  const onLogin = async () => {\n    setLogging(true);\n    setTimeout(async () => {\n      const userRes = await axios({\n        method: \"POST\",\n        data: user,\n        url: `${globalVars.serverURL}/users/authenticate-user`,\n        responseType: \"json\"\n      });\n      const userData = await userRes.data;\n      userData ? setLogging(false) : null;\n\n      if (userData.msg === \"Success\") {\n        userContext.setUser(userData.key);\n      } else {\n        alert(languages.en.somethingWentWrong);\n      }\n    }, 5000);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Typography, {\n    component: \"h2\",\n    variant: \"h4\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, new stringMethods(languages.en.login).firstCharUpperCase().getString()), __jsx(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, __jsx(TextInput, {\n    onChange: onChange,\n    type: \"text\",\n    value: user.username,\n    text: \"username\",\n    title: new stringMethods(languages.en.username).firstCharUpperCase().getString(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), __jsx(TextInput, {\n    onChange: onChange,\n    type: \"password\",\n    value: user.password,\n    text: \"password\",\n    title: languages.en.password,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), __jsx(Box, {\n    mt: \"2rem\",\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, logging ? __jsx(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }) : null, __jsx(Button, {\n    onClick: onLogin,\n    text: languages.en.login,\n    variant: \"contained\",\n    disabled: logging,\n    style: {\n      marginLeft: \"2rem\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }))));\n};\n\nexport default LoginForm;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/homepage/LoginForm.tsx"],"names":["useState","useContext","axios","UserContext","TextInput","Button","LoadingSpinner","globalVars","languages","stringMethods","Typography","Box","LoginForm","user","setUser","username","password","userContext","logging","setLogging","onChange","e","target","name","value","onLogin","setTimeout","userRes","method","data","url","serverURL","responseType","userData","msg","key","alert","en","somethingWentWrong","login","firstCharUpperCase","getString","marginLeft"],"mappings":"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","sourcesContent":["import { useState, useContext } from \"react\";\nimport axios from \"axios\";\nimport UserContext from \"../UserContext\";\nimport TextInput from \"./TextInput\";\nimport Button from \"./Button\";\nimport LoadingSpinner from \"../LoadingSpinner\";\nimport globalVars from \"../../library/globalVariables\";\nimport languages from \"../../library/languages\";\nimport stringMethods from \"../../library/stringMethods\";\nimport { Typography, Box } from \"@material-ui/core\";\n\nconst LoginForm = () => {\n  const [user, setUser] = useState({ username: \"\", password: \"\" });\n  const userContext = useContext(UserContext);\n  const [logging, setLogging] = useState(false);\n\n  const onChange = e => {\n    e.target.name === \"username\"\n      ? setUser({ ...user, username: e.target.value })\n      : setUser({ ...user, password: e.target.value });\n  };\n\n  const onLogin = async () => {\n    setLogging(true);\n    setTimeout(async() => {\n      const userRes = await axios({\n        method: \"POST\",\n        data: user,\n        url: `${globalVars.serverURL}/users/authenticate-user`,\n        responseType: \"json\"\n      });\n      const userData = await userRes.data;\n      userData ? setLogging(false) : null;\n      if (userData.msg === \"Success\") {\n        userContext.setUser(userData.key);\n      } else {\n        alert(languages.en.somethingWentWrong);\n      }\n    }, 5000)\n  };\n\n  return (\n    <>\n      <Typography component=\"h2\" variant=\"h4\" gutterBottom>\n        {new stringMethods(languages.en.login).firstCharUpperCase().getString()}\n      </Typography>\n      <form>\n        <TextInput\n          onChange={onChange}\n          type=\"text\"\n          value={user.username}\n          text=\"username\"\n          title={new stringMethods(languages.en.username)\n            .firstCharUpperCase()\n            .getString()}\n        />\n        <TextInput\n          onChange={onChange}\n          type=\"password\"\n          value={user.password}\n          text=\"password\"\n          title={languages.en.password}\n        />\n        <Box mt=\"2rem\" display=\"flex\" justifyContent=\"flex-end\">\n          {logging\n            ? <LoadingSpinner/>\n            : null}\n          <Button onClick={onLogin} text={languages.en.login} variant={\"contained\"} disabled={logging} style={{marginLeft: \"2rem\"}}/>\n        </Box>\n      </form>\n    </>\n  );\n};\n\nexport default LoginForm;\n"]},"metadata":{},"sourceType":"module"}