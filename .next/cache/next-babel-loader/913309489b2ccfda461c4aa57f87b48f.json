{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/pages/settings/[key].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Header from \"../../components/Header\";\nimport { useRouter } from \"next/router\";\nimport { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport UserContext from \"../../components/UserContext\";\nimport DefaultFieldsSection from \"../../components/settings/DefaultFieldsSection\";\nimport CustomFieldsSection from \"../../components/settings/customFields/CustomFieldsSection\";\nimport LoadingSpinner from \"../../components/LoadingSpinner\";\nimport EmailSettingsSection from \"../../components/settings/emailSettings/EmailSettingsSection\";\nimport WebFormSection from \"../../components/settings/webform/WebFormSection\";\nimport globalVars from \"../../library/globalVariables\";\nimport stringMethods from \"../../library/stringMethods\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst Settings = ({\n  dataFields,\n  username,\n  pass\n}) => {\n  const router = useRouter();\n  const {\n    0: fields,\n    1: setField\n  } = useState(dataFields);\n  const {\n    0: initialized,\n    1: setInitialized\n  } = useState(false);\n  const {\n    0: sections,\n    1: setSection\n  } = useState({});\n  const user = useContext(UserContext);\n\n  const toggleSection = e => {\n    setSection(_objectSpread({}, sections, {\n      [e.target.name]: e.target.checked\n    }));\n  };\n\n  const refreshList = async () => {\n    //get data from DB after change\n    const res = await axios({\n      method: \"get\",\n      url: `${globalVars.serverURL}/fields/`,\n      responseType: \"json\"\n    });\n    const data = await res.data;\n    setField(data);\n  };\n\n  useEffect(() => {\n    //title from url\n    const title = new stringMethods(router.pathname).removeSlash().removeSlashAndTextAfter().firstCharUpperCase().addStringToEnd(globalVars.titleSubText).getString();\n    document.title = title; //componendDidMount effect\n\n    setInitialized(true);\n    user.checkUser();\n  }, [router]);\n  const h1 = new stringMethods(router.pathname).removeSlash().removeSlashAndTextAfter().firstCharUpperCase().getString();\n  return !user.user.signedIn && !initialized ? __jsx(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }) : __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), __jsx(Typography, {\n    variant: \"h3\",\n    component: \"h1\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, h1), __jsx(DefaultFieldsSection, {\n    fields: fields,\n    toggleSection: toggleSection,\n    sections: sections,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), __jsx(CustomFieldsSection, {\n    fetchedFields: fields,\n    refreshList: refreshList,\n    sections: sections,\n    toggleSection: toggleSection,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), __jsx(EmailSettingsSection, {\n    username: username,\n    pass: pass,\n    toggleSection: toggleSection,\n    sections: sections,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), __jsx(WebFormSection, {\n    fields: fields,\n    toggleSection: toggleSection,\n    sections: sections,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }));\n};\n\nSettings.getInitialProps = async context => {\n  const resFields = await axios({\n    method: \"GET\",\n    params: {\n      key: context.query.key\n    },\n    url: `${globalVars.serverURL}/fields`,\n    responseType: \"json\"\n  });\n  const dataFields = await resFields.data;\n  const resEmailSettings = await axios({\n    method: \"GET\",\n    params: {\n      key: context.query.key\n    },\n    url: `${globalVars.serverURL}/emails/email-settings`,\n    responseType: \"json\"\n  });\n  const dataEmailSettings = await resEmailSettings.data;\n  const {\n    username,\n    pass\n  } = await dataEmailSettings;\n  return {\n    dataFields,\n    username,\n    pass\n  };\n};\n\nexport default Settings;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/pages/settings/[key].tsx"],"names":["Header","useRouter","useState","useEffect","useContext","axios","UserContext","DefaultFieldsSection","CustomFieldsSection","LoadingSpinner","EmailSettingsSection","WebFormSection","globalVars","stringMethods","Typography","Settings","dataFields","username","pass","router","fields","setField","initialized","setInitialized","sections","setSection","user","toggleSection","e","target","name","checked","refreshList","res","method","url","serverURL","responseType","data","title","pathname","removeSlash","removeSlashAndTextAfter","firstCharUpperCase","addStringToEnd","titleSubText","getString","document","checkUser","h1","signedIn","getInitialProps","context","resFields","params","key","query","resEmailSettings","dataEmailSettings"],"mappings":"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","sourcesContent":["import Header from \"../../components/Header\";\nimport { useRouter } from \"next/router\";\nimport { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport UserContext from \"../../components/UserContext\";\nimport DefaultFieldsSection from \"../../components/settings/DefaultFieldsSection\";\nimport CustomFieldsSection from \"../../components/settings/customFields/CustomFieldsSection\";\nimport LoadingSpinner from \"../../components/LoadingSpinner\";\nimport EmailSettingsSection from \"../../components/settings/emailSettings/EmailSettingsSection\";\nimport WebFormSection from \"../../components/settings/webform/WebFormSection\";\nimport globalVars from \"../../library/globalVariables\";\nimport stringMethods from \"../../library/stringMethods\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst Settings = ({ dataFields, username, pass }: any) => {\n  const router = useRouter();\n  const [fields, setField] = useState(dataFields);\n  const [initialized, setInitialized] = useState(false);\n  const [sections, setSection] = useState({});\n  const user = useContext(UserContext);\n\n  const toggleSection = e => {\n    setSection({\n      ...sections,\n      [e.target.name]: e.target.checked\n    });\n  };\n\n  const refreshList = async () => {\n    //get data from DB after change\n    const res = await axios({\n      method: \"get\",\n      url: `${globalVars.serverURL}/fields/`,\n      responseType: \"json\"\n    });\n    const data = await res.data;\n    setField(data);\n  };\n\n  useEffect(() => {\n    //title from url\n    const title = new stringMethods(router.pathname)\n      .removeSlash()\n      .removeSlashAndTextAfter()\n      .firstCharUpperCase()\n      .addStringToEnd(globalVars.titleSubText)\n      .getString();\n    document.title = title;\n    //componendDidMount effect\n    setInitialized(true);\n    user.checkUser();\n  }, [router]);\n\n  const h1 = new stringMethods(router.pathname)\n    .removeSlash()\n    .removeSlashAndTextAfter()\n    .firstCharUpperCase()\n    .getString();\n\n  return !user.user.signedIn && !initialized ? (\n    <LoadingSpinner />\n  ) : (\n    <div>\n      <Header />\n      <Typography variant=\"h3\" component=\"h1\" gutterBottom>\n        {h1}\n      </Typography>\n      <DefaultFieldsSection\n        fields={fields}\n        toggleSection={toggleSection}\n        sections={sections}\n      />\n      <CustomFieldsSection\n        fetchedFields={fields}\n        refreshList={refreshList}\n        sections={sections}\n        toggleSection={toggleSection}\n      />\n      <EmailSettingsSection\n        username={username}\n        pass={pass}\n        toggleSection={toggleSection}\n        sections={sections}\n      />\n      <WebFormSection\n        fields={fields}\n        toggleSection={toggleSection}\n        sections={sections}\n      />\n    </div>\n  );\n};\n\nSettings.getInitialProps = async (context: any) => {\n  const resFields = await axios({\n    method: \"GET\",\n    params: { key: context.query.key },\n    url: `${globalVars.serverURL}/fields`,\n    responseType: \"json\"\n  });\n  const dataFields = await resFields.data;\n\n  const resEmailSettings = await axios({\n    method: \"GET\",\n    params: { key: context.query.key },\n    url: `${globalVars.serverURL}/emails/email-settings`,\n    responseType: \"json\"\n  });\n\n  const dataEmailSettings = await resEmailSettings.data;\n  const { username, pass } = await dataEmailSettings;\n\n  return { dataFields, username, pass };\n};\n\nexport default Settings;\n"]},"metadata":{},"sourceType":"module"}