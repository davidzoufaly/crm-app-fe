{"ast":null,"code":"var _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/clients/TableBody.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useContext } from \"react\";\nimport Link from \"next/link\";\nimport uniqid from \"uniqid\";\nimport UserContext from \"../UserContext\";\nimport languages from \"../../library/languages\";\nimport PersonIcon from '@material-ui/icons/Person';\nimport { TableCell, TableRow, Checkbox, Button } from '@material-ui/core';\n\nvar TableBody = function TableBody(_ref) {\n  var clients = _ref.clients,\n      sort = _ref.sort,\n      fields = _ref.fields,\n      handleCheckbox = _ref.handleCheckbox;\n  var sortBy = sort.sortBy,\n      reverse = sort.reverse;\n  var user = useContext(UserContext); // field we want to filter is type number -> return true and filter it correctly -> 23 > 4\n\n  if (fields.some(function (e) {\n    return e.fieldName === sortBy && e.fieldType === \"number\";\n  })) {\n    clients.sort(function (a, b) {\n      return reverse ? b[sortBy] - a[sortBy] : a[sortBy] - b[sortBy];\n    });\n  } else {\n    clients.sort(function (a, b) {\n      return reverse ? b[sortBy] > a[sortBy] ? -1 : 1 : b[sortBy] < a[sortBy] ? -1 : 1;\n    });\n  }\n\n  var fieldNames = [];\n  fields.forEach(function (e) {\n    return fieldNames.push(e.fieldName);\n  });\n  var tableClients = clients.map(function (client) {\n    var items = [];\n\n    for (var i = 0; i < fieldNames.length; i++) {\n      items[i] = null;\n    }\n\n    var tableItem = function tableItem() {\n      for (var key in client) {\n        //show only clients data with existing fields\n        if (client[key] !== client._id && fieldNames.includes(key)) {\n          items[fieldNames.indexOf(key)] = __jsx(TableCell, {\n            key: uniqid(),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 44\n            },\n            __self: this\n          }, client[key]);\n        }\n      } // add put checkbox at first position\n\n\n      items.unshift(__jsx(TableCell, {\n        padding: \"checkbox\",\n        key: uniqid(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, __jsx(Checkbox, {\n        color: \"primary\",\n        checked: !!client.isChecked || client.isChecked,\n        onChange: function onChange() {\n          return handleCheckbox(client._id);\n        },\n        inputProps: {\n          'aria-label': 'primary checkbox'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }))); // add put profile link at last position\n\n      items.push(__jsx(TableCell, {\n        key: uniqid(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, __jsx(Link, {\n        href: \"/client/[id]/?key=\".concat(user.user.userkey),\n        as: \"/client/\".concat(client._id, \"/?key=\").concat(user.user.userkey),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, __jsx(Button, {\n        startIcon: __jsx(PersonIcon, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, languages.en.go))));\n      items = items.map(function (e) {\n        return !!!e ? __jsx(TableCell, {\n          key: uniqid(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }) : e;\n      });\n      return items;\n    };\n\n    return __jsx(TableRow, {\n      key: client._id,\n      hover: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, tableItem());\n  });\n  return tableClients;\n};\n\nexport default TableBody;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/clients/TableBody.tsx"],"names":["useContext","Link","uniqid","UserContext","languages","PersonIcon","TableCell","TableRow","Checkbox","Button","TableBody","clients","sort","fields","handleCheckbox","sortBy","reverse","user","some","e","fieldName","fieldType","a","b","fieldNames","forEach","push","tableClients","map","client","items","i","length","tableItem","key","_id","includes","indexOf","unshift","isChecked","userkey","en","go"],"mappings":"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","sourcesContent":["import { useContext } from \"react\";\nimport Link from \"next/link\";\nimport uniqid from \"uniqid\";\nimport UserContext from \"../UserContext\";\nimport languages from \"../../library/languages\";\nimport PersonIcon from '@material-ui/icons/Person';\nimport {TableCell, TableRow, Checkbox, Button } from '@material-ui/core';\n\nconst TableBody = ({ clients, sort, fields, handleCheckbox }: any) => {\n  const { sortBy, reverse } = sort;\n  const user = useContext(UserContext);\n  // field we want to filter is type number -> return true and filter it correctly -> 23 > 4\n  if (fields.some(e => e.fieldName === sortBy && e.fieldType === \"number\")) {\n    clients.sort((a: any, b: any) =>\n      reverse ? b[sortBy] - a[sortBy] : a[sortBy] - b[sortBy]\n    );\n  } else {\n    clients.sort((a: any, b: any) =>\n      reverse\n        ? b[sortBy] > a[sortBy]\n          ? -1\n          : 1\n        : b[sortBy] < a[sortBy]\n        ? -1\n        : 1\n    );\n  }\n\n  const fieldNames = [];\n  fields.forEach((e: any) => fieldNames.push(e.fieldName));\n\n  const tableClients = clients.map((client: any) => {\n    let items = [];\n\n    for (let i = 0; i < fieldNames.length; i++) {\n      items[i] = null;\n    }\n\n    const tableItem = () => {\n      for (let key in client) {\n        //show only clients data with existing fields\n        if (client[key] !== client._id && fieldNames.includes(key)) {\n          items[fieldNames.indexOf(key)] = (\n            <TableCell key={uniqid()}>{client[key]}</TableCell>\n          );\n        }\n      }\n      // add put checkbox at first position\n      items.unshift(\n        <TableCell padding=\"checkbox\" key={uniqid()}>\n        <Checkbox\n        color=\"primary\"\n        checked={!!client.isChecked || client.isChecked}\n        onChange={() => handleCheckbox(client._id)}\n        inputProps={{\n          'aria-label': 'primary checkbox',\n        }}\n      />\n      </TableCell>\n      );\n      // add put profile link at last position\n      items.push(\n        <TableCell key={uniqid()}>\n          <Link\n            href={`/client/[id]/?key=${user.user.userkey}`}\n            as={`/client/${client._id}/?key=${user.user.userkey}`}\n          >\n            <Button startIcon={<PersonIcon/>}>{languages.en.go}</Button>\n          </Link>\n        </TableCell>\n      );\n\n      items = items.map(e =>\n        !!!e ? <TableCell key={uniqid()}></TableCell> : e\n      );\n\n      return items;\n    };\n\n    return <TableRow key={client._id} hover={true}>{tableItem()}</TableRow>;\n  });\n  return tableClients;\n};\n\nexport default TableBody;\n"]},"metadata":{},"sourceType":"module"}