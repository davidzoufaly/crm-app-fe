{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/AddOrEditField.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport SelectFieldOptions from \"../components/SelectFieldOptions\";\nimport uniqid from \"uniqid\";\nimport axios from \"axios\";\nimport globalVars from \"../library/globalVariables\";\nimport { useState } from \"react\";\n\nconst AddOrEditField = ({\n  fieldObject,\n  changeDisplayComponent,\n  refreshList\n}) => {\n  const {\n    0: displayComponent,\n    1: setDisplayComponent\n  } = useState(false);\n\n  const saveField = async () => {\n    const res = await axios({\n      method: \"post\",\n      url: `${globalVars.serverURL}/fields/`,\n      data: updatedField,\n      responseType: \"json\"\n    });\n    const data = await res.data;\n    data.msg === \"Success\" ? changeDisplayComponent() : null;\n    console.log(fieldObject);\n    refreshList();\n  };\n\n  const onNameChange = event => {\n    setUpdatedField(_objectSpread({}, updatedField, {\n      fieldName: event.target.value\n    }));\n    console.log(updatedField);\n  };\n\n  const onSelectChange = event => {\n    setUpdatedField(_objectSpread({}, updatedField, {\n      fieldType: event.target.options[event.target.options.selectedIndex].value\n    }));\n  };\n\n  const handleOptionSpawn = () => {\n    setUpdatedField(_objectSpread({}, updatedField, {\n      fieldOptions: [...updatedField.fieldOptions, {\n        id: uniqid(),\n        value: \"\"\n      }]\n    }));\n  };\n\n  const onChange = event => {\n    setUpdatedField(_objectSpread({}, updatedField, {\n      fieldOptions: updatedField.fieldOptions.filter(e => event.target.id === e.id ? e.value = event.target.value : e)\n    }));\n  };\n\n  const onDelete = event => {\n    setUpdatedField(_objectSpread({}, updatedField, {\n      fieldOptions: updatedField.fieldOptions.filter(e => event.target.id !== e.id ? e : null)\n    }));\n  };\n\n  return displayComponent ? __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: \"field-name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Field name\"), __jsx(\"input\", {\n    type: \"text\",\n    id: \"field-name\",\n    defaultValue: updatedField.fieldName,\n    onChange: onNameChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), __jsx(\"label\", {\n    htmlFor: \"field-type\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Field type\"), __jsx(\"select\", {\n    id: \"field-type\",\n    onChange: onSelectChange,\n    defaultValue: updatedField.fieldType,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, __jsx(\"option\", {\n    value: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Text\"), __jsx(\"option\", {\n    value: \"select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"Select\"), __jsx(\"option\", {\n    value: \"number\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"Number\")), __jsx(SelectFieldOptions, {\n    options: updatedField.fieldOptions,\n    onChange: onChange,\n    onDelete: onDelete,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), updatedField.fieldType === \"select\" ? __jsx(\"button\", {\n    onClick: handleOptionSpawn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"New\") : null, __jsx(\"button\", {\n    onClick: saveField,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Save\"), __jsx(\"button\", {\n    onClick: changeDisplayComponent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"Cancel\")) : __jsx(\"button\", {\n    onClick: console.log(\"hi\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Add new field\");\n};\n\nexport default AddOrEditField;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/AddOrEditField.tsx"],"names":["SelectFieldOptions","uniqid","axios","globalVars","useState","AddOrEditField","fieldObject","changeDisplayComponent","refreshList","displayComponent","setDisplayComponent","saveField","res","method","url","serverURL","data","updatedField","responseType","msg","console","log","onNameChange","event","setUpdatedField","fieldName","target","value","onSelectChange","fieldType","options","selectedIndex","handleOptionSpawn","fieldOptions","id","onChange","filter","e","onDelete"],"mappings":"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","sourcesContent":["import SelectFieldOptions from \"../components/SelectFieldOptions\";\nimport uniqid from \"uniqid\";\nimport axios from \"axios\";\nimport globalVars from \"../library/globalVariables\";\nimport { useState } from \"react\";\n\nconst AddOrEditField = ({ fieldObject, changeDisplayComponent, refreshList }: any) => {\n  const [displayComponent, setDisplayComponent] = useState(false);\n\n  const saveField = async () => {\n\n    const res = await axios({\n      method: \"post\",\n      url: `${globalVars.serverURL}/fields/`,\n      data: updatedField,\n      responseType: \"json\"\n    });\n    const data = await res.data;\n    data.msg === \"Success\" ? changeDisplayComponent() : null;\n    console.log(fieldObject);\n    refreshList();\n  };\n\n  const onNameChange = (event: any) => {\n    setUpdatedField({ ...updatedField, fieldName: event.target.value});\n    console.log(updatedField);\n  };\n\n  const onSelectChange = (event: any) => {\n    setUpdatedField({\n      ...updatedField,\n      fieldType: event.target.options[event.target.options.selectedIndex].value\n    });\n  };\n\n  const handleOptionSpawn = () => {\n    setUpdatedField({\n      ...updatedField,\n      fieldOptions: [...updatedField.fieldOptions, { id: uniqid(), value: \"\" }]\n    });\n  };\n\n  const onChange = (event: any) => {\n    setUpdatedField({\n      ...updatedField,\n      fieldOptions: updatedField.fieldOptions.filter((e: any) =>\n        event.target.id === e.id ? (e.value = event.target.value) : e\n      )\n    });\n  };\n\n  const onDelete = (event: any) => {\n    setUpdatedField({\n      ...updatedField,\n      fieldOptions: updatedField.fieldOptions.filter((e: any) =>\n        event.target.id !== e.id ? e : null\n      )\n    });\n  };\n\n  return displayComponent ? (\n    <div>\n      <label htmlFor=\"field-name\">Field name</label>\n      <input\n        type=\"text\"\n        id=\"field-name\"\n        defaultValue={updatedField.fieldName}\n        onChange={onNameChange}\n      />\n      <label htmlFor=\"field-type\">Field type</label>\n      <select id=\"field-type\" onChange={onSelectChange} defaultValue={updatedField.fieldType}> \n        <option value=\"text\">Text</option>\n        <option value=\"select\">Select</option>\n        <option value=\"number\">Number</option>\n      </select>\n      <SelectFieldOptions\n        options={updatedField.fieldOptions}\n        onChange={onChange}\n        onDelete={onDelete}\n      />\n      {updatedField.fieldType === \"select\" ? (\n        <button onClick={handleOptionSpawn}>New</button>\n      ) : null}\n      <button onClick={saveField}>Save</button>\n      <button onClick={changeDisplayComponent}>Cancel</button>\n    </div>\n  ) : (<button onClick={console.log(\"hi\")}>Add new field</button>);\n};\n\nexport default AddOrEditField;\n"]},"metadata":{},"sourceType":"module"}