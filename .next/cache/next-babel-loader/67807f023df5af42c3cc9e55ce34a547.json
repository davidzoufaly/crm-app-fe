{"ast":null,"code":"var _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/CustomClientFields.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useState } from \"react\";\nimport Grid from '@material-ui/core/Grid';\nimport AddOrEditField from \"../components/AddOrEditField\";\nimport axios from \"axios\";\nimport globalVars from \"../library/globalVariables\";\nimport CustomFields from \"../components/CustomFields\";\nconst useStyles = makeStyles({\n  card: {\n    textAlign: \"center\",\n    height: \"100%\",\n    minWidth: \"300px\"\n  },\n  list: {\n    listStyleType: \"disc\"\n  },\n  title: {\n    fontSize: 14\n  },\n  pos: {\n    marginBottom: 12\n  }\n});\n\nconst CustomClientFields = ({\n  fields,\n  refreshList\n}) => {\n  const {\n    0: displayComponent,\n    1: setDisplayComponent\n  } = useState(false);\n  const {\n    0: editedField\n  } = useState({\n    fieldName: \"\",\n    fieldType: \"text\",\n    fieldPermanent: false,\n    fieldOptions: []\n  });\n\n  const deleteField = async event => {\n    const id = event.target.id;\n    const res = await axios({\n      method: \"delete\",\n      url: `${globalVars.serverURL}/fields/${id}`,\n      responseType: \"json\"\n    });\n    const resData = await res.data;\n    resData.msg === \"Success\" ? refreshList() : null;\n  };\n\n  const classes = useStyles({});\n\n  const changeDisplayComponent = () => {\n    displayComponent ? setDisplayComponent(false) : setDisplayComponent(true); //TODO: POSÍLAT PO KLIKU NA EDIT FIELD\n  }; // const customFields = fields\n  //   .filter(({ fieldPermanent }: any) => !fieldPermanent)\n  //   .map(({ fieldName, _id, fieldType, fieldOptions }: any) => {\n  //     const customFieldNameFormated = new stringMethods(fieldName.toLowerCase())\n  //       .firstCharUpperCase()\n  //       .getString();\n  //     const optionsMap = () => {\n  //       return fieldOptions.map((e: any) => {\n  //         const optionFormatedKey = new stringMethods(e.value)\n  //           .textToCamelString()\n  //           .replaceStringDiacritics()\n  //           .getString();\n  //         return <ListItem key={optionFormatedKey}><ListItemText primary={e.value.toLowerCase()} /></ListItem>\n  //       });\n  //     };\n  //   return (\n  //     <Grid item key={_id}>\n  //         <Card className={classes.card}>\n  //         <CardContent>\n  //         <Typography variant=\"h5\" component=\"h3\">\n  //             {customFieldNameFormated}\n  //         </Typography>\n  //         <Typography className={classes.pos} color=\"textSecondary\">\n  //             ({fieldType.toLowerCase()})\n  //         </Typography>\n  //             {fieldType === \"select\" ? <List className={classes.list} dense={true}>{optionsMap()}</List> : null}\n  //         <button onClick={changeDisplayComponent}>Edit field</button>\n  //         <button onClick={deleteField} id={_id}>Delete field</button>\n  //         </CardContent>\n  //         </Card>\n  //     </Grid>  \n  //   );\n  // });\n\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"Custom Client Fields\"), __jsx(Grid, {\n    container: true,\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, __jsx(CustomFields, {\n    deleteField: deleteField,\n    changeDisplayComponent: changeDisplayComponent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  })), !displayComponent ? __jsx(\"button\", {\n    onClick: changeDisplayComponent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"Add new field\") : __jsx(AddOrEditField, {\n    fieldObject: editedField,\n    changeDisplayComponent: changeDisplayComponent,\n    refreshList: refreshList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }));\n};\n\nexport default CustomClientFields;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/CustomClientFields.tsx"],"names":["makeStyles","useState","Grid","AddOrEditField","axios","globalVars","CustomFields","useStyles","card","textAlign","height","minWidth","list","listStyleType","title","fontSize","pos","marginBottom","CustomClientFields","fields","refreshList","displayComponent","setDisplayComponent","editedField","fieldName","fieldType","fieldPermanent","fieldOptions","deleteField","event","id","target","res","method","url","serverURL","responseType","resData","data","msg","classes","changeDisplayComponent"],"mappings":"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","sourcesContent":["import stringMethods from \"../library/stringMethods\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useState } from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ListItemText from '@material-ui/core/ListItemText';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Grid from '@material-ui/core/Grid';\nimport AddOrEditField from \"../components/AddOrEditField\";\nimport axios from \"axios\";\nimport globalVars from \"../library/globalVariables\";\nimport CustomFields from \"../components/CustomFields\";\n\nconst useStyles = makeStyles({\n  card: {\n    textAlign: \"center\",\n    height: \"100%\",\n    minWidth: \"300px\"\n  },\n  list: {\n      listStyleType: \"disc\"\n  },\n  title: {\n    fontSize: 14\n  },\n  pos: {\n    marginBottom: 12\n  }\n});\n\nconst CustomClientFields = ({ fields, refreshList }: any) => {\n  const [displayComponent, setDisplayComponent] = useState(false);\n  const [editedField] = useState({\n    fieldName: \"\",\n    fieldType: \"text\",\n    fieldPermanent: false,\n    fieldOptions: []\n  })\n\n  const deleteField = async (event : any) => {\n    const id = event.target.id;\n    const res = await axios({\n        method: \"delete\",\n        url:`${globalVars.serverURL}/fields/${id}`,\n        responseType: \"json\"\n    })\n    const resData = await res.data;\n    resData.msg === \"Success\" ? refreshList() : null;\n  }\n\n  const classes = useStyles({});\n\n  const changeDisplayComponent = () => {\n    displayComponent ? setDisplayComponent(false) : setDisplayComponent(true);\n    //TODO: POSÍLAT PO KLIKU NA EDIT FIELD\n  }\n\n  // const customFields = fields\n  //   .filter(({ fieldPermanent }: any) => !fieldPermanent)\n  //   .map(({ fieldName, _id, fieldType, fieldOptions }: any) => {\n  //     const customFieldNameFormated = new stringMethods(fieldName.toLowerCase())\n  //       .firstCharUpperCase()\n  //       .getString();\n\n  //     const optionsMap = () => {\n  //       return fieldOptions.map((e: any) => {\n  //         const optionFormatedKey = new stringMethods(e.value)\n  //           .textToCamelString()\n  //           .replaceStringDiacritics()\n  //           .getString();\n\n  //         return <ListItem key={optionFormatedKey}><ListItemText primary={e.value.toLowerCase()} /></ListItem>\n  //       });\n  //     };\n\n    //   return (\n    //     <Grid item key={_id}>\n    //         <Card className={classes.card}>\n    //         <CardContent>\n    //         <Typography variant=\"h5\" component=\"h3\">\n    //             {customFieldNameFormated}\n    //         </Typography>\n    //         <Typography className={classes.pos} color=\"textSecondary\">\n    //             ({fieldType.toLowerCase()})\n    //         </Typography>\n    //             {fieldType === \"select\" ? <List className={classes.list} dense={true}>{optionsMap()}</List> : null}\n    //         <button onClick={changeDisplayComponent}>Edit field</button>\n    //         <button onClick={deleteField} id={_id}>Delete field</button>\n    //         </CardContent>\n    //         </Card>\n    //     </Grid>  \n    //   );\n    // });\n\n  return (\n    <div>\n      <h2>Custom Client Fields</h2>\n      <Grid container spacing={2}>\n      <CustomFields deleteField={deleteField} changeDisplayComponent={changeDisplayComponent}/>\n      </Grid>\n      {!displayComponent ? <button onClick={changeDisplayComponent}>Add new field</button> : <AddOrEditField fieldObject={editedField} changeDisplayComponent={changeDisplayComponent} refreshList={refreshList} />}\n    </div>\n  );\n};\n\nexport default CustomClientFields;\n"]},"metadata":{},"sourceType":"module"}