{"ast":null,"code":"import _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nvar stringMethods = function stringMethods(_text) {\n  var _this = this;\n\n  _classCallCheck(this, stringMethods);\n\n  _defineProperty(this, \"text\", void 0);\n\n  _defineProperty(this, \"camelStringToText\", function () {\n    _this.text = _Array$from(_this.text).map(function (e) {\n      return e === e.toUpperCase() ? e = \"%-%\".concat(e.toLowerCase()) : e;\n    }).join(\"\").replace(/%-%/g, \" \");\n    return _this;\n  });\n\n  _defineProperty(this, \"firstCharUpperCase\", function () {\n    _this.text = _Array$from(_this.text).map(function (e, i) {\n      return i === 0 && e.toUpperCase() !== e ? e.toUpperCase() : e;\n    }).join(\"\");\n    return _this;\n  });\n\n  _defineProperty(this, \"removeSlash\", function () {\n    _this.text = _this.text.replace(\"/\", \"\");\n    return _this;\n  });\n\n  _defineProperty(this, \"addStringToEnd\", function (text) {\n    _this.text = _this.text + \" \" + text;\n    return _this;\n  });\n\n  _defineProperty(this, \"textToCamelString\", function () {\n    var array = _Array$from(_this.text.toLowerCase());\n\n    for (var i = 0; i < array.length; i++) {\n      if (array[i] === \" \") {\n        array[i + 1] = array[i + 1].toUpperCase();\n        array.splice(i, 1);\n      }\n    }\n\n    _this.text = array.join(\"\");\n    return _this;\n  });\n\n  _defineProperty(this, \"replaceStringDiacritics\", function () {\n    _this.text = _this.text.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n    return _this;\n  });\n\n  _defineProperty(this, \"getString\", function () {\n    return _this.text;\n  });\n\n  this.text = _text;\n};\n\nexport default stringMethods;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/library/stringMethods.tsx"],"names":["stringMethods","text","map","e","toUpperCase","toLowerCase","join","replace","i","array","length","splice","normalize"],"mappings":";;;;IAAMA,a,GAGJ,uBAAYC,KAAZ,EAA0B;AAAA;;AAAA;;AAAA;;AAAA,6CAIN,YAAM;AACxB,IAAA,KAAI,CAACA,IAAL,GAAY,YAAW,KAAI,CAACA,IAAhB,EACTC,GADS,CACL,UAAAC,CAAC;AAAA,aAAKA,CAAC,KAAKA,CAAC,CAACC,WAAF,EAAN,GAAyBD,CAAC,gBAASA,CAAC,CAACE,WAAF,EAAT,CAA1B,GAAwDF,CAA7D;AAAA,KADI,EAETG,IAFS,CAEJ,EAFI,EAGTC,OAHS,CAGD,MAHC,EAGO,GAHP,CAAZ;AAKA,WAAO,KAAP;AACD,GAXyB;;AAAA,8CAaL,YAAM;AACzB,IAAA,KAAI,CAACN,IAAL,GAAY,YAAW,KAAI,CAACA,IAAhB,EACTC,GADS,CACL,UAACC,CAAD,EAAIK,CAAJ;AAAA,aAAWA,CAAC,KAAK,CAAN,IAAWL,CAAC,CAACC,WAAF,OAAoBD,CAA/B,GAAmCA,CAAC,CAACC,WAAF,EAAnC,GAAqDD,CAAhE;AAAA,KADK,EAETG,IAFS,CAEJ,EAFI,CAAZ;AAIA,WAAO,KAAP;AACD,GAnByB;;AAAA,uCAqBZ,YAAM;AAClB,IAAA,KAAI,CAACL,IAAL,GAAY,KAAI,CAACA,IAAL,CAAUM,OAAV,CAAkB,GAAlB,EAAuB,EAAvB,CAAZ;AACA,WAAO,KAAP;AACD,GAxByB;;AAAA,0CA0BT,UAACN,IAAD,EAAkB;AACjC,IAAA,KAAI,CAACA,IAAL,GAAY,KAAI,CAACA,IAAL,GAAY,GAAZ,GAAkBA,IAA9B;AACA,WAAO,KAAP;AACD,GA7ByB;;AAAA,6CA+BN,YAAM;AACxB,QAAIQ,KAAK,GAAG,YAAW,KAAI,CAACR,IAAL,CAAUI,WAAV,EAAX,CAAZ;;AAEA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,KAAK,CAACC,MAA1B,EAAkCF,CAAC,EAAnC,EAAuC;AACrC,UAAIC,KAAK,CAACD,CAAD,CAAL,KAAa,GAAjB,EAAsB;AACpBC,QAAAA,KAAK,CAACD,CAAC,GAAG,CAAL,CAAL,GAAeC,KAAK,CAACD,CAAC,GAAG,CAAL,CAAL,CAAaJ,WAAb,EAAf;AACAK,QAAAA,KAAK,CAACE,MAAN,CAAaH,CAAb,EAAgB,CAAhB;AACD;AACF;;AACD,IAAA,KAAI,CAACP,IAAL,GAAYQ,KAAK,CAACH,IAAN,CAAW,EAAX,CAAZ;AACA,WAAO,KAAP;AACD,GA1CyB;;AAAA,mDA4CA,YAAM;AAC9B,IAAA,KAAI,CAACL,IAAL,GAAY,KAAI,CAACA,IAAL,CAAUW,SAAV,CAAoB,KAApB,EAA2BL,OAA3B,CAAmC,kBAAnC,EAAuD,EAAvD,CAAZ;AACA,WAAO,KAAP;AACD,GA/CyB;;AAAA,qCAiDd,YAAM;AAChB,WAAO,KAAI,CAACN,IAAZ;AACD,GAnDyB;;AACxB,OAAKA,IAAL,GAAYA,KAAZ;AACD,C;;AAoDH,eAAeD,aAAf","sourcesContent":["class stringMethods {\n  private text: string;\n\n  constructor(text: string) {\n    this.text = text;\n  }\n\n  camelStringToText = () => {\n    this.text = Array.from(this.text)\n      .map(e => (e === e.toUpperCase() ? (e = `%-%${e.toLowerCase()}`) : e))\n      .join(\"\")\n      .replace(/%-%/g, \" \");\n\n    return this;\n  };\n\n  firstCharUpperCase = () => {\n    this.text = Array.from(this.text)\n      .map((e, i) => (i === 0 && e.toUpperCase() !== e ? e.toUpperCase() : e))\n      .join(\"\");\n\n    return this;\n  };\n\n  removeSlash = () => {\n    this.text = this.text.replace(\"/\", \"\");\n    return this;\n  };\n\n  addStringToEnd = (text: string) => {\n    this.text = this.text + \" \" + text;\n    return this;\n  };\n\n  textToCamelString = () => {\n    let array = Array.from(this.text.toLowerCase());\n\n    for (let i = 0; i < array.length; i++) {\n      if (array[i] === \" \") {\n        array[i + 1] = array[i + 1].toUpperCase();\n        array.splice(i, 1);\n      }\n    }\n    this.text = array.join(\"\");\n    return this;\n  };\n\n  replaceStringDiacritics = () => {\n    this.text = this.text.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n    return this;\n  }\n\n  getString = () => {\n    return this.text;\n  }\n}\n\nexport default stringMethods;\n"]},"metadata":{},"sourceType":"module"}