{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState, useContext } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport generateUniqueId from \"generate-unique-id\";\nimport Header from \"../../components/Header\";\nimport LoadingSpinner from \"../../components/LoadingSpinner\";\nimport UserContext from \"../../components/UserContext\";\nimport stringMethods from \"../../library/stringMethods\";\nimport globalVars from \"../../library/globalVariables\";\nimport languages from \"../../library/languages\";\nimport { TableHead, TableBody, Typography, Table, TableCell, TableRow } from \"@material-ui/core\";\n\nvar Emails = function Emails(_ref) {\n  var data = _ref.data,\n      emailsCount = _ref.emailsCount;\n\n  var _useState = useState(false),\n      initialized = _useState[0],\n      setInitialized = _useState[1];\n\n  var router = useRouter();\n  var user = useContext(UserContext);\n  useEffect(function () {\n    var title = new stringMethods(router.pathname).removeSlash().removeSlashAndTextAfter().firstCharUpperCase().addStringToEnd(globalVars.titleSubText).getString();\n    document.title = title;\n    setInitialized(true);\n    user.checkUser();\n  }, [router]);\n  var tableBody = data.map(function (email) {\n    return __jsx(TableRow, {\n      key: generateUniqueId()\n    }, __jsx(TableCell, null, email.date), __jsx(TableCell, null, email.to.map(function (e) {\n      return __jsx(\"p\", {\n        key: generateUniqueId()\n      }, e);\n    })), __jsx(TableCell, null, email.subject), __jsx(TableCell, null, email.message.length > 50 ? \"\".concat(email.message.slice(0, 50), \"...\") : email.message));\n  }).reverse();\n  var h1 = new stringMethods(router.pathname).removeSlash().removeSlashAndTextAfter().firstCharUpperCase().getString();\n  return !user.user.signedIn && !initialized ? __jsx(LoadingSpinner, null) : __jsx(React.Fragment, null, __jsx(Header, null), __jsx(Typography, {\n    component: \"h1\",\n    variant: \"h3\"\n  }, h1), __jsx(Typography, {\n    variant: \"h5\",\n    gutterBottom: true\n  }, new stringMethods(languages.en.sent).firstCharUpperCase().getString(), \" \", emailsCount), __jsx(Table, {\n    size: \"small\",\n    style: {\n      backgroundColor: \"white\",\n      border: \"1px solid #e0e0e0\"\n    }\n  }, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, null, __jsx(Typography, {\n    variant: \"button\"\n  }, languages.en.dateAndTime)), __jsx(TableCell, null, __jsx(Typography, {\n    variant: \"button\"\n  }, languages.en.to)), __jsx(TableCell, null, __jsx(Typography, {\n    variant: \"button\"\n  }, languages.en.subject)), __jsx(TableCell, null, __jsx(Typography, {\n    variant: \"button\"\n  }, languages.en.message)))), __jsx(TableBody, null, tableBody)));\n};\n\nEmails.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(context) {\n    var res, resEmailsCount, emailsCount, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios({\n              method: \"get\",\n              params: {\n                key: context.query.key\n              },\n              url: \"\".concat(globalVars.serverURL, \"/emails\"),\n              responseType: \"json\"\n            });\n\n          case 2:\n            res = _context.sent;\n            _context.next = 5;\n            return axios(\"\".concat(globalVars.serverURL, \"/emails/count?key=\").concat(context.query.key));\n\n          case 5:\n            resEmailsCount = _context.sent;\n            _context.next = 8;\n            return resEmailsCount.data;\n\n          case 8:\n            emailsCount = _context.sent;\n            _context.next = 11;\n            return res.data;\n\n          case 11:\n            data = _context.sent;\n            return _context.abrupt(\"return\", {\n              data: data,\n              emailsCount: emailsCount\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default Emails;","map":null,"metadata":{},"sourceType":"module"}