{"ast":null,"code":"import _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nclass stringMethods {\n  constructor(_text) {\n    _defineProperty(this, \"text\", void 0);\n\n    _defineProperty(this, \"splitStringByIndex\", () => {\n      const textInArray = _Array$from(this.text).map(e => e === e.toUpperCase() ? e = `%ff%${e.toLowerCase()}` : e).join('').replace(/%ff%/g, ' ');\n\n      return this;\n    });\n\n    _defineProperty(this, \"firstCharUpperCase\", () => {\n      let str = this.text.toLowerCase();\n      const firstCharString = str.substr(0, 1).toUpperCase();\n      const restString = str.substr(1);\n      this.text = firstCharString + restString;\n      return this;\n    });\n\n    _defineProperty(this, \"removeSlash\", () => {\n      this.text = this.text.replace('/', '');\n      return this;\n    });\n\n    _defineProperty(this, \"addStringToEnd\", text => {\n      this.text = this.text.concat(` ${text}`);\n      return this;\n    });\n\n    this.text = _text;\n  }\n\n}\n\n;\nexport default stringMethods;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/functions/stringMethods.tsx"],"names":["stringMethods","constructor","text","textInArray","map","e","toUpperCase","toLowerCase","join","replace","str","firstCharString","substr","restString","concat"],"mappings":";;;AAAA,MAAMA,aAAN,CAAoB;AAGhBC,EAAAA,WAAW,CAACC,KAAD,EAAgB;AAAA;;AAAA,gDAIN,MAAM;AACzB,YAAMC,WAAW,GAAG,YAAW,KAAKD,IAAhB,EAAsBE,GAAtB,CAA2BC,CAAD,IAChDA,CAAC,KAAKA,CAAC,CAACC,WAAF,EAAN,GAAyBD,CAAC,GAAI,OAAMA,CAAC,CAACE,WAAF,EAAgB,EAApD,GAAyDF,CADnC,EAEtBG,IAFsB,CAEjB,EAFiB,EAEbC,OAFa,CAEL,OAFK,EAEI,GAFJ,CAApB;;AAIA,aAAO,IAAP;AACD,KAV0B;;AAAA,gDAYN,MAAM;AACzB,UAAIC,GAAG,GAAG,KAAKR,IAAL,CAAUK,WAAV,EAAV;AACA,YAAMI,eAAe,GAAGD,GAAG,CAACE,MAAJ,CAAW,CAAX,EAAc,CAAd,EAAiBN,WAAjB,EAAxB;AACA,YAAMO,UAAU,GAAGH,GAAG,CAACE,MAAJ,CAAW,CAAX,CAAnB;AACA,WAAKV,IAAL,GAAYS,eAAe,GAAGE,UAA9B;AACA,aAAO,IAAP;AACD,KAlB0B;;AAAA,yCAoBb,MAAM;AAChB,WAAKX,IAAL,GAAY,KAAKA,IAAL,CAAUO,OAAV,CAAkB,GAAlB,EAAuB,EAAvB,CAAZ;AACA,aAAO,IAAP;AACH,KAvB0B;;AAAA,4CAyBTP,IAAD,IAAkB;AAC/B,WAAKA,IAAL,GAAY,KAAKA,IAAL,CAAUY,MAAV,CAAkB,IAAGZ,IAAK,EAA1B,CAAZ;AACA,aAAO,IAAP;AACH,KA5B0B;;AACzB,SAAKA,IAAL,GAAYA,KAAZ;AACD;;AALe;;AAgCjB;AAED,eAAeF,aAAf","sourcesContent":["class stringMethods {\n    text : string;\n\n    constructor(text : string) {\n      this.text = text;\n    }\n    \n    splitStringByIndex = () => {\n      const textInArray = Array.from(this.text).map((e) =>\n    e === e.toUpperCase() ? (e = `%ff%${e.toLowerCase()}`) : e\n  ).join('').replace(/%ff%/g, ' ')\n  \n      return this;\n    };\n  \n    firstCharUpperCase = () => {\n      let str = this.text.toLowerCase();\n      const firstCharString = str.substr(0, 1).toUpperCase();\n      const restString = str.substr(1);\n      this.text = firstCharString + restString;\n      return this;\n    };\n\n    removeSlash = () => {\n        this.text = this.text.replace('/', '');\n        return this;\n    }\n\n    addStringToEnd = (text: string) =>Â {\n        this.text = this.text.concat(` ${text}`);\n        return this;\n    }\n  };\n\n  export default stringMethods;"]},"metadata":{},"sourceType":"module"}