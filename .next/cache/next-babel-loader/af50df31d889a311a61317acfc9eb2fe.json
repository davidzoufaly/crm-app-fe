{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/EmailForm.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport axios from \"axios\";\nimport globalVars from \"../library/globalVariables\";\nimport { useState, useEffect } from \"react\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nconst EmailForm = ({\n  to,\n  isEmailCreated,\n  toggleIsEmailCreated,\n  unCheckAll\n}) => {\n  const initEmail = {\n    to,\n    subject: \"\",\n    message: \"\"\n  };\n  const {\n    0: email,\n    1: setEmail\n  } = useState(initEmail);\n  const {\n    0: spinner,\n    1: setSpinner\n  } = useState(false);\n  useEffect(() => {\n    setEmail(_objectSpread({}, email, {\n      to: to\n    }));\n  }, [to]);\n\n  const sendEmail = async e => {\n    e.preventDefault();\n    setSpinner(true);\n    const res = await axios({\n      method: \"post\",\n      data: email,\n      url: `${globalVars.serverURL}/emails/send`,\n      responseType: \"json\"\n    });\n    const data = await res.data;\n    data ? setSpinner(false) : null;\n\n    if (data.msg === \"Success\") {\n      alert(\"Your email has been succesfully sent.\");\n      setEmail(initEmail); // if email is sending from clients page\n\n      toggleIsEmailCreated();\n      unCheckAll ? unCheckAll() : null;\n    } else {\n      alert(\"Something went wrong!\");\n    }\n  };\n\n  const onChange = e => {\n    setEmail(_objectSpread({}, email, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return isEmailCreated && to.length > 0 ? __jsx(React.Fragment, null, __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Email\"), __jsx(\"form\", {\n    onSubmit: sendEmail,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: \"email-to\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"To\"), __jsx(\"input\", {\n    type: \"text\",\n    id: \"email-to\",\n    name: \"to\",\n    value: email.to,\n    disabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), __jsx(\"label\", {\n    htmlFor: \"email-subject\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"Subject\"), __jsx(\"input\", {\n    type: \"text\",\n    id: \"email-to\",\n    name: \"subject\",\n    autoFocus: true,\n    value: email.subject,\n    onChange: onChange,\n    disabled: spinner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), __jsx(\"label\", {\n    htmlFor: \"email-message\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Message\"), spinner ? __jsx(CircularProgress, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }) : null, __jsx(\"textarea\", {\n    name: \"message\",\n    onChange: onChange,\n    value: email.message,\n    disabled: spinner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    onClick: toggleIsEmailCreated,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Cancel\"), __jsx(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"Send\"))) : null;\n};\n\nexport default EmailForm;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/EmailForm.tsx"],"names":["axios","globalVars","useState","useEffect","CircularProgress","EmailForm","to","isEmailCreated","toggleIsEmailCreated","unCheckAll","initEmail","subject","message","email","setEmail","spinner","setSpinner","sendEmail","e","preventDefault","res","method","data","url","serverURL","responseType","msg","alert","onChange","target","name","value","length"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport globalVars from \"../library/globalVariables\";\nimport { useState, useEffect } from \"react\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nconst EmailForm = ({\n  to,\n  isEmailCreated,\n  toggleIsEmailCreated,\n  unCheckAll\n}: any) => {\n  const initEmail = { to, subject: \"\", message: \"\" };\n  const [email, setEmail] = useState(initEmail);\n  const [spinner, setSpinner] = useState(false);\n\n  useEffect(() => {\n    setEmail({ ...email, to: to });\n  }, [to]);\n\n  const sendEmail = async e => {\n    e.preventDefault();\n    setSpinner(true);\n    const res = await axios({\n      method: \"post\",\n      data: email,\n      url: `${globalVars.serverURL}/emails/send`,\n      responseType: \"json\"\n    });\n    const data = await res.data;\n    data ? setSpinner(false) : null;\n    if (data.msg === \"Success\") {\n      alert(\"Your email has been succesfully sent.\");\n      setEmail(initEmail);\n      // if email is sending from clients page\n      toggleIsEmailCreated();\n      unCheckAll ? unCheckAll() : null;\n    } else {\n      alert(\"Something went wrong!\");\n    }\n  };\n\n  const onChange = e => {\n    setEmail({ ...email, [e.target.name]: e.target.value });\n  };\n\n  return isEmailCreated && to.length > 0 ? (\n    <>\n    <h2>Email</h2>\n    <form onSubmit={sendEmail}>\n      <label htmlFor=\"email-to\">To</label>\n      <input type=\"text\" id=\"email-to\" name=\"to\" value={email.to} disabled />\n      <label htmlFor=\"email-subject\">\n        Subject\n      </label>\n      <input\n        type=\"text\"\n        id=\"email-to\"\n        name=\"subject\"\n        autoFocus={true}\n        value={email.subject}\n        onChange={onChange}\n        disabled={spinner}\n      />\n      <label htmlFor=\"email-message\">Message</label>\n      {spinner ? <CircularProgress /> : null}\n      <textarea\n        name=\"message\"\n        onChange={onChange}\n        value={email.message}\n        disabled={spinner}\n      />\n      <button onClick={toggleIsEmailCreated}>Cancel</button>\n      <button type=\"submit\">Send</button>\n    </form>\n    </>\n  ) : null;\n};\n\nexport default EmailForm;\n"]},"metadata":{},"sourceType":"module"}