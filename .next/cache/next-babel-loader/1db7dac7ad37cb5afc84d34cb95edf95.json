{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/EmailForm.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport UserContext from \"./UserContext\";\nimport languages from \"../library/languages\";\nimport globalVars from \"../library/globalVariables\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nconst EmailForm = ({\n  to,\n  isEmailCreated,\n  toggleIsEmailCreated,\n  unCheckAll\n}) => {\n  const initEmail = {\n    to: to,\n    subject: \"\",\n    message: \"\"\n  };\n  const {\n    0: email,\n    1: setEmail\n  } = useState(initEmail);\n  const {\n    0: spinner,\n    1: setSpinner\n  } = useState(false);\n  const user = useContext(UserContext);\n  useEffect(() => {\n    setEmail(_objectSpread({}, email, {\n      to: to\n    }));\n  }, [to]);\n\n  const sendEmail = async e => {\n    e.preventDefault();\n    setSpinner(true);\n    const res = await axios({\n      method: \"post\",\n      data: email,\n      url: `${globalVars.serverURL}/emails/send`,\n      params: {\n        key: user.user.userkey\n      },\n      responseType: \"json\"\n    });\n    const data = await res.data;\n    data ? setSpinner(false) : null;\n\n    if (data.msg === globalVars.msgSuccess) {\n      alert(languages.en.yourEmailSentSucces);\n      setEmail(initEmail); // if email is sending from clients page\n\n      toggleIsEmailCreated();\n      unCheckAll ? unCheckAll() : null;\n    } else {\n      alert(languages.en.somethingWentWrong);\n    }\n  };\n\n  const onChange = e => {\n    setEmail(_objectSpread({}, email, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return isEmailCreated && to.length > 0 ? __jsx(React.Fragment, null, __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, languages.en.email), __jsx(\"form\", {\n    onSubmit: sendEmail,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: \"email-to\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, languages.en.to), __jsx(\"input\", {\n    type: \"text\",\n    id: \"email-to\",\n    name: \"to\",\n    value: email.to,\n    disabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), __jsx(\"label\", {\n    htmlFor: \"email-subject\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, languages.en.subject), __jsx(\"input\", {\n    type: \"text\",\n    id: \"email-subject\",\n    name: \"subject\",\n    autoFocus: true,\n    value: email.subject,\n    onChange: onChange,\n    disabled: spinner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), __jsx(\"label\", {\n    htmlFor: \"email-message\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, languages.en.message), spinner ? __jsx(CircularProgress, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }) : null, __jsx(\"textarea\", {\n    name: \"message\",\n    onChange: onChange,\n    value: email.message,\n    disabled: spinner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    onClick: toggleIsEmailCreated,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, languages.en.cancel), __jsx(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, languages.en.send))) : null;\n};\n\nexport default EmailForm;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/EmailForm.tsx"],"names":["useState","useEffect","useContext","axios","UserContext","languages","globalVars","CircularProgress","EmailForm","to","isEmailCreated","toggleIsEmailCreated","unCheckAll","initEmail","subject","message","email","setEmail","spinner","setSpinner","user","sendEmail","e","preventDefault","res","method","data","url","serverURL","params","key","userkey","responseType","msg","msgSuccess","alert","en","yourEmailSentSucces","somethingWentWrong","onChange","target","name","value","length","cancel","send"],"mappings":"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","sourcesContent":["import { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport UserContext from \"./UserContext\";\nimport languages from \"../library/languages\";\nimport globalVars from \"../library/globalVariables\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nconst EmailForm = ({\n  to,\n  isEmailCreated,\n  toggleIsEmailCreated,\n  unCheckAll\n}: any) => {\n  const initEmail = { to : to, subject: \"\", message: \"\" };\n  const [email, setEmail] = useState(initEmail);\n  const [spinner, setSpinner] = useState(false);\n  const user = useContext(UserContext);\n\n  useEffect(() => {\n    setEmail({ ...email, to : to });\n  }, [to]);\n\n  const sendEmail = async e => {\n    e.preventDefault();\n    setSpinner(true);\n\n    const res = await axios({\n      method: \"post\",\n      data: email,\n      url: `${globalVars.serverURL}/emails/send`,\n      params: {key: user.user.userkey},\n      responseType: \"json\"\n    });\n\n    const data = await res.data;\n    data ? setSpinner(false) : null;\n\n    if (data.msg === globalVars.msgSuccess) {\n      alert(languages.en.yourEmailSentSucces);\n      setEmail(initEmail);\n      // if email is sending from clients page\n      toggleIsEmailCreated();\n      unCheckAll ? unCheckAll() : null;\n    } else {\n      alert(languages.en.somethingWentWrong);\n    }\n  };\n\n  const onChange = e => {\n    setEmail({ ...email, [e.target.name]: e.target.value });\n  };\n\n  return isEmailCreated && to.length > 0 ? (\n    <>\n    <h2>{languages.en.email}</h2>\n    <form onSubmit={sendEmail}>\n      <label htmlFor=\"email-to\">{languages.en.to}</label>\n      <input type=\"text\" id=\"email-to\" name=\"to\" value={email.to} disabled />\n      <label htmlFor=\"email-subject\">\n        {languages.en.subject}\n      </label>\n      <input\n        type=\"text\"\n        id=\"email-subject\"\n        name=\"subject\"\n        autoFocus={true}\n        value={email.subject}\n        onChange={onChange}\n        disabled={spinner}\n      />\n      <label htmlFor=\"email-message\">\n        {languages.en.message}\n      </label>\n      {spinner ? <CircularProgress /> : null}\n      <textarea\n        name=\"message\"\n        onChange={onChange}\n        value={email.message}\n        disabled={spinner}\n      />\n      <button onClick={toggleIsEmailCreated}>{languages.en.cancel}</button>\n      <button type=\"submit\">{languages.en.send}</button>\n    </form>\n    </>\n  ) : null;\n};\n\nexport default EmailForm;\n"]},"metadata":{},"sourceType":"module"}