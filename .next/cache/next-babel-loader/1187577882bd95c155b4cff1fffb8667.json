{"ast":null,"code":"var _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/ClientForm.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport stringMethods from \"../library/stringMethods\";\n\nconst ClientForm = ({\n  fields,\n  onChange,\n  newClient\n}) => {\n  const inputs = fields.map(e => {\n    if (e.fieldName !== \"dateAdded\" && e.fieldName !== \"dateModified\") {\n      if (e.fieldType === \"text\") {\n        return __jsx(\"div\", {\n          key: e.fieldName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 9\n          },\n          __self: this\n        }, __jsx(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 10\n          },\n          __self: this\n        }, new stringMethods(e.fieldName).camelStringToText().firstCharUpperCase().getString()), __jsx(\"input\", {\n          type: \"text\",\n          id: e.fieldName,\n          onChange: () => onChange(e.fieldName, event),\n          value: newClient[e.fieldName],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 11\n          },\n          __self: this\n        }));\n      } else if (e.fieldType === \"number\") {\n        return __jsx(\"div\", {\n          key: e.fieldName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21\n          },\n          __self: this\n        }, __jsx(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22\n          },\n          __self: this\n        }, e.fieldName), __jsx(\"input\", {\n          type: \"number\",\n          id: e.fieldName,\n          onChange: () => onChange(e.fieldName, event),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23\n          },\n          __self: this\n        }));\n      } else if (e.fieldType === \"select\") {\n        return __jsx(\"div\", {\n          key: e.fieldName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        }, __jsx(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        }, e.fieldName), __jsx(\"select\", {\n          id: e.fieldName,\n          onChange: () => onChange(e.fieldName, event),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        }, __jsx(\"option\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }, \"---\"), e.fieldOptions.map(e => {\n          return __jsx(\"option\", {\n            value: e.value,\n            key: e.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 34\n            },\n            __self: this\n          }, e.value);\n        })));\n      }\n    }\n  });\n  return __jsx(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, inputs);\n};\n\nexport default ClientForm;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/ClientForm.tsx"],"names":["stringMethods","ClientForm","fields","onChange","newClient","inputs","map","e","fieldName","fieldType","camelStringToText","firstCharUpperCase","getString","event","fieldOptions","value","id"],"mappings":";;;AAAA,OAAOA,aAAP,MAA0B,0BAA1B;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,QAAV;AAAoBC,EAAAA;AAApB,CAAD,KAA0C;AAE3D,QAAMC,MAAM,GAAGH,MAAM,CAACI,GAAP,CAAYC,CAAD,IAAY;AACpC,QAAIA,CAAC,CAACC,SAAF,KAAgB,WAAhB,IAA+BD,CAAC,CAACC,SAAF,KAAgB,cAAnD,EAAmE;AACjE,UAAID,CAAC,CAACE,SAAF,KAAgB,MAApB,EAA4B;AAC1B,eACE;AAAK,UAAA,GAAG,EAAEF,CAAC,CAACC,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAI,IAAIR,aAAJ,CAAkBO,CAAC,CAACC,SAApB,EAA+BE,iBAA/B,GAAmDC,kBAAnD,GAAwEC,SAAxE,EAAJ,CADF,EAEE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,EAAE,EAAEL,CAAC,CAACC,SAFR;AAGE,UAAA,QAAQ,EAAE,MAAML,QAAQ,CAACI,CAAC,CAACC,SAAH,EAAcK,KAAd,CAH1B;AAIE,UAAA,KAAK,EAAET,SAAS,CAACG,CAAC,CAACC,SAAH,CAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,CADF;AAWD,OAZD,MAYO,IAAID,CAAC,CAACE,SAAF,KAAgB,QAApB,EAA8B;AACnC,eACE;AAAK,UAAA,GAAG,EAAEF,CAAC,CAACC,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAID,CAAC,CAACC,SAAN,CADF,EAEE;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,EAAE,EAAED,CAAC,CAACC,SAA3B;AAAsC,UAAA,QAAQ,EAAE,MAAML,QAAQ,CAACI,CAAC,CAACC,SAAH,EAAcK,KAAd,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,CADF;AAMD,OAPM,MAOA,IAAIN,CAAC,CAACE,SAAF,KAAgB,QAApB,EAA8B;AACnC,eACE;AAAK,UAAA,GAAG,EAAEF,CAAC,CAACC,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAID,CAAC,CAACC,SAAN,CADF,EAEE;AAAQ,UAAA,EAAE,EAAED,CAAC,CAACC,SAAd;AAAyB,UAAA,QAAQ,EAAE,MAAML,QAAQ,CAACI,CAAC,CAACC,SAAH,EAAcK,KAAd,CAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEGN,CAAC,CAACO,YAAF,CAAeR,GAAf,CAAoBC,CAAD,IAAY;AAC9B,iBACE;AAAQ,YAAA,KAAK,EAAEA,CAAC,CAACQ,KAAjB;AAAwB,YAAA,GAAG,EAAER,CAAC,CAACS,EAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACGT,CAAC,CAACQ,KADL,CADF;AAKD,SANA,CAFH,CAFF,CADF;AAeD;AACF;AACF,GAvCc,CAAf;AAwCA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOV,MAAP,CAAP;AACD,CA3CD;;AA6CA,eAAeJ,UAAf","sourcesContent":["import stringMethods from \"../library/stringMethods\";\n\nconst ClientForm = ({ fields, onChange, newClient }: any) => {\n\n  const inputs = fields.map((e: any) => {\n    if (e.fieldName !== \"dateAdded\" && e.fieldName !== \"dateModified\") {\n      if (e.fieldType === \"text\") {\n        return (\n          <div key={e.fieldName}>\n            <p>{new stringMethods(e.fieldName).camelStringToText().firstCharUpperCase().getString()}</p>\n            <input\n              type=\"text\"\n              id={e.fieldName}\n              onChange={() => onChange(e.fieldName, event)}\n              value={newClient[e.fieldName]}\n            />\n          </div>\n        );\n      } else if (e.fieldType === \"number\") {\n        return (\n          <div key={e.fieldName}>\n            <p>{e.fieldName}</p>\n            <input type=\"number\" id={e.fieldName} onChange={() => onChange(e.fieldName, event)} />\n          </div>\n        )\n      } else if (e.fieldType === \"select\") {\n        return (\n          <div key={e.fieldName}>\n            <p>{e.fieldName}</p>\n            <select id={e.fieldName} onChange={() => onChange(e.fieldName, event)}>\n              <option>---</option>\n              {e.fieldOptions.map((e: any) => {\n                return (\n                  <option value={e.value} key={e.id}>\n                    {e.value}\n                  </option>\n                );\n              })}\n            </select>\n          </div>\n        );\n      }\n    }\n  });\n  return <form>{inputs}</form>;\n};\n\nexport default ClientForm;\n"]},"metadata":{},"sourceType":"module"}