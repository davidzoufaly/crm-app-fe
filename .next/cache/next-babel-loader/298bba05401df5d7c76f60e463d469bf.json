{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/CustomClientFields.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\nimport AddOrEditField from \"../components/AddOrEditField\";\nimport axios from \"axios\";\nimport globalVars from \"../library/globalVariables\";\nimport uniqid from \"uniqid\";\nimport CustomFieldsList from \"./CustomFieldsList\";\n\nconst CustomClientFields = ({\n  fields,\n  refreshList\n}) => {\n  const blankFieldObject = {\n    fieldName: \"\",\n    fieldType: \"text\",\n    fieldOptions: []\n  };\n  useEffect(() => {\n    console.log(editedField);\n  });\n  const {\n    0: editedField,\n    1: setEditedField\n  } = useState(blankFieldObject);\n  const {\n    0: displayComponent,\n    1: setDisplayComponent\n  } = useState(false);\n\n  const saveEditedField = () => {\n    const fieldIsUpdated = async () => {\n      const {\n        fieldName,\n        fieldType,\n        fieldOptions,\n        id\n      } = editedField;\n      const res = await axios({\n        method: \"put\",\n        url: `${globalVars.serverURL}/fields/${id}`,\n        data: {\n          fieldName,\n          fieldType,\n          fieldOptions\n        },\n        responseType: \"json\"\n      });\n      const data = await res.data;\n\n      if (data.msg === \"Success\") {\n        setDisplayComponent(false);\n        setEditedField(blankFieldObject);\n        refreshList();\n      }\n    };\n\n    const fieldIsCreated = async () => {\n      const res = await axios({\n        method: \"post\",\n        url: `${globalVars.serverURL}/fields/`,\n        data: editedField,\n        responseType: \"json\"\n      });\n      const data = await res.data;\n\n      if (data.msg === \"Success\") {\n        refreshList();\n        setDisplayComponent(false);\n        setEditedField(blankFieldObject);\n      }\n    };\n\n    !editedField.id ? fieldIsCreated() : fieldIsUpdated();\n  };\n\n  const fieldMethods = {\n    onNameChange(event) {\n      setEditedField(_objectSpread({}, editedField, {\n        fieldName: event.target.value\n      }));\n    },\n\n    onSelectChange(event) {\n      setEditedField(_objectSpread({}, editedField, {\n        fieldType: event.target.options[event.target.options.selectedIndex].value\n      }));\n    },\n\n    handleOptionSpawn() {\n      setEditedField(_objectSpread({}, editedField, {\n        fieldOptions: [...editedField.fieldOptions, {\n          id: uniqid(),\n          value: \"\"\n        }]\n      }));\n    }\n\n  };\n\n  const deleteField = async event => {\n    const id = event.target.id;\n    const res = await axios({\n      method: \"delete\",\n      url: `${globalVars.serverURL}/fields/${id}`,\n      responseType: \"json\"\n    });\n    const resData = await res.data;\n    resData.msg === \"Success\" ? refreshList() : null;\n  };\n\n  const onOptionChange = event => {\n    setEditedField(_objectSpread({}, editedField, {\n      fieldOptions: editedField.fieldOptions.filter(e => event.target.id === e.id ? e.value = event.target.value : e)\n    }));\n  };\n\n  const onOptionDelete = event => {\n    setEditedField(_objectSpread({}, editedField, {\n      fieldOptions: editedField.fieldOptions.filter(e => event.target.id !== e.id ? e : null)\n    }));\n  };\n\n  const setupEditedField = obj => {\n    setEditedField(obj);\n    setDisplayComponent(true);\n  };\n\n  const changeDisplayComponent = () => {\n    displayComponent ? setDisplayComponent(false) : setDisplayComponent(true);\n  };\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \"Custom Client Fields\"), __jsx(CustomFieldsList, {\n    deleteField: deleteField,\n    fields: fields,\n    setupEditedField: setupEditedField,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }), __jsx(AddOrEditField, {\n    editedField: editedField,\n    refreshList: refreshList,\n    saveEditedField: saveEditedField // onNameChange={onNameChange}\n    // onSelectChange={onSelectChange}\n    ,\n    fieldMethods: fieldMethods,\n    handleOptionSpawn: handleOptionSpawn,\n    onOptionChange: onOptionChange,\n    onOptionDelete: onOptionDelete,\n    displayComponent: displayComponent,\n    changeDisplayComponent: changeDisplayComponent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }));\n};\n\nexport default CustomClientFields;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/CustomClientFields.tsx"],"names":["useState","useEffect","AddOrEditField","axios","globalVars","uniqid","CustomFieldsList","CustomClientFields","fields","refreshList","blankFieldObject","fieldName","fieldType","fieldOptions","console","log","editedField","setEditedField","displayComponent","setDisplayComponent","saveEditedField","fieldIsUpdated","id","res","method","url","serverURL","data","responseType","msg","fieldIsCreated","fieldMethods","onNameChange","event","target","value","onSelectChange","options","selectedIndex","handleOptionSpawn","deleteField","resData","onOptionChange","filter","e","onOptionDelete","setupEditedField","obj","changeDisplayComponent"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport AddOrEditField from \"../components/AddOrEditField\";\nimport axios from \"axios\";\nimport globalVars from \"../library/globalVariables\";\nimport uniqid from \"uniqid\";\nimport CustomFieldsList from \"./CustomFieldsList\";\n\nconst CustomClientFields = ({ fields, refreshList }: any) => {\n  const blankFieldObject = {\n    fieldName: \"\",\n    fieldType: \"text\",\n    fieldOptions: []\n  };\n\n  useEffect(() =>Â {\n    console.log(editedField);\n  })\n\n  const [editedField, setEditedField] = useState<any>(blankFieldObject);\n  const [displayComponent, setDisplayComponent] = useState(false);\n\n  const saveEditedField = () => {\n    const fieldIsUpdated = async () => {\n      const { fieldName, fieldType, fieldOptions, id } = editedField;\n      const res = await axios({\n        method: \"put\",\n        url: `${globalVars.serverURL}/fields/${id}`,\n        data: { fieldName, fieldType, fieldOptions },\n        responseType: \"json\"\n      });\n      const data = await res.data;\n      if (data.msg === \"Success\") {\n        setDisplayComponent(false);\n        setEditedField(blankFieldObject);\n        refreshList();\n      }\n    };\n\n    const fieldIsCreated = async () => {\n      const res = await axios({\n        method: \"post\",\n        url: `${globalVars.serverURL}/fields/`,\n        data: editedField,\n        responseType: \"json\"\n      });\n      const data = await res.data;\n      if (data.msg === \"Success\") {\n        refreshList();\n        setDisplayComponent(false);\n        setEditedField(blankFieldObject);\n      }\n    };\n    !editedField.id ? fieldIsCreated() : fieldIsUpdated();\n  };\n\n  const fieldMethods = {\n      onNameChange(event: any) {\n        setEditedField({ ...editedField, fieldName: event.target.value });\n      },\n      onSelectChange(event: any) {\n        setEditedField({\n          ...editedField,\n          fieldType:\n            event.target.options[event.target.options.selectedIndex].value\n        });\n      },\n      handleOptionSpawn() {\n        setEditedField({\n          ...editedField,\n          fieldOptions: [...editedField.fieldOptions, { id: uniqid(), value: \"\" }]\n        });\n      }\n  };\n\n  const deleteField = async (event: any) => {\n    const id = event.target.id;\n    const res = await axios({\n      method: \"delete\",\n      url: `${globalVars.serverURL}/fields/${id}`,\n      responseType: \"json\"\n    });\n    const resData = await res.data;\n    resData.msg === \"Success\" ? refreshList() : null;\n  };\n\n  const onOptionChange = (event: any) => {\n    setEditedField({\n      ...editedField,\n      fieldOptions: editedField.fieldOptions.filter((e: any) =>\n        event.target.id === e.id ? (e.value = event.target.value) : e\n      )\n    });\n  };\n\n  const onOptionDelete = (event: any) => {\n    setEditedField({\n      ...editedField,\n      fieldOptions: editedField.fieldOptions.filter((e: any) =>\n        event.target.id !== e.id ? e : null\n      )\n    });\n  };\n\n  const setupEditedField = (obj: any) => {\n    setEditedField(obj);\n    setDisplayComponent(true);\n  };\n\n  const changeDisplayComponent = () => {\n    displayComponent ? setDisplayComponent(false) : setDisplayComponent(true);\n  };\n\n  return (\n    <div>\n      <h2>Custom Client Fields</h2>\n      <CustomFieldsList\n        deleteField={deleteField}\n        fields={fields}\n        setupEditedField={setupEditedField}\n      />\n      <AddOrEditField\n        editedField={editedField}\n        refreshList={refreshList}\n        saveEditedField={saveEditedField}\n        // onNameChange={onNameChange}\n        // onSelectChange={onSelectChange}\n        fieldMethods={fieldMethods}\n        handleOptionSpawn={handleOptionSpawn}\n        onOptionChange={onOptionChange}\n        onOptionDelete={onOptionDelete}\n        displayComponent={displayComponent}\n        changeDisplayComponent={changeDisplayComponent}\n      />\n    </div>\n  );\n};\n\nexport default CustomClientFields;\n"]},"metadata":{},"sourceType":"module"}