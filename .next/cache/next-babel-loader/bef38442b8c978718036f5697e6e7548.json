{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/pages/clients/[id].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Header from \"../../components/Header\";\nimport axios from \"axios\";\nimport { useRouter } from \"next/router\";\nimport { useEffect, useState } from \"react\";\nimport globalVars from \"../../library/globalVariables\";\nimport SingleClientData from \"../../components/singleClient/SingleClientData\";\nimport ButtonsSingle from \"../../components/singleClient/ButtonsSingle\";\nimport LoadingSpinner from \"../../components/loadingSpinner\";\nimport EmailForm from \"../../components/EmailForm\";\n\nconst Client = ({\n  clientData,\n  fieldsData\n}) => {\n  const {\n    0: client,\n    1: setClient\n  } = useState(clientData);\n  const {\n    0: name,\n    1: setName\n  } = useState(`${clientData.firstName} ${clientData.lastName}`);\n  const {\n    0: initialized,\n    1: setInitialized\n  } = useState(false);\n  const {\n    0: isEmailCreated,\n    1: setIsEmailCreated\n  } = useState(false);\n  const router = useRouter();\n  useEffect(() => {\n    document.title = `${name} ${globalVars.titleSubText}`;\n    setInitialized(true);\n  });\n\n  const onSubmit = async e => {\n    e.preventDefault();\n    setName(`${client.firstName} ${client.lastName}`);\n    await axios({\n      method: \"put\",\n      data: client,\n      url: `${globalVars.serverURL}/clients/${router.query.id}`,\n      responseType: \"json\"\n    });\n  };\n\n  const onDelete = async e => {\n    e.preventDefault();\n    const res = await axios({\n      method: \"delete\",\n      url: `${globalVars.serverURL}/clients/${router.query.id}`,\n      responseType: \"json\"\n    });\n    const data = await res.data;\n    (await data.msg) === \"Success\" ? router.push(\"/clients\") : alert(\"Something went wrong!\");\n  };\n\n  const onInputChange = e => {\n    setClient(_objectSpread({}, client, {\n      [e.target.name]: e.target.type === \"number\" ? _parseInt(e.target.value) : e.target.value\n    }));\n  };\n\n  return !initialized ? __jsx(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }) : __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, name), __jsx(\"form\", {\n    onSubmit: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, __jsx(SingleClientData, {\n    fieldsData: fieldsData,\n    client: client,\n    onInputChange: onInputChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), __jsx(EmailForm, {\n    to: client.email,\n    isEmailCreated: isEmailCreated,\n    toggleIsEmailCreated: toggleIsEmailCreated,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), __jsx(ButtonsSingle, {\n    onDelete: onDelete,\n    toggleIsEmailCreated: toggleIsEmailCreated,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  })));\n};\n\nClient.getInitialProps = async context => {\n  const {\n    id\n  } = context.query;\n  const resClient = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/clients/${id}`,\n    responseType: \"json\"\n  });\n  const clientData = await resClient.data;\n  const resFields = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/fields`,\n    responseType: \"json\"\n  });\n  const fieldsData = await resFields.data;\n  return {\n    clientData,\n    fieldsData\n  };\n};\n\nexport default Client;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/pages/clients/[id].tsx"],"names":["Header","axios","useRouter","useEffect","useState","globalVars","SingleClientData","ButtonsSingle","LoadingSpinner","EmailForm","Client","clientData","fieldsData","client","setClient","name","setName","firstName","lastName","initialized","setInitialized","isEmailCreated","setIsEmailCreated","router","document","title","titleSubText","onSubmit","e","preventDefault","method","data","url","serverURL","query","id","responseType","onDelete","res","msg","push","alert","onInputChange","target","type","value","email","toggleIsEmailCreated","getInitialProps","context","resClient","resFields"],"mappings":"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","sourcesContent":["import Header from \"../../components/Header\";\nimport axios from \"axios\";\nimport { useRouter } from \"next/router\";\nimport { useEffect, useState } from \"react\";\nimport globalVars from \"../../library/globalVariables\";\nimport SingleClientData from \"../../components/singleClient/SingleClientData\";\nimport ButtonsSingle from \"../../components/singleClient/ButtonsSingle\";\nimport LoadingSpinner from \"../../components/loadingSpinner\";\nimport EmailForm from \"../../components/EmailForm\";\n\nconst Client = ({ clientData, fieldsData }: any) => {\n  const [client, setClient] = useState(clientData);\n  const [name, setName] = useState(`${clientData.firstName} ${clientData.lastName}`);\n  const [initialized, setInitialized] = useState(false);\n  const [isEmailCreated, setIsEmailCreated] = useState(false);\n  const router = useRouter();\n\n  useEffect(() => {\n    document.title = `${name} ${globalVars.titleSubText}`;\n    setInitialized(true);\n  });\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    setName(`${client.firstName} ${client.lastName}`);\n\n    await axios({\n      method: \"put\",\n      data: client,\n      url: `${globalVars.serverURL}/clients/${router.query.id}`,\n      responseType: \"json\"\n    });\n  };\n\n  const onDelete = async (e) => {\n    e.preventDefault();\n    const res = await axios({\n      method: \"delete\",\n      url: `${globalVars.serverURL}/clients/${router.query.id}`,\n      responseType: \"json\"\n    }) \n    const data = await res.data;\n    await data.msg === \"Success\" ? router.push(\"/clients\") : alert(\"Something went wrong!\")\n  }\n\n  const onInputChange = e => {\n    setClient({\n      ...client,\n      [e.target.name]:\n        e.target.type === \"number\" ? parseInt(e.target.value) : e.target.value\n    });\n  };\n\n  return !initialized ? (\n    <LoadingSpinner/>\n  ) : (\n    <div>\n      <Header />\n      <h1>\n        {name}\n      </h1>\n      <form onSubmit={onSubmit}>\n          <SingleClientData\n            fieldsData={fieldsData}\n            client={client}\n            onInputChange={onInputChange}\n          />\n      <EmailForm\n        to={client.email}\n        isEmailCreated={isEmailCreated}\n        toggleIsEmailCreated={toggleIsEmailCreated}\n      />\n      <ButtonsSingle onDelete={onDelete} toggleIsEmailCreated={toggleIsEmailCreated}/>\n      </form>\n    </div>\n  );\n};\n\nClient.getInitialProps = async (context: any) => {\n  const { id } = context.query;\n  const resClient = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/clients/${id}`,\n    responseType: \"json\"\n  });\n  const clientData = await resClient.data;\n\n  const resFields = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/fields`,\n    responseType: \"json\"\n  });\n  const fieldsData = await resFields.data;\n\n  return { clientData, fieldsData };\n};\n\nexport default Client;\n"]},"metadata":{},"sourceType":"module"}