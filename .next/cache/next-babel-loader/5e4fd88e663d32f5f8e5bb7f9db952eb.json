{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/pages/clients/[key].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useReducer, useContext } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport Header from \"../../components/Header\";\nimport TableBody from \"../../components/clients/TableBody\";\nimport UserContext from \"../../components/UserContext\";\nimport stringMethods from \"../../library/stringMethods\";\nimport globalVars from \"../../library/globalVariables\";\nimport TableHead from \"../../components/clients/TableHead\";\nimport CreateClient from \"../../components/clients/CreateClient\";\nimport EmailForm from \"../../components/EmailForm\";\nimport Buttons from \"../../components/clients/Buttons\";\nimport LoadingSpinner from \"../../components/LoadingSpinner\";\nimport { Table, Typography, Box } from \"@material-ui/core\";\nimport TableBodyMui from \"@material-ui/core/TableBody\";\nimport languages from \"../../library/languages\";\n\nvar Clients = function Clients(_ref) {\n  var fieldData = _ref.fieldData,\n      clientData = _ref.clientData;\n  var router = useRouter();\n  var user = useContext(UserContext);\n\n  var _useReducer = useReducer(function (state, action) {\n    switch (action.type) {\n      case \"handleCheckedClients\":\n        return state.map(function (client) {\n          return client._id === action.payload.id ? !!!client.isChecked ? _objectSpread({}, client, {\n            isChecked: true\n          }) : _objectSpread({}, client, {\n            isChecked: false\n          }) : client;\n        });\n\n      case \"addClient\":\n        return [].concat(_toConsumableArray(state), [action.payload.newClient]);\n\n      case \"deleteCheckedClients\":\n        return state.filter(function (client) {\n          return !client.isChecked;\n        });\n\n      case \"unCheckAll\":\n        return state.map(function (client) {\n          return _objectSpread({}, client, {\n            isChecked: false\n          });\n        });\n\n      case \"toggleCheckAll\":\n        return state.map(function (client) {\n          return _objectSpread({}, client, {\n            isChecked: !action.payload.checked\n          });\n        });\n\n      default:\n        return state;\n    }\n  }, clientData),\n      clients = _useReducer[0],\n      setClients = _useReducer[1];\n\n  var _useState = useState({\n    //default sort by \"date added\"\n    sortBy: \"Date added\",\n    reverse: true\n  }),\n      sort = _useState[0],\n      setSort = _useState[1];\n\n  var _useState2 = useState(false),\n      allCheck = _useState2[0],\n      setAllCheck = _useState2[1];\n\n  var _useState3 = useState(false),\n      initialized = _useState3[0],\n      setInitialized = _useState3[1];\n\n  var _useState4 = useState(false),\n      isClientAdded = _useState4[0],\n      setIsClientAdded = _useState4[1];\n\n  var _useState5 = useState(false),\n      isEmailCreated = _useState5[0],\n      setIsEmailCreated = _useState5[1];\n\n  useEffect(function () {\n    // set page title\n    var title = new stringMethods(router.pathname).removeSlash().removeSlashAndTextAfter().firstCharUpperCase().addStringToEnd(globalVars.titleSubText).getString();\n    document.title = title;\n    setInitialized(true);\n    user.checkUser();\n  }, [router]);\n  useEffect(function () {\n    // reset email state, when user uncheck all recievers / clients\n    filterCheckedClients().length === 0 && isEmailCreated ? setIsEmailCreated(!isEmailCreated) : null;\n  }, [clients]); // create H1\n\n  var h1 = new stringMethods(router.pathname).removeSlash().removeSlashAndTextAfter().firstCharUpperCase().getString();\n\n  var sortBy = function sortBy(fieldName) {\n    setSort(_objectSpread({}, sort, {\n      sortBy: fieldName,\n      reverse: fieldName === sort.sortBy ? // if clicked again on same field ->Â reverse sort based on current reverse state\n      !sort.reverse ? true : false : // if new field being clicked -> set reverse true to immediately sort column ASC\n      true\n    }));\n  };\n\n  var handleCheckbox = function handleCheckbox(id) {\n    setClients({\n      type: \"handleCheckedClients\",\n      payload: {\n        id: id\n      }\n    });\n  };\n\n  var handleCheckAll = function handleCheckAll() {\n    setAllCheck(function (state) {\n      return !state;\n    });\n    setClients({\n      type: \"toggleCheckAll\",\n      payload: {\n        checked: allCheck\n      }\n    });\n  };\n\n  var addNewClientToState = function addNewClientToState(newClient) {\n    setClients({\n      type: \"addClient\",\n      payload: {\n        newClient: newClient\n      }\n    });\n  };\n\n  var filterCheckedClients = function filterCheckedClients() {\n    return clients.filter(function (client) {\n      return client.isChecked;\n    });\n  };\n\n  var unCheckAll = function unCheckAll() {\n    setClients({\n      type: \"unCheckAll\"\n    });\n  };\n\n  var toggleIsEmailCreated = function toggleIsEmailCreated() {\n    setIsEmailCreated(isEmailCreated ? false : true);\n  };\n\n  var toggleIsClientAdded = function toggleIsClientAdded() {\n    isClientAdded ? setIsClientAdded(false) : setIsClientAdded(true);\n  };\n\n  var deleteMultipleClients =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setClients({\n                type: \"deleteCheckedClients\"\n              });\n              _context.next = 3;\n              return axios({\n                method: \"DELETE\",\n                data: filterCheckedClients().map(function (e) {\n                  return e._id;\n                }),\n                url: \"\".concat(globalVars.serverURL, \"/clients/\"),\n                params: {\n                  key: user.user.userkey\n                },\n                responseType: \"json\"\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function deleteMultipleClients() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return !user.user.signedIn && !initialized ? __jsx(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }) : __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }), __jsx(Typography, {\n    component: \"h1\",\n    variant: \"h3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, h1), __jsx(Typography, {\n    variant: \"h5\",\n    gutterBottom: true,\n    style: {\n      color: \"#535658\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, languages.en.saved, \" \", clients.length), __jsx(EmailForm, {\n    to: filterCheckedClients().map(function (e) {\n      return e[\"Email\"];\n    }),\n    isEmailCreated: isEmailCreated,\n    toggleIsEmailCreated: toggleIsEmailCreated,\n    unCheckAll: unCheckAll,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }), __jsx(CreateClient, {\n    fields: fieldData,\n    isClientAdded: isClientAdded,\n    toggleIsClientAdded: toggleIsClientAdded,\n    addNewClientToState: addNewClientToState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }), __jsx(Buttons, {\n    clientsAreNotChecked: !clients.some(function (client) {\n      return client.isChecked;\n    }),\n    deleteMultipleClients: deleteMultipleClients,\n    toggleIsClientAdded: toggleIsClientAdded,\n    isClientAdded: isClientAdded,\n    toggleIsEmailCreated: toggleIsEmailCreated,\n    isEmailCreated: isEmailCreated,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }), __jsx(Box, {\n    width: \"1\",\n    overflow: \"auto\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, __jsx(Table, {\n    \"aria-label\": \"clients table\",\n    size: \"small\",\n    style: {\n      backgroundColor: \"white\",\n      border: \"1px solid #e0e0e0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, __jsx(TableHead, {\n    fields: fieldData,\n    handleCheckAll: handleCheckAll,\n    allCheck: allCheck,\n    sortBy: sortBy,\n    sort: sort,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }), __jsx(TableBodyMui, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, __jsx(TableBody, {\n    clients: clients,\n    fields: fieldData,\n    sort: sort,\n    handleCheckbox: handleCheckbox,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  })))));\n};\n\nClients.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(context) {\n    var clientRes, clientData, fieldRes, fieldData;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return axios({\n              method: \"GET\",\n              url: \"\".concat(globalVars.serverURL, \"/clients/\"),\n              params: {\n                key: context.query.key\n              },\n              responseType: \"json\"\n            });\n\n          case 2:\n            clientRes = _context2.sent;\n            _context2.next = 5;\n            return clientRes.data;\n\n          case 5:\n            clientData = _context2.sent;\n            _context2.next = 8;\n            return axios({\n              method: \"GET\",\n              url: \"\".concat(globalVars.serverURL, \"/fields\"),\n              params: {\n                key: context.query.key\n              },\n              responseType: \"json\"\n            });\n\n          case 8:\n            fieldRes = _context2.sent;\n            _context2.next = 11;\n            return fieldRes.data;\n\n          case 11:\n            fieldData = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              clientData: clientData,\n              fieldData: fieldData\n            });\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default Clients;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/pages/clients/[key].tsx"],"names":["useState","useEffect","useReducer","useContext","useRouter","axios","Header","TableBody","UserContext","stringMethods","globalVars","TableHead","CreateClient","EmailForm","Buttons","LoadingSpinner","Table","Typography","Box","TableBodyMui","languages","Clients","fieldData","clientData","router","user","state","action","type","map","client","_id","payload","id","isChecked","newClient","filter","checked","clients","setClients","sortBy","reverse","sort","setSort","allCheck","setAllCheck","initialized","setInitialized","isClientAdded","setIsClientAdded","isEmailCreated","setIsEmailCreated","title","pathname","removeSlash","removeSlashAndTextAfter","firstCharUpperCase","addStringToEnd","titleSubText","getString","document","checkUser","filterCheckedClients","length","h1","fieldName","handleCheckbox","handleCheckAll","addNewClientToState","unCheckAll","toggleIsEmailCreated","toggleIsClientAdded","deleteMultipleClients","method","data","e","url","serverURL","params","key","userkey","responseType","signedIn","color","en","saved","some","backgroundColor","border","getInitialProps","context","query","clientRes","fieldRes"],"mappings":"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","sourcesContent":["import { useState, useEffect, useReducer, useContext } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport Header from \"../../components/Header\";\nimport TableBody from \"../../components/clients/TableBody\";\nimport UserContext from \"../../components/UserContext\";\nimport stringMethods from \"../../library/stringMethods\";\nimport globalVars from \"../../library/globalVariables\";\nimport TableHead from \"../../components/clients/TableHead\";\nimport CreateClient from \"../../components/clients/CreateClient\";\nimport EmailForm from \"../../components/EmailForm\";\nimport Buttons from \"../../components/clients/Buttons\";\nimport LoadingSpinner from \"../../components/LoadingSpinner\";\nimport { Table, Typography, Box } from \"@material-ui/core\";\nimport TableBodyMui from \"@material-ui/core/TableBody\";\nimport languages from \"../../library/languages\";\n\nconst Clients = ({ fieldData, clientData }: any) => {\n  const router = useRouter();\n  const user = useContext(UserContext);\n  const [clients, setClients] = useReducer((state, action) => {\n    switch (action.type) {\n      case \"handleCheckedClients\":\n        return state.map(client =>\n          client._id === action.payload.id\n            ? !!!client.isChecked\n              ? { ...client, isChecked: true }\n              : { ...client, isChecked: false }\n            : client\n        );\n      case \"addClient\":\n        return [...state, action.payload.newClient];\n      case \"deleteCheckedClients\":\n        return state.filter(client => !client.isChecked);\n      case \"unCheckAll\":\n        return state.map(client => ({ ...client, isChecked: false }));\n        case \"toggleCheckAll\":\n        return state.map(client => ({ ...client, isChecked: !action.payload.checked }))\n      default:\n        return state;\n    }\n  }, clientData);\n\n  const [sort, setSort] = useState({\n    //default sort by \"date added\"\n    sortBy: \"Date added\",\n    reverse: true\n  });\n  \n  const [allCheck, setAllCheck] = useState(false);\n  const [initialized, setInitialized] = useState(false);\n  const [isClientAdded, setIsClientAdded] = useState(false);\n  const [isEmailCreated, setIsEmailCreated] = useState(false);\n\n  useEffect(() => {\n    // set page title\n    const title = new stringMethods(router.pathname)\n      .removeSlash()\n      .removeSlashAndTextAfter()\n      .firstCharUpperCase()\n      .addStringToEnd(globalVars.titleSubText)\n      .getString();\n    document.title = title;\n    setInitialized(true);\n    user.checkUser();\n  }, [router]);\n\n  useEffect(() => {\n    // reset email state, when user uncheck all recievers / clients\n    filterCheckedClients().length === 0 && isEmailCreated\n      ? setIsEmailCreated(!isEmailCreated)\n      : null;\n  }, [clients]);\n\n  // create H1\n  const h1 = new stringMethods(router.pathname)\n    .removeSlash()\n    .removeSlashAndTextAfter()\n    .firstCharUpperCase()\n    .getString();\n\n  const sortBy = fieldName => {\n    setSort({\n      ...sort,\n      sortBy: fieldName,\n      reverse:\n        fieldName === sort.sortBy\n          ? // if clicked again on same field ->Â reverse sort based on current reverse state\n            !sort.reverse\n            ? true\n            : false\n          : // if new field being clicked -> set reverse true to immediately sort column ASC\n            true\n    });\n  };\n\n  const handleCheckbox = id => {\n    setClients({\n      type: \"handleCheckedClients\",\n      payload: { id }\n    });\n  };\n\n  const handleCheckAll = () => {\n    setAllCheck(state => !state)\n    setClients({\n      type: \"toggleCheckAll\",\n      payload: {checked: allCheck}\n    });\n  };\n\n  const addNewClientToState = newClient => {\n    setClients({\n      type: \"addClient\",\n      payload: { newClient }\n    });\n  };\n\n  const filterCheckedClients = () => clients.filter(client => client.isChecked);\n\n  const unCheckAll = () => {\n    setClients({ type: \"unCheckAll\" });\n  };\n\n  const toggleIsEmailCreated = () => {\n    setIsEmailCreated(isEmailCreated ? false : true);\n  };\n\n  const toggleIsClientAdded = () => {\n    isClientAdded ? setIsClientAdded(false) : setIsClientAdded(true);\n  };\n\n  const deleteMultipleClients = async () => {\n    setClients({\n      type: \"deleteCheckedClients\"\n    });\n\n    await axios({\n      method: \"DELETE\",\n      data: filterCheckedClients().map(e => e._id),\n      url: `${globalVars.serverURL}/clients/`,\n      params: { key: user.user.userkey },\n      responseType: \"json\"\n    });\n  };\n\n  return !user.user.signedIn && !initialized ? (\n    <LoadingSpinner />\n  ) : (\n    <div>\n      <Header />\n      <Typography component=\"h1\" variant=\"h3\">\n        {h1}\n      </Typography>\n      <Typography variant=\"h5\" gutterBottom style={{ color: \"#535658\" }}>\n        {languages.en.saved} {clients.length}\n      </Typography>\n      <EmailForm\n        to={filterCheckedClients().map(e => e[\"Email\"])}\n        isEmailCreated={isEmailCreated}\n        toggleIsEmailCreated={toggleIsEmailCreated}\n        unCheckAll={unCheckAll}\n      />\n      <CreateClient\n        fields={fieldData}\n        isClientAdded={isClientAdded}\n        toggleIsClientAdded={toggleIsClientAdded}\n        addNewClientToState={addNewClientToState}\n      />\n      <Buttons\n        clientsAreNotChecked={!clients.some(client => client.isChecked)}\n        deleteMultipleClients={deleteMultipleClients}\n        toggleIsClientAdded={toggleIsClientAdded}\n        isClientAdded={isClientAdded}\n        toggleIsEmailCreated={toggleIsEmailCreated}\n        isEmailCreated={isEmailCreated}\n      />\n      <Box width=\"1\" overflow=\"auto\">\n        <Table\n          aria-label=\"clients table\"\n          size=\"small\"\n          style={{ backgroundColor: \"white\", border: \"1px solid #e0e0e0\" }}\n        >\n          <TableHead\n            fields={fieldData}\n            handleCheckAll={handleCheckAll}\n            allCheck={allCheck}\n            sortBy={sortBy}\n            sort={sort}\n          />\n          <TableBodyMui>\n            <TableBody\n              clients={clients}\n              fields={fieldData}\n              sort={sort}\n              handleCheckbox={handleCheckbox}\n            />\n          </TableBodyMui>\n        </Table>\n      </Box>\n    </div>\n  );\n};\n\nClients.getInitialProps = async (context: any) => {\n  //fetch clients\n  const clientRes = await axios({\n    method: \"GET\",\n    url: `${globalVars.serverURL}/clients/`,\n    params: { key: context.query.key },\n    responseType: \"json\"\n  });\n  const clientData = await clientRes.data;\n\n  //fetch fields\n  const fieldRes = await axios({\n    method: \"GET\",\n    url: `${globalVars.serverURL}/fields`,\n    params: { key: context.query.key },\n    responseType: \"json\"\n  });\n  const fieldData = await fieldRes.data;\n\n  //? fetch clients counter -> unsued -> takes number from main clients\n  // const resClientCount = await axios(\n  //   `${globalVars.serverURL}/clients/count?key=${context.query.key}`\n  // );\n  // const clientCount = await resClientCount.data\n\n  return {\n    clientData,\n    fieldData\n  };\n};\n\nexport default Clients;\n"]},"metadata":{},"sourceType":"module"}