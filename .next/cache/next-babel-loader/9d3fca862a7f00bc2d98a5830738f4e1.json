{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/dp/crm-app-fe/components/clients/CreateClient.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useReducer, useEffect, useState, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport generateUniqueId from \"generate-unique-id\";\nimport UserContext from \"../UserContext\";\nimport ClientForm from \"./ClientForm\";\nimport globalVars from \"../../library/globalVariables\";\nimport languages from \"../../library/languages\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nvar CreateClient = function CreateClient(_ref) {\n  var fields = _ref.fields,\n      isClientAdded = _ref.isClientAdded,\n      toggleIsClientAdded = _ref.toggleIsClientAdded,\n      addNewClientToState = _ref.addNewClientToState;\n  var initialNewClientState = fields.map(function (e) {\n    return e.fieldName;\n  }).reduce(function (o, key) {\n    return _Object$assign(o, _defineProperty({}, key, \"\"));\n  }, {});\n  var user = useContext(UserContext);\n\n  var _useState = useState(false),\n      submitting = _useState[0],\n      setSubmitting = _useState[1];\n\n  var _useReducer = useReducer(function (state, action) {\n    switch (action.type) {\n      case \"onTextChange\":\n        return _objectSpread({}, state, _defineProperty({}, action.payload.fieldName, action.payload.fieldType === globalVars.fieldTypes.number ? _parseInt(action.payload.value) : action.payload.value));\n\n      case \"addId\":\n        return _objectSpread({}, state, {\n          _id: generateUniqueId({\n            length: 24,\n            useNumbers: true,\n            useLetters: false,\n            includeSymbols: [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n          })\n        });\n\n      case \"addDate\":\n        return _objectSpread({}, state, _defineProperty({}, \"Date added\", moment().format(\"llll\")));\n\n      case \"clear\":\n        return {\n          initialNewClientState: initialNewClientState\n        };\n\n      default:\n        return state;\n    }\n  }, initialNewClientState),\n      newClient = _useReducer[0],\n      setNewClient = _useReducer[1];\n\n  var onChange = function onChange(fieldType, event) {\n    setNewClient({\n      type: \"onTextChange\",\n      payload: {\n        fieldName: event.target.name,\n        value: event.target.value,\n        fieldType: fieldType\n      }\n    });\n  };\n\n  useEffect(function () {\n    //trigger side effect when submitting state is changed and its is true\n    submitting ? submitNewClient() : null;\n  }, [submitting]);\n\n  var onSubmit = function onSubmit(e) {\n    // on Button Click prepare client object to be ready to send\n    e.preventDefault();\n    setNewClient({\n      type: \"addDate\"\n    });\n    setNewClient({\n      type: \"addId\"\n    }); // change submitting state to trigger effect with POST req.\n\n    setSubmitting(true);\n  };\n\n  var submitNewClient =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var clientRes, clientData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return axios({\n                method: \"POST\",\n                data: newClient,\n                url: \"\".concat(globalVars.serverURL, \"/clients\"),\n                params: {\n                  key: user.user.userkey\n                },\n                responseType: \"json\"\n              });\n\n            case 2:\n              clientRes = _context.sent;\n              _context.next = 5;\n              return clientRes.data;\n\n            case 5:\n              clientData = _context.sent;\n\n              if (clientData.msg === globalVars.msgSuccess) {\n                // add client data to clients state for table update\n                addNewClientToState(newClient); // reset newClient state\n\n                setNewClient({\n                  type: \"clear\"\n                }); // hide form\n\n                toggleIsClientAdded(); //reset submitting\n\n                setSubmitting(false);\n              } else {\n                alert(languages.en.somethingWentWrong);\n              }\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function submitNewClient() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var onCancel = function onCancel() {\n    setNewClient({\n      type: \"clear\"\n    });\n    toggleIsClientAdded();\n  };\n\n  useEffect(function () {// console.log(fields);\n  }, []);\n  return isClientAdded ? __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"h4\",\n    component: \"h2\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, languages.en.addNewClient), __jsx(\"form\", {\n    onSubmit: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, __jsx(ClientForm, {\n    fields: fields,\n    onChange: onChange,\n    newClient: newClient,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, languages.en.save), __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: onCancel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, languages.en.cancel))) : null;\n};\n\nexport default CreateClient;","map":{"version":3,"sources":["/Users/davidzoufaly/code/dp/crm-app-fe/components/clients/CreateClient.tsx"],"names":["useReducer","useEffect","useState","useContext","moment","axios","generateUniqueId","UserContext","ClientForm","globalVars","languages","Button","Typography","CreateClient","fields","isClientAdded","toggleIsClientAdded","addNewClientToState","initialNewClientState","map","e","fieldName","reduce","o","key","user","submitting","setSubmitting","state","action","type","payload","fieldType","fieldTypes","number","value","_id","length","useNumbers","useLetters","includeSymbols","format","newClient","setNewClient","onChange","event","target","name","submitNewClient","onSubmit","preventDefault","method","data","url","serverURL","params","userkey","responseType","clientRes","clientData","msg","msgSuccess","alert","en","somethingWentWrong","onCancel","addNewClient","save","cancel"],"mappings":"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","sourcesContent":["import { useReducer, useEffect, useState, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport generateUniqueId from \"generate-unique-id\";\nimport UserContext from \"../UserContext\";\nimport ClientForm from \"./ClientForm\";\nimport globalVars from \"../../library/globalVariables\";\nimport languages from \"../../library/languages\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst CreateClient = ({\n  fields,\n  isClientAdded,\n  toggleIsClientAdded,\n  addNewClientToState,\n}: any) => {\n  const initialNewClientState = fields\n    .map((e: any) => e.fieldName)\n    .reduce((o, key) => Object.assign(o, { [key]: \"\" }), {});\n\n  const user = useContext(UserContext);\n  const [submitting, setSubmitting] = useState(false);\n  const [newClient, setNewClient] = useReducer((state, action) => {\n    switch (action.type) {\n      case \"onTextChange\":\n        return {\n          ...state,\n          [action.payload.fieldName]:\n            action.payload.fieldType === globalVars.fieldTypes.number\n              ? parseInt(action.payload.value)\n              : action.payload.value\n        };\n      case \"addId\":\n        return {\n          ...state,\n          _id: generateUniqueId({\n            length: 24,\n            useNumbers: true,\n            useLetters: false,\n            includeSymbols: [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n          })\n        };\n      case \"addDate\":\n        return {\n          ...state,\n           [\"Date added\"]: moment().format(\"llll\")\n        }\n      case \"clear\":\n        return {\n          initialNewClientState  \n        };\n\n      default:\n        return state;\n    }\n  }, initialNewClientState);\n\n  const onChange = (fieldType, event) => {\n    setNewClient({\n      type: \"onTextChange\",\n      payload: { fieldName : event.target.name, value: event.target.value, fieldType }\n    });\n  };\n\n  useEffect(() => {\n    //trigger side effect when submitting state is changed and its is true\n    submitting ? submitNewClient() : null;\n  }, [submitting])\n\n  const onSubmit = e => {\n      // on Button Click prepare client object to be ready to send\n      e.preventDefault();\n      setNewClient({type: \"addDate\"});\n      setNewClient({ type: \"addId\" });\n      // change submitting state to trigger effect with POST req.\n      setSubmitting(true);\n  };\n\n  const submitNewClient = async () => {\n    //post req to DB\n    const clientRes = await axios({\n      method: \"POST\",\n      data: newClient,\n      url: `${globalVars.serverURL}/clients`,\n      params: {key: user.user.userkey},\n      responseType: \"json\"\n    });\n    const clientData = await clientRes.data;\n    if (clientData.msg === globalVars.msgSuccess) {\n      // add client data to clients state for table update\n      addNewClientToState(newClient);\n      // reset newClient state\n      setNewClient({\n        type: \"clear\"\n      });\n      // hide form\n      toggleIsClientAdded();\n      //reset submitting\n      setSubmitting(false);\n    } else {\n      alert(languages.en.somethingWentWrong);\n    }\n  }\n\n  const onCancel = () => {\n    setNewClient({\n      type: \"clear\"\n    });\n    toggleIsClientAdded();\n  };\n\n  useEffect(() => {\n    // console.log(fields);\n  }, [])\n\n  return isClientAdded ? (\n    <div>\n      <Typography variant=\"h4\" component=\"h2\" gutterBottom>\n        {languages.en.addNewClient}\n      </Typography>\n      <form onSubmit={onSubmit}>\n        <ClientForm fields={fields} onChange={onChange} newClient={newClient} />\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n          {languages.en.save}\n        </Button>\n        <Button variant=\"contained\" color=\"secondary\" onClick={onCancel}>\n          {languages.en.cancel}\n        </Button>\n      </form>\n    </div>\n  ) : null;\n};\n\nexport default CreateClient;\n"]},"metadata":{},"sourceType":"module"}