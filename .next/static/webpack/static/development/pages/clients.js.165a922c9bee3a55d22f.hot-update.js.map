{"version":3,"file":"static/webpack/static/development/pages/clients.js.165a922c9bee3a55d22f.hot-update.js","sources":["webpack:///./components/clients/Buttons.tsx","webpack:///./components/clients/TableBody.tsx","webpack:///./components/clients/TableHead.tsx","webpack:///./pages/clients.tsx"],"sourcesContent":["import Button from \"@material-ui/core/Button\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport EmailIcon from '@material-ui/icons/Email';\n\nconst Buttons = ({\n  disabled,\n  toggleIsClientAdded,\n  deleteMultipleClients,\n  isClientAdded\n}: any) => (\n  <div>\n    <Button\n      variant=\"contained\"\n      color=\"primary\"\n      disabled={isClientAdded}\n      onClick={toggleIsClientAdded}\n      startIcon={<AddIcon />}\n    >\n      Add new\n    </Button>\n    <Button\n      variant=\"contained\"\n      color=\"secondary\"\n      disabled={disabled}\n      onClick={deleteMultipleClients}\n      startIcon={<DeleteIcon />}\n    >\n      Delete\n    </Button>\n    <Button variant=\"contained\"\n    color=\"primary\"\n    disabled={disabled}\n    startIcon={<EmailIcon/>}\n    >Email\n    </Button>\n  </div>\n);\n\nexport default Buttons;\n","import Link from \"next/link\";\nimport uniqid from \"uniqid\";\n\n//TODO Filtrují se i polé které neexistujou na straně body\n\ninterface IProps {\n  clients: any;\n  reverse: boolean;\n  sort: string;\n  fields: any;\n  handleCheckbox: any;\n}\n\nconst TableBody = ({\n  clients,\n  reverse,\n  sort,\n  fields,\n  handleCheckbox\n}: IProps) => {\n  if (fields.some(e => e.fieldName === sort && e.fieldType === \"number\")) {\n    if (reverse) {\n      clients.sort((a: any, b: any) => b[sort] - a[sort]);\n    } else {\n      clients.sort((a: any, b: any) => a[sort] - b[sort]);\n    }\n  } else {\n    if (reverse) {\n      clients.sort((a: any, b: any) => (b[sort] > a[sort] ? -1 : 1));\n    } else {\n      clients.sort((a: any, b: any) => (b[sort] < a[sort] ? -1 : 1));\n    }\n  }\n\n  const fieldNames = [];\n  fields.forEach((e: any) => fieldNames.push(e.fieldName, e.fieldType));\n\n  const tableClients = clients.map((e: any) => {\n    const tableItem = () => {\n      let items = [];\n\n      for (let key in e) {\n        //show only clients data with existing fields\n        e[key] !== e._id && fieldNames.includes(key)\n          ? items.push(<td key={uniqid()}>{e[key]}</td>)\n          : null;\n      }\n      // add checkbox at first position\n      items.unshift(\n        <td key={uniqid()}>\n          <input\n            type=\"checkbox\"\n            checked={e.isChecked === undefined ? false : e.isChecked}\n            onChange={() => handleCheckbox(e._id)}\n          />\n        </td>\n      );\n      // add profile link at last position\n      items.push(\n        <td key={uniqid()}><Link href=\"/clients/[id]\" as={`/clients/${e._id}`}>\n          <a>Go</a>\n        </Link></td>\n      );\n      return items;\n    };\n\n    return (\n      <tr key={e._id}>\n        {tableItem()}\n      </tr>\n    );\n  });\n  return tableClients;\n};\n\nexport default TableBody;\n","import StringMethods from \"../../library/stringMethods\";\nimport uniqid from \"uniqid\";\n\ninterface IProps {\n  sortBy: any;\n  fields: any;\n  reverse: boolean;\n}\n\n//TODO: Reverse šipka jen aktivního záhlaví\n\nconst TableHead = ({ fields, sortBy, reverse }: IProps) => {\n  const tableHeadings = fields.map((e: any) => {\n    const tableHeading = new StringMethods(e.fieldName)\n      .camelStringToText()\n      .firstCharUpperCase()\n      .getString();\n\n    return (\n      <th key={uniqid()}>\n        {reverse ? \"<\" : \">\"}\n        <button onClick={() => sortBy(e.fieldName)}>{tableHeading}</button>\n      </th>\n    );\n  });\n\n  return (\n    <thead>\n      <tr>\n        <th></th>\n        {tableHeadings}\n        <th>Client Profile</th>\n      </tr>\n    </thead>\n  );\n};\n\nexport default TableHead;\n","import { useState, useEffect, useReducer } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport Header from \"../components/Header\";\nimport TableBody from \"../components/clients/TableBody\";\nimport stringMethods from \"../library/stringMethods\";\nimport globalVars from \"../library/globalVariables\";\nimport TableHead from \"../components/clients/TableHead\";\nimport CreateClient from \"../components/CreateClient\";\nimport Buttons from \"../components/clients/Buttons\";\nimport LoadingSpinner from \"../components/loadingSpinner\";\n\nconst Clients = ({ fieldData, clientData }: any) => {\n  const router = useRouter();\n\n  const [clients, setClients] = useReducer((state, action) => {\n    switch (action.type) {\n      case \"handleCheckedClients\":\n        return state.map(client =>\n          client._id === action.payload.id\n            ? \n                client.isChecked === false || client.isChecked === undefined\n                  ? {...client, isChecked: true }\n                  : {...client, isChecked: false }\n            : client\n        );\n      case \"addClient\":\n        return [...state, action.payload.newClient];\n      case \"deleteCheckedClients\":\n        return state.filter(client => !client.isChecked);\n      default:\n        return state;\n    }\n  }, clientData);\n  //TODO: SPOJIT DO JEDNOHO STATU\n  const [reverse, setReverseOrder] = useState(false);\n  const [sort, setSortBy] = useState(\"firstName\");\n  //\n  const [initialized, setInitialized] = useState(false);\n  const [isClientAdded, setIsClientAdded] = useState(false);\n\n  useEffect(() => {\n    const title = new stringMethods(router.pathname)\n      .removeSlash()\n      .firstCharUpperCase()\n      .addStringToEnd(globalVars.titleSubText)\n      .getString();\n    document.title = title;\n    setInitialized(true);\n  });\n\n  const h1 = new stringMethods(router.pathname)\n    .removeSlash()\n    .firstCharUpperCase()\n    .getString();\n\n  const sortBy = fieldName => {\n    setSortBy(fieldName);\n    !reverse ? setReverseOrder(true) : setReverseOrder(false);\n  };\n\n  const toggleIsClientAdded = () => {\n    isClientAdded ? setIsClientAdded(false) : setIsClientAdded(true);\n  };\n\n  const handleCheckbox = id => {\n    setClients({\n      type: \"handleCheckedClients\",\n      payload: { id }\n    });\n  };\n\n  const addNewClientToState = newClient => {\n    setClients({\n      type: \"addClient\",\n      payload: { newClient }\n    });\n  };\n\n  const deleteMultipleClients = async () => {\n    setClients({\n      type: \"deleteCheckedClients\"\n    });\n\n    const clientsToDelete = clients\n      .filter(client => client.isChecked)\n      .map(e => e._id);\n\n    await axios({\n      method: \"delete\",\n      data: clientsToDelete,\n      url: `${globalVars.serverURL}/clients/`,\n      responseType: \"json\"\n    });\n  };\n\n  return !initialized ? (\n    <LoadingSpinner/>\n  ) : (\n    <div>\n      <Header />\n      <h1>{h1}</h1>\n      <CreateClient\n        fields={fieldData}\n        isClientAdded={isClientAdded}\n        toggleIsClientAdded={toggleIsClientAdded}\n        addNewClientToState={addNewClientToState}\n      />\n      <Buttons\n        disabled={!clients.some(client => client.isChecked)}\n        deleteMultipleClients={deleteMultipleClients}\n        toggleIsClientAdded={toggleIsClientAdded}\n        isClientAdded={isClientAdded}\n      />\n      <table>\n        <TableHead fields={fieldData} sortBy={sortBy} reverse={reverse} />\n        <tbody>\n          <TableBody\n            clients={clients}\n            fields={fieldData}\n            sort={sort}\n            reverse={reverse}\n            handleCheckbox={handleCheckbox}\n          />\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nClients.getInitialProps = async () => {\n  //fetch clients\n  const clientRes = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/clients`,\n    responseType: \"json\"\n  });\n  const clientData = await clientRes.data;\n\n  //fetch fields\n  const fieldRes = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/fields`,\n    responseType: \"json\"\n  });\n  const fieldData = await fieldRes.data;\n\n  return {\n    clientData,\n    fieldData\n  };\n};\n\nexport default Clients;\n"],"mappings":"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","sourceRoot":""}