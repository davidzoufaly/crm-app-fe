{"version":3,"file":"static/webpack/static/development/pages/emails/[key].js.775ce1e0dcc1204fa54a.hot-update.js","sources":["webpack:///./pages/emails/[key].tsx"],"sourcesContent":["import { useEffect, useState, useContext } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport generateUniqueId from \"generate-unique-id\";\nimport Header from \"../../components/Header\";\nimport LoadingSpinner from \"../../components/LoadingSpinner\";\nimport UserContext from \"../../components/UserContext\";\nimport stringMethods from \"../../library/stringMethods\";\nimport globalVars from \"../../library/globalVariables\";\nimport moment from \"moment\";\nimport languages from \"../../library/languages\";\nimport {\n  TableHead,\n  TableBody,\n  Typography,\n  Table,\n  TableCell,\n  TableRow,\n  Box\n} from \"@material-ui/core\";\n\nconst Emails = ({ data, emailsCount }) => {\n  const [initialized, setInitialized] = useState(false);\n  const router = useRouter();\n  const user = useContext(UserContext);\n\n  useEffect(() => {\n    const title = new stringMethods(router.pathname)\n      .removeSlash()\n      .removeSlashAndTextAfter()\n      .firstCharUpperCase()\n      .addStringToEnd(globalVars.titleSubText)\n      .getString();\n    document.title = title;\n    setInitialized(true);\n    user.checkUser();\n  }, [router]);\n\n  const tableBody = data\n    .map(email => (\n      <TableRow key={generateUniqueId()}>\n        <TableCell>\n        {email.date}\n        </TableCell>\n        <TableCell>\n          {email.to.map(e => (\n            <p key={generateUniqueId()}>{e}</p>\n          ))}\n        </TableCell>\n        <TableCell>{email.subject}</TableCell>\n        <TableCell>\n            {email.message.length > 50\n              ? `${email.message.slice(0, 50)}...`\n              : email.message}\n        </TableCell>\n      </TableRow>\n    ))\n    .reverse();\n\n  const h1 = new stringMethods(router.pathname)\n    .removeSlash()\n    .removeSlashAndTextAfter()\n    .firstCharUpperCase()\n    .getString();\n\n  return !user.user.signedIn && !initialized ? (\n    <LoadingSpinner />\n  ) : (\n    <>\n      <Header />\n      <Typography component=\"h1\" variant=\"h3\">\n        {h1}\n      </Typography>\n      <Typography variant=\"h5\" gutterBottom style={{color: \"#535658\"}}>\n        {new stringMethods(languages.en.sent).firstCharUpperCase().getString()}{\" \"}\n        {emailsCount}\n      </Typography>\n      <Box width=\"1\" overflow=\"auto\">\n      <Table\n        size=\"small\"\n        style={{ backgroundColor: \"white\", border: \"1px solid #e0e0e0\" }}\n      >\n        <TableHead>\n          <TableRow>\n            <TableCell>\n              <Typography variant=\"button\">\n                {languages.en.dateAndTime}\n              </Typography>\n            </TableCell>\n            <TableCell>\n              <Typography variant=\"button\">{languages.en.to}</Typography>\n            </TableCell>\n            <TableCell>\n              <Typography variant=\"button\">{languages.en.subject}</Typography>\n            </TableCell>\n            <TableCell>\n              <Typography variant=\"button\">{languages.en.message}</Typography>\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>{tableBody}</TableBody>\n      </Table>\n      </Box>\n    </>\n  );\n};\n\nEmails.getInitialProps = async (context: any) => {\n  const res = await axios({\n    method: \"get\",\n    params: { key: context.query.key },\n    url: `${globalVars.serverURL}/emails`,\n    responseType: \"json\"\n  });\n\n  const resEmailsCount = await axios(\n    `${globalVars.serverURL}/emails/count?key=${context.query.key}`\n  );\n\n  const emailsCount = await resEmailsCount.data;\n  const data = await res.data;\n  return { data, emailsCount };\n};\n\nexport default Emails;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AASA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAXA;AAoBA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AACA;AAFA;AACA;AADA;AAAA;AACA;AADA;AAQA;AARA;AAAA;AACA;AADA;AAYA;AAZA;AAAA;AACA;AADA;AAaA;AAbA;AAcA;AAAA;AAAA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAgBA;;;;A","sourceRoot":""}