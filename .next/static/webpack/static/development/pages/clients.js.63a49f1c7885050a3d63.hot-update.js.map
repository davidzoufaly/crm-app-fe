{"version":3,"file":"static/webpack/static/development/pages/clients.js.63a49f1c7885050a3d63.hot-update.js","sources":["webpack:///./components/clientTable/TableBody.tsx","webpack:///./components/clientTable/TableHead.tsx","webpack:///./pages/clients.tsx"],"sourcesContent":["import Link from \"next/link\";\nimport uniqid from \"uniqid\";\n\n//TODO Filtrují se i polé které neexistujou na straně body\n\ninterface IProps {\n  clients: any;\n  reverse: boolean;\n  sort: string;\n  fields: any;\n}\n\nconst TableBody = ({ clients, reverse, sort, fields}: IProps) => {\n  reverse\n    ? clients.sort((a: any, b: any) => (b[sort] > a[sort] ? 1 : -1))\n    : clients.sort((a: any, b: any) => (b[sort] > a[sort] ? -1 : 1));\n  \n  const fieldNames = [];\n  fields.forEach((e : any) => fieldNames.push(e.fieldName));\n\n  const tableClients = clients.map((e: any) => {\n    const tableItem = () => {\n      let items = [];\n      for (let key in e) {\n        //show only existing fields clients data\n        e[key] !== e._id && fieldNames.includes(key) ? items.push(<td key={uniqid()}>{e[key]}</td>) : null;\n      }\n      return items;\n    };\n\n    return (\n      <tr key={e._id}>\n        <td><input type=\"checkbox\" id={e._id}/></td>\n        {tableItem()}\n        <td>\n          <Link href=\"/clients/[id]\" as={`/clients/${e._id}`}>\n            <a>Go to client</a>\n          </Link>\n        </td>\n      </tr>\n    );\n  });\n  return tableClients;\n};\n\nexport default TableBody;\n","import StringMethods from \"../../library/stringMethods\";\nimport uniqid from \"uniqid\";\n\ninterface IProps {\n  sortBy: any;\n  fields: any;\n  reverse: boolean;\n}\n\n//TODO: Reverse šipka jen aktivního záhlaví\n\nconst TableHead = ({ fields, sortBy, reverse }: IProps) => {\n  const tableHeadings = fields.map((e: any) => {\n    const tableHeading = new StringMethods(e.fieldName)\n      .camelStringToText()\n      .firstCharUpperCase()\n      .getString();\n\n    return (\n      <th key={uniqid()}>\n        {reverse ? \"<\" : \">\"}<button onClick={() => sortBy(e.fieldName)}>{tableHeading}</button>\n      </th>\n    );\n  });\n\n  return (\n    <thead>\n      <tr>{tableHeadings}</tr>\n    </thead>\n  );\n};\n\nexport default TableHead;\n","import { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport Header from \"../components/Header\";\nimport TableBody from \"../components/clientTable/TableBody\";\nimport stringMethods from \"../library/stringMethods\";\nimport globalVars from \"../library/globalVariables\";\nimport TableHead from \"../components/clientTable/TableHead\";\nimport CreateClient from \"../components/CreateClient\";\nimport Button from \"@material-ui/core/Button\";\n\nconst Clients = ({ fieldData, clientData }: any) => {\n  const router = useRouter();\n\n  const [clients, setClients] = useState(clientData);\n  //TODO: SPOJIT DO JEDNOHO STATU\n  const [reverse, setReverseOrder] = useState(false);\n  const [sort, setSortBy] = useState(\"firstName\");\n  //\n  const [headingOne, setHeadingOne] = useState(\"\");\n  const [initialized, setInitialized] = useState(false);\n  const [isClientAdded, setIsClientAdded] = useState(false);\n\n  useEffect(() => {\n    setHeadingOne(\n      new stringMethods(router.pathname)\n        .removeSlash()\n        .firstCharUpperCase()\n        .getString()\n    );\n    const title = new stringMethods(router.pathname)\n      .removeSlash()\n      .firstCharUpperCase()\n      .addStringToEnd(globalVars.titleSubText)\n      .getString();\n    document.title = title;\n    setInitialized(true);\n  });\n\n  const refreshList = async () => {\n    //get data from DB after change\n    const res = await axios({\n      method: \"get\",\n      url: `${globalVars.serverURL}/clients/`,\n      responseType: \"json\"\n    });\n    const data = await res.data;\n    setClients(data);\n  }\n\n  const sortBy = (fieldName) => {\n    setSortBy(fieldName);\n    !reverse ? setReverseOrder(true) : setReverseOrder(false);\n  }\n\n  const toggleIsClientAdded = () => {\n    isClientAdded ? setIsClientAdded(false) : setIsClientAdded(true);\n  }\n\n  if (!initialized) {\n    return \"Loading\";\n  }\n  return (\n    <div>\n      <Header />\n      <h1>{headingOne}</h1>\n      <Button variant=\"contained\" color=\"primary\" onClick={() => setIsClientAdded(true)}>\n      Add new client\n      </Button>\n      <CreateClient fields={fieldData} isClientAdded={isClientAdded} toggleIsClientAdded={toggleIsClientAdded} refreshList={refreshList} />\n      <table>\n          <TableHead fields={fieldData} sortBy={sortBy} reverse={reverse}/>\n          <tbody>\n          <TableBody clients={clients} fields={fieldData} sort={sort} reverse={reverse}/>\n          </tbody>\n      </table>\n\n    </div>\n  );\n};\n\nClients.getInitialProps = async () => {\n  const clientRes = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/clients`,\n    responseType: \"json\"\n  });\n  const clientData = await clientRes.data;\n\n  const fieldRes = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/fields`,\n    responseType: \"json\"\n  })\n  const fieldData = await fieldRes.data\n\n  return {\n    clientData, fieldData\n  };\n};\n\nexport default Clients;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAUA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AAOA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChaA;AAbA;AAgBA;AAAA;AADA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBA;;;;A","sourceRoot":""}