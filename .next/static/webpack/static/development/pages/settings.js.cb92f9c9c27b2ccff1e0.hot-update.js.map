{"version":3,"file":"static/webpack/static/development/pages/settings.js.cb92f9c9c27b2ccff1e0.hot-update.js","sources":["webpack:///./components/AddOrEditField.tsx","webpack:///./components/CustomClientFields.tsx","webpack:///./components/CustomFields.tsx"],"sourcesContent":["import SelectFieldOptions from \"../components/SelectFieldOptions\";\nimport uniqid from \"uniqid\";\nimport axios from \"axios\";\nimport globalVars from \"../library/globalVariables\";\nimport { useState } from \"react\";\n\nconst AddOrEditField = ({ fieldObject, changeDisplayComponent, refreshList }: any) => {\n  const [displayComponent, setDisplayComponent] = useState(false);\n\n  const saveField = async () => {\n\n    const res = await axios({\n      method: \"post\",\n      url: `${globalVars.serverURL}/fields/`,\n      data: updatedField,\n      responseType: \"json\"\n    });\n    const data = await res.data;\n    data.msg === \"Success\" ? changeDisplayComponent() : null;\n    console.log(fieldObject);\n    refreshList();\n  };\n\n  const onNameChange = (event: any) => {\n    setUpdatedField({ ...updatedField, fieldName: event.target.value});\n    console.log(updatedField);\n  };\n\n  const onSelectChange = (event: any) => {\n    setUpdatedField({\n      ...updatedField,\n      fieldType: event.target.options[event.target.options.selectedIndex].value\n    });\n  };\n\n  const handleOptionSpawn = () => {\n    setUpdatedField({\n      ...updatedField,\n      fieldOptions: [...updatedField.fieldOptions, { id: uniqid(), value: \"\" }]\n    });\n  };\n\n  const onChange = (event: any) => {\n    setUpdatedField({\n      ...updatedField,\n      fieldOptions: updatedField.fieldOptions.filter((e: any) =>\n        event.target.id === e.id ? (e.value = event.target.value) : e\n      )\n    });\n  };\n\n  const onDelete = (event: any) => {\n    setUpdatedField({\n      ...updatedField,\n      fieldOptions: updatedField.fieldOptions.filter((e: any) =>\n        event.target.id !== e.id ? e : null\n      )\n    });\n  };\n\n  return displayComponent ? (\n    <div>\n      <label htmlFor=\"field-name\">Field name</label>\n      <input\n        type=\"text\"\n        id=\"field-name\"\n        defaultValue={updatedField.fieldName}\n        onChange={onNameChange}\n      />\n      <label htmlFor=\"field-type\">Field type</label>\n      <select id=\"field-type\" onChange={onSelectChange} defaultValue={updatedField.fieldType}> \n        <option value=\"text\">Text</option>\n        <option value=\"select\">Select</option>\n        <option value=\"number\">Number</option>\n      </select>\n      <SelectFieldOptions\n        options={updatedField.fieldOptions}\n        onChange={onChange}\n        onDelete={onDelete}\n      />\n      {updatedField.fieldType === \"select\" ? (\n        <button onClick={handleOptionSpawn}>New</button>\n      ) : null}\n      <button onClick={saveField}>Save</button>\n      <button onClick={changeDisplayComponent}>Cancel</button>\n    </div>\n  ) : (<button onClick={console.log(\"hi\")}>Add new field</button>);\n};\n\nexport default AddOrEditField;\n","\nimport { useState } from \"react\";\nimport AddOrEditField from \"../components/AddOrEditField\";\nimport axios from \"axios\";\nimport globalVars from \"../library/globalVariables\";\nimport CustomFields from \"../components/CustomFields\";\n\nconst CustomClientFields = ({ fields, refreshList }: any) => {\n  const [editedField, setEditedField] = useState({\n    fieldName: \"\",\n    fieldType: \"text\",\n    fieldPermanent: false,\n    fieldOptions: []\n  })\n\n  const deleteField = async (event : any) => {\n    const id = event.target.id;\n    const res = await axios({\n        method: \"delete\",\n        url:`${globalVars.serverURL}/fields/${id}`,\n        responseType: \"json\"\n    })\n    const resData = await res.data;\n    resData.msg === \"Success\" ? refreshList() : null;\n  }\n\n  const setupEditedField = (obj ? : any) => {\n    setEditedField(obj);\n    changeDisplayComponent()\n  }\n\n  const changeDisplayComponent = () => {\n    displayComponent ? setDisplayComponent(false) : setDisplayComponent(true);\n  }\n\n  return (\n    <div>\n      <h2>Custom Client Fields</h2>\n      <CustomFields deleteField={deleteField} setupEditedField={setEditedField}  fields={fields}/>\n     <AddOrEditField fieldObject={editedField} setupEditedField={setupEditedField} refreshList={refreshList} />\n    </div>\n  );\n};\n\nexport default CustomClientFields;\n","import stringMethods from \"../library/stringMethods\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst CustomFields = ({ fields, setupEditedField, deleteField }: any) => {\n\n  const useStyles = makeStyles({\n    card: {\n      textAlign: \"center\",\n      height: \"100%\",\n      minWidth: \"300px\"\n    },\n    list: {\n      listStyleType: \"disc\"\n    },\n    title: {\n      fontSize: 14\n    },\n    pos: {\n      marginBottom: 12\n    }\n  });\n\n  const classes = useStyles({});\n\n  const separatedCustomFields = fields\n    .filter(({ fieldPermanent }: any) => !fieldPermanent)\n    .map(({ fieldName, _id, fieldType, fieldOptions }: any) => {\n      const customFieldNameFormated = new stringMethods(fieldName.toLowerCase())\n        .firstCharUpperCase()\n        .getString();\n\n      const optionsMap = () => {\n        return fieldOptions.map((e: any) => {\n          return (\n            <ListItem key={e.id}>\n              <ListItemText primary={e.value.toLowerCase()} />\n            </ListItem>\n          );\n        });\n      };\n\n      return (\n        <Grid item key={_id}>\n          <Card className={classes.card}>\n            <CardContent>\n              <Typography variant=\"h5\" component=\"h3\">\n                {customFieldNameFormated}\n              </Typography>\n              <Typography className={classes.pos} color=\"textSecondary\">\n                ({fieldType.toLowerCase()})\n              </Typography>\n              {fieldType === \"select\" ? (\n                <List className={classes.list} dense={true}>\n                  {optionsMap()}\n                </List>\n              ) : null}\n              <button\n                onClick={() =>\n                  setupEditedField({\n                    fieldName: customFieldNameFormated,\n                    fieldType,\n                    fieldPermanent: false,\n                    fieldOptions\n                  })\n                }\n              >\n                Edit field\n              </button>\n              <button onClick={deleteField} id={_id}>\n                Delete field\n              </button>\n            </CardContent>\n          </Card>\n        </Grid>\n      );\n    });\n\n  return (\n    <Grid container spacing={2}>\n      {separatedCustomFields}\n    </Grid>\n  );\n};\n\nexport default CustomFields;\n"],"mappings":"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","sourceRoot":""}