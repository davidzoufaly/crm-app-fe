{"version":3,"file":"static/webpack/static/development/pages/index.js.418a93949e50abc6e398.hot-update.js","sources":["webpack:///./components/homepage/RegisterForm.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport TextInput from \"./TextInput\";\nimport Button from \"./Button\";\nimport globalVars from \"../../library/globalVariables\";\nimport languages from \"../../library/languages\";\nimport stringMethods from \"../../library/stringMethods\";\nimport LoadingSpinner from \"../LoadingSpinner\";\nimport { Typography, Box } from '@material-ui/core';\n\nconst RegisterForm = ({ changeToLogin }) => {\n  const [regUser, setRegUser] = useState({\n    username: \"\",\n    password: \"\",\n    repeatPassword: \"\"\n  });\n  const [isReg, setIsReg] = useState(false)\n\n  const onChange = e => {\n    setRegUser({ ...regUser, [e.target.name]: e.target.value });\n  };\n\n  useEffect(() =>Â {\n    console.log(isReg);\n  },[isReg])\n\n  const sentFormToBe = async () => {\n    const { username, password } = regUser;\n\n    const userRes = await axios({\n      method: \"POST\",\n      data: { username, password },\n      url: `${globalVars.serverURL}/users`,\n      responseType: \"json\"\n    });\n    const userData = await userRes.data;\n    //! refactor\n    !!userData ? setIsReg(false) : null\n    \n    switch (userData.msg) {\n      case globalVars.msgSuccess:\n        alert(languages.en.success);\n        changeToLogin();\n        break;\n      case \"Exist\":\n        alert(languages.en.userAlreadyExists);\n        break;\n      default:\n        alert(languages.en.somethingWentWrong);\n    }\n  };\n\n  const onRegister = () => {\n    setIsReg(true);\n    setTimeout(() => {\n      regUser.password === regUser.repeatPassword\n        ? sentFormToBe()\n        : alert(languages.en.passwordsDoesNotMatch);\n    }, 4000)\n  };\n\n  return (\n    <>\n      <Typography component=\"h2\" variant=\"h4\" gutterBottom>\n        {new stringMethods(languages.en.register)\n          .firstCharUpperCase()\n          .getString()\n        }\n      </Typography>\n      <form>\n        <TextInput\n          onChange={onChange}\n          type=\"text\"\n          value={regUser.username}\n          text=\"username\"\n          title={new stringMethods(languages.en.username)\n            .firstCharUpperCase()\n            .getString()}\n        />\n        <TextInput\n          onChange={onChange}\n          type=\"password\"\n          value={regUser.password}\n          text=\"password\"\n          title={languages.en.password}\n        />\n        <TextInput\n          onChange={onChange}\n          type=\"password\"\n          value={regUser.repeatPassword}\n          text=\"repeatPassword\"\n          title={new stringMethods(languages.en.repeatPassword)\n            .firstCharUpperCase()\n            .getString()}\n        />\n        <Box display=\"flex\" justifyContent=\"flex-end\" mt=\"2rem\">\n          {isReg ? <LoadingSpinner margin={\"r\"} level={1} /> : null}\n          <Button onClick={onRegister} text={languages.en.register} variant=\"contained\" />\n        </Box>\n      </form>\n    </>\n  );\n};\n\nexport default RegisterForm;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAEA;AACA;AACA;AAHA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAJA;AACA;AAJA;AAGA;AAHA;AAAA;AACA;AADA;AASA;AACA;AACA;AAXA;AAAA;AAAA;AACA;AADA;AAeA;AACA;AAhBA;AACA;AADA;AAmBA;AAnBA;AACA;AADA;AAsBA;AACA;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAyBA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;;;A","sourceRoot":""}