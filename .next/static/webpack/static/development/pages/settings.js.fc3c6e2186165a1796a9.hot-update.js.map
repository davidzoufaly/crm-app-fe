{"version":3,"file":"static/webpack/static/development/pages/settings.js.fc3c6e2186165a1796a9.hot-update.js","sources":["webpack:///./components/settings/DefaultFields.tsx","webpack:///./components/settings/customFields/AddOrEditField.tsx","webpack:///./components/settings/customFields/CustomFields.tsx","webpack:///./components/settings/customFields/CustomFieldsList.tsx","webpack:///./components/settings/customFields/SelectFieldOptions.tsx","webpack:///./pages/settings.tsx"],"sourcesContent":["import languages from \"../../library/languages\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst DefaultClientFields = ({ fields }: any) => {\n  const defaultFieldNames = fields\n    .filter(({ fieldPermanent }: any) => fieldPermanent === true)\n    .map(({ fieldName, _id }: any) => {\n\n      return (\n        <div key={_id}><p>{fieldName}</p></div>\n      );\n    });\n\n  return (\n    <div>\n      <Typography variant=\"h4\" component=\"h2\" gutterBottom>{languages.en.defaultClientFields}</Typography>\n      <div>{defaultFieldNames}</div>\n    </div>\n  );\n};\n\nexport default DefaultClientFields;\n","import AddIcon from \"@material-ui/icons/Add\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Fab from \"@material-ui/core/Fab\";\nimport stringMethods from \"../../../library/stringMethods\";\nimport languages from \"../../../library/languages\";\n\nconst AddOrEditField = ({\n  editedField,\n  displayComponent,\n  fieldMethods,\n  handleOption\n}: any) => {\n  return displayComponent ? (\n    <form onSubmit={fieldMethods.saveEditedField}>\n      <h2>\n        {editedField.id\n          ? languages.en.editCustomField\n          : languages.en.newCustomField}\n      </h2>\n      <label\n        htmlFor={new stringMethods(languages.en.fieldName)\n          .textToHtmlProp()\n          .getString()}\n      >\n        {languages.en.fieldName}\n      </label>\n      <input\n        type=\"text\"\n        id={new stringMethods(languages.en.fieldName)\n          .textToHtmlProp()\n          .getString()}\n        autoFocus={true}\n        value={editedField.fieldName}\n        onChange={fieldMethods.onNameChange}\n      />\n      <label\n        htmlFor={new stringMethods(languages.en.fieldType)\n          .textToHtmlProp()\n          .getString()}\n      >\n        {languages.en.fieldType}\n      </label>\n      <select\n        id={new stringMethods(languages.en.fieldType)\n          .textToHtmlProp()\n          .getString()}\n        onChange={fieldMethods.onSelectChange}\n        value={editedField.fieldType}\n      >\n        <option value=\"text\">{languages.en.text}</option>\n        <option value=\"select\">{languages.en.select}</option>\n        <option value=\"number\">{languages.en.number}</option>\n      </select>\n      {editedField.fieldType === \"select\" ? handleOption : null}\n      <button type=\"submit\">{languages.en.save}</button>\n      <button onClick={fieldMethods.toggleDisplayComponent}>\n        {languages.en.cancel}\n      </button>\n    </form>\n  ) : (\n    <div>\n      <Fab\n        color=\"primary\"\n        aria-label=\"add\"\n        onClick={fieldMethods.toggleDisplayComponent}\n      >\n        <AddIcon />\n      </Fab>\n      <Typography>{languages.en.addNewField}</Typography>\n    </div>\n  );\n};\n\nexport default AddOrEditField;\n","import { useState, useReducer, useEffect } from \"react\";\nimport AddOrEditField from \"./AddOrEditField\";\nimport axios from \"axios\";\nimport globalVars from \"../../../library/globalVariables\";\nimport languages from \"../../../library/languages\";\nimport uniqid from \"uniqid\";\nimport CustomFieldsList from \"./CustomFieldsList\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SelectFieldOptions from \"./SelectFieldOptions\";\n\nconst CustomClientFields = ({ fields, refreshList }: any) => {\n  const blankFieldObject = {\n    fieldName: \"\",\n    fieldType: \"text\",\n    fieldOptions: [],\n  };\n\n  useEffect(() => {\n    // console.log(fields);\n  });\n\n  const [displayComponent, setDisplayComponent] = useState(false);\n\n  const [editedField, setEditedField] = useReducer((state, action) => {\n    switch (action.type) {\n      case \"fieldNameChange\":\n        return {\n          ...state,\n          fieldName: action.payload.value\n        };\n      case \"selectValueChange\":\n        return {\n          ...state,\n          fieldType:\n            action.payload.options[action.payload.options.selectedIndex].value\n        };\n      case \"newOptionSpawn\":\n        return {\n          ...state,\n          fieldOptions: [...state.fieldOptions, { id: uniqid(), value: \"\"}]\n        };\n      case \"clear\":\n        return blankFieldObject;\n      case \"optionValueChange\":\n        return {\n          ...state,\n          fieldOptions: state.fieldOptions.map((el: any) =>\n            el.id === action.payload.id\n              ? {...el, value: action.payload.value}\n              : el\n          )\n        };\n      case \"optionDelete\":\n        return {\n          ...state,\n          fieldOptions: state.fieldOptions.filter(\n            (e: any) => action.payload.id !== e.id\n          )\n        };\n      case \"setWithPaylod\":\n        return action.payload.obj;\n\n      default:\n        return state;\n    }\n  }, blankFieldObject);\n\n  const fieldMethods = {\n    onNameChange(event: any) {\n      setEditedField({\n        type: \"fieldNameChange\",\n        payload: { value: event.target.value }\n      });\n    },\n    onSelectChange(event: any) {\n      setEditedField({\n        type: \"selectValueChange\",\n        payload: { options: event.target.options }\n      });\n    },\n    handleOptionSpawn(e) {\n      e.preventDefault()\n      setEditedField({\n        type: \"newOptionSpawn\"\n      });\n    },\n    toggleDisplayComponent() {\n      displayComponent ? setDisplayComponent(false) : setDisplayComponent(true);\n      setEditedField({ type: \"clear\" });\n    },\n    onOptionDelete(event: any) {\n      setEditedField({\n        type: \"optionDelete\",\n        payload: { id: event.target.id }\n      });\n    },\n    onOptionChange(id, event) {\n      setEditedField({\n        type: \"optionValueChange\",\n        payload: { value : event.target.value, id }\n      });\n    },\n    setupEditedField(obj: any) {\n      setEditedField({\n        type: \"setWithPaylod\",\n        payload: { obj }\n      });\n      !displayComponent ? setDisplayComponent(true) : null;\n    },\n    saveEditedField(e) {\n      e.preventDefault();\n\n      const fieldIsUpdated = async () => {\n        const { fieldName, fieldType, fieldOptions, id } = editedField;\n        const res = await axios({\n          method: \"put\",\n          url: `${globalVars.serverURL}/fields/${id}`,\n          data: { fieldName, fieldType, fieldOptions },\n          responseType: \"json\"\n        });\n        const data = await res.data;\n        if (data.msg === globalVars.msgSuccess) {\n          reset();\n        }\n      };\n\n      const fieldIsCreated = async () => {\n        const res = await axios({\n          method: \"post\",\n          url: `${globalVars.serverURL}/fields/`,\n          data: editedField,\n          responseType: \"json\"\n        });\n        const data = await res.data;\n        if (data.msg === globalVars.msgSuccess) {\n          reset();\n        }\n      };\n      !editedField.id ? fieldIsCreated() : fieldIsUpdated();\n    }\n  };\n\n  const reset = () => {\n    setDisplayComponent(false);\n    setEditedField({ type: \"clear\" });\n    refreshList();\n  };\n\n  const deleteField = async (id: any) => {\n    const res = await axios({\n      method: \"delete\",\n      url: `${globalVars.serverURL}/fields/${id}`,\n      responseType: \"json\"\n    });\n    const resData = await res.data;\n    resData.msg === globalVars.msgSuccess ? refreshList() : null;\n  };\n\n\n  return (\n    <div>\n      <Typography variant=\"h4\" component=\"h2\" gutterBottom>\n        {languages.en.customClientFields}\n      </Typography>\n      <CustomFieldsList\n        deleteField={deleteField}\n        fields={fields}\n        setupEditedField={fieldMethods.setupEditedField}\n      />\n      <AddOrEditField\n        editedField={editedField}\n        displayComponent={displayComponent}\n        fieldMethods={fieldMethods}\n        handleOption={\n          <SelectFieldOptions\n            options={editedField.fieldOptions}\n            fieldMethods={fieldMethods}\n          />\n        }\n      />\n    </div>\n  );\n};\n\nexport default CustomClientFields;\n","import languages from \"../../../library/languages\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nconst CustomFields = ({ fields, setupEditedField, deleteField }: any) => {\n  const useStyles = makeStyles({\n    card: {\n      textAlign: \"center\",\n      height: \"100%\",\n      minWidth: \"300px\"\n    },\n    list: {\n      listStyleType: \"disc\"\n    },\n    title: {\n      fontSize: 14\n    },\n    pos: {\n      marginBottom: 12\n    }\n  });\n\n  const classes = useStyles({});\n\n  const separatedCustomFields = fields\n    .filter(({ fieldPermanent }: any) => !fieldPermanent)\n    .map(({ fieldName, _id, fieldType, fieldOptions }: any) => {\n\n      const options = fieldOptions.map((e: any) => {\n        return (\n          <ListItem key={e.id}>\n            <ListItemText primary={e.value} />\n          </ListItem>\n        );\n      });\n\n      return (\n        <Grid item key={_id}>\n          <Card className={classes.card}>\n            <CardContent>\n              <Typography variant=\"h5\" component=\"h3\">\n                {fieldName}\n              </Typography>\n              <Typography className={classes.pos} color=\"textSecondary\">\n                ({fieldType.toLowerCase()})\n              </Typography>\n              {fieldType === \"select\" && fieldOptions.length > 0 ? (\n                <List className={classes.list} dense={true}>\n                  {options}\n                </List>\n              ) : null}\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() =>\n                  setupEditedField({\n                    fieldName,\n                    fieldType,\n                    fieldPermanent: false,\n                    fieldOptions,\n                    id: _id\n                  })\n                }\n                startIcon={<EditIcon />}\n                size=\"small\"\n              >\n                {languages.en.edit}\n              </Button>\n              <Button\n                variant=\"contained\"\n                onClick={() => deleteField(_id)}\n                startIcon={<DeleteIcon />}\n                size=\"small\"\n              >\n                {languages.en.delete}\n              </Button>\n            </CardContent>\n          </Card>\n        </Grid>\n      );\n    });\n\n  return (\n    <Grid container spacing={2}>\n      {separatedCustomFields}\n    </Grid>\n  );\n};\n\nexport default CustomFields;\n","import languages from \"../../../library/languages\";\n\nconst SelectFieldOptions = ({ options, fieldMethods }: any) => {\n  const items = options.map((e: any) => (\n      <div key={e.id}>\n        <input type=\"text\" onChange={() => fieldMethods.onOptionChange(e.id, event)} value={e.value} />\n        <button id={e.id} onClick={fieldMethods.onOptionDelete}>\n          X\n        </button>\n      </div>\n    )\n  );\n  return <div>{items}<button onClick={fieldMethods.handleOptionSpawn}>{languages.en.add}</button></div>;\n};\nexport default SelectFieldOptions;\n","import Header from \"../components/Header\";\nimport { useRouter } from \"next/router\";\nimport { useState, useEffect } from \"react\";\nimport stringMethods from \"../library/stringMethods\";\nimport globalVars from \"../library/globalVariables\";\nimport axios from \"axios\";\nimport DefaultFields from \"../components/settings/DefaultFields\";\nimport CustomFields from \"../components/settings/customFields/CustomFields\";\nimport Typography from \"@material-ui/core/Typography\";\nimport LoadingSpinner from \"../components/LoadingSpinner\";\nimport EmailSettings from \"../components/settings/EmailSettings\";\n\nconst Settings = ({ dataFields, dataEmailSettings }: any) => {\n  const router = useRouter();\n  const [fields, setField] = useState(dataFields);\n  const [initialized, setInitialized] = useState(false);\n\n  const refreshList = async () => {\n    //get data from DB after change\n    const res = await axios({\n      method: \"get\",\n      url: `${globalVars.serverURL}/fields/`,\n      responseType: \"json\"\n    });\n    const data = await res.data;\n    setField(data);\n  };\n\n  useEffect(() => {\n    //title from url\n    const title = new stringMethods(router.pathname)\n      .removeSlash()\n      .firstCharUpperCase()\n      .addStringToEnd(globalVars.titleSubText)\n      .getString();\n\n    document.title = title;\n\n    //componendDidMount effect\n    setInitialized(true);\n  }, [router]);\n\n  const h1 = new stringMethods(router.pathname)\n    .removeSlash()\n    .firstCharUpperCase()\n    .getString();\n\n  return !initialized ? (\n    <LoadingSpinner />\n  ) : (\n    <div>\n      <Header />\n      <Typography variant=\"h3\" component=\"h1\" gutterBottom>\n        {h1}\n      </Typography>\n      <DefaultFields fields={fields} />\n      <CustomFields fields={fields} refreshList={refreshList} />\n      <EmailSettings data={dataEmailSettings} />\n    </div>\n  );\n};\n\nSettings.getInitialProps = async () => {\n  const resFields = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/fields`,\n    responseType: \"json\"\n  });\n  const dataFields = await resFields.data;\n\n  const resEmailSettings = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/emails/email-settings`,\n    responseType: \"json\"\n  })\n\n  const dataEmailSettings = await resEmailSettings.data;\n\n  return { dataFields,  dataEmailSettings };\n};\n\nexport default Settings;\n"],"mappings":"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","sourceRoot":""}