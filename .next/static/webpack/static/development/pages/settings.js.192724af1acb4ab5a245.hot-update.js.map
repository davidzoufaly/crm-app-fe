{"version":3,"file":"static/webpack/static/development/pages/settings.js.192724af1acb4ab5a245.hot-update.js","sources":["webpack:///./components/settings/webform/WebForm.tsx","webpack:///./components/settings/webform/WebFormSelect.tsx","webpack:///./components/settings/webform/webFormOptionSelect.tsx"],"sourcesContent":["import { useReducer, useEffect, useState } from \"react\";\nimport WebFormSelect from \"./WebFormSelect\";\nimport WebFormList from \"./WebFormList\";\nimport WebFormOptionSelect from \"./webFormOptionSelect\";\n\nconst WebForm = ({ fields }) => {\n  const [optionSelect, setOptionSelect] = useState(false);\n  const [webFields, setWebFields] = useReducer((state, action) => {\n    switch (action.type) {\n      case \"add\":\n        return state.map(field =>\n          field.fieldName === action.payload.fieldName\n            ? { ...field, fieldInForm: true }\n            : field\n        );\n      case \"remove\":\n        return state.map(field =>\n          field.fieldName === action.payload.fieldName\n            ? { ...field, fieldInForm: false }\n            : field\n        );\n      default:\n        return state;\n    }\n  }, fields);\n\n  const addedToForm = e => {\n    e.target.t\n    setWebFields({\n      type: \"add\",\n      payload: { fieldName: e.target.value }\n    });\n  };\n\n  const removeFromList = e => {\n    setWebFields({\n      type: \"remove\",\n      payload: { fieldName: e.target.id }\n    });\n  };\n\n  useEffect(() => {\n    console.log(webFields);\n  }, [webFields]);\n\n  return (\n    <>\n      <h3>Select field:</h3>\n      <WebFormSelect webFields={webFields} addedToForm={addedToForm} optionSelect={optionSelect}/>\n      <WebFormOptionSelect optionSelect={optionSelect} />\n      <h3>Selected fields:</h3>\n      <WebFormList webFields={webFields} removeFromList={removeFromList} optionSelect={optionSelect} />\n    </>\n  );\n};\n\nexport default WebForm;\n","import globalVars from \"../../../library/globalVariables\";\n\nconst WebFormSelect = ({ webFields, addedToForm, optionSelect}) => {\n  const selectOptions = webFields.map(field => {\n    return !field.fieldInForm &&\n      field.fieldName !== globalVars.permanentFields.dateAdded &&\n      field.fieldName !== globalVars.permanentFields.lastModified ? (\n      <option key={field._id} value={field.fieldName}>\n        {field.fieldName}\n      </option>\n    ) : null;\n  });\n\n  return selectOptions.some(field => field !== null) ? (\n    <>\n      <select name=\"fields\" onChange={addedToForm} disabled={optionSelect}>\n        <option key={globalVars.blankOption}>{globalVars.blankOption}</option>\n        {selectOptions}\n      </select>\n    </>\n  ) : <p>All fields selected</p>;\n};\n\nexport default WebFormSelect;\n","const webFormOptionSelect = ({webFields}) =>Â {\n\n    const selectOption = webFields.map()\n    \n    return (\n        <>\n        {selectOption}\n        </>\n    )\n}\n\nexport default webFormOptionSelect;"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAEA;AADA;AADA;AACA;AAIA;AACA;AAAA;AAEA;AADA;AADA;AACA;AAIA;AACA;AAdA;AAgBA;AAnBA;AAAA;AACA;AAoBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACxDA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACvBA;AAAA;AAEA;AAEA;AAKA;AACA;AACA;;;;A","sourceRoot":""}