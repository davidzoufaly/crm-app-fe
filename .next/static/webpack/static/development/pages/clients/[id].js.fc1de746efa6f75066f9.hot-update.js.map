{"version":3,"file":"static/webpack/static/development/pages/clients/[id].js.fc1de746efa6f75066f9.hot-update.js","sources":["webpack:///./pages/clients/.tsx"],"sourcesContent":["import { useRouter } from \"next/router\";\nimport { useEffect, useState, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport Header from \"../../components/Header\";\nimport SingleClientData from \"../../components/singleClient/SingleClientData\";\nimport ButtonsSingle from \"../../components/singleClient/ButtonsSingle\";\nimport LoadingSpinner from \"../../components/LoadingSpinner\";\nimport UserContext from \"../../components/UserContext\";\nimport EmailForm from \"../../components/EmailForm\";\nimport languages from \"../../library/languages\";\nimport globalVars from \"../../library/globalVariables\";\n\nconst Client = ({ clientData, fieldsData }: any) => {\n  const [client, setClient] = useState(clientData);\n  const [name, setName] = useState(\n    `${clientData[\"First name\"]} ${clientData[\"Last name\"]}`\n  );\n\n  const user = useContext(UserContext);\n  const [initialized, setInitialized] = useState(false);\n  const [isEmailCreated, setIsEmailCreated] = useState(false);\n  const router = useRouter();\n\n  useEffect(() => {\n    document.title = `${name} ${globalVars.titleSubText}`;\n    setInitialized(true);\n    saveToDb();\n  }, [name]);\n\n  useEffect(() => {\n    user.checkUser();\n  }, [])\n\n  const onSave = async e => {\n    e.preventDefault();\n    setClient({...client, lastModified: moment().format(\"llll\")})\n    setName(`${client[\"First name\"]} ${client[\"Last name\"]}`);\n  };\n\n  const saveToDb = async () => {\n    await axios({\n      method: \"put\",\n      url: `${globalVars.serverURL}/clients/${router.query.id}`,\n      params: {key: user.user.userkey},\n      data: client,\n      responseType: \"json\"\n    });\n  }\n\n  const onDelete = async e => {\n    e.preventDefault();\n    const res = await axios({\n      method: \"delete\",\n      url: `${globalVars.serverURL}/clients/${router.query.id}`,\n      params: {key: user.user.userkey},\n      responseType: \"json\"\n    });\n    const data = await res.data;\n    (await data.msg) === \"Success\"\n      ? router.push(\"/clients\")\n      : alert(languages.en.somethingWentWrong);\n  };\n\n  const onInputChange = e => {\n    setClient({\n      ...client,\n      [e.target.name]:\n        e.target.type === \"number\" ? parseInt(e.target.value) : e.target.value\n    });\n  };\n\n  const toggleIsEmailCreated = () => {\n    setIsEmailCreated(isEmailCreated ? false : true);\n  };\n\n  return !user.user.signedIn && !initialized ? (\n    <LoadingSpinner />\n  ) : (\n    <div>\n      <Header />\n      <h1>{name}</h1>\n      <form>\n        <SingleClientData\n          fieldsData={fieldsData}\n          client={client}\n          onInputChange={onInputChange}\n        />\n      </form>\n        <EmailForm\n          to={[client[\"Email\"]]}\n          isEmailCreated={isEmailCreated}\n          toggleIsEmailCreated={toggleIsEmailCreated}\n        />\n        <ButtonsSingle\n          onSave={onSave}\n          toggleIsEmailCreated={toggleIsEmailCreated}\n          onDelete={onDelete}\n          isEmailCreated={isEmailCreated}\n        />\n    </div>\n  );\n};\n\nClient.getInitialProps = async (context: any) => {\n  const { id } = context.query;\n  const resClient = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/clients/${id}`,\n    params: {key: context.query.key},\n    responseType: \"json\"\n  });\n  const clientData = await resClient.data;\n\n  const resFields = await axios({\n    method: \"get\",\n    url: `${globalVars.serverURL}/fields`,\n    params: {key: context.query.key},\n    responseType: \"json\"\n  });\n  const fieldsData = await resFields.data;\n\n  return { clientData, fieldsData };\n};\n\nexport default Client;\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAKA;AACA;AAPA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AALA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AACA;AAHA;AAEA;AAFA;AAAA;AACA;AADA;AAQA;AARA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AASA;AAVA;AAAA;AACA;AADA;AAWA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAaA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AACA;AAHA;AAEA;AAFA;AAAA;AACA;AADA;AAQA;AARA;AAAA;AAWA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AACA;AAXA;AAUA;AAVA;AAAA;AACA;AADA;AAgBA;AAhBA;AAkBA;AAAA;AAAA;AACA;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAoBA;;;;A","sourceRoot":""}