{"version":3,"file":"static/webpack/static/development/pages/clients/[key].js.1cd6003cb771daad3980.hot-update.js","sources":["webpack:///./components/clients/Buttons.tsx","webpack:///./components/clients/TableBody.tsx","webpack:///./components/clients/TableHead.tsx","webpack:///./pages/clients/[key].tsx"],"sourcesContent":["import Button from \"@material-ui/core/Button\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport EmailIcon from \"@material-ui/icons/Email\";\nimport languages from \"../../library/languages\";\nimport { Box } from \"@material-ui/core\";\n\nconst Buttons = ({\n  clientsAreNotChecked,\n  toggleIsClientAdded,\n  deleteMultipleClients,\n  isClientAdded,\n  isEmailCreated,\n  toggleIsEmailCreated\n}: any) => (\n  <Box\n    my=\"1rem\"\n    display=\"flex\"\n    width=\"320px\"\n    maxWidth=\"1\"\n    justifyContent=\"space-between\"\n  >\n    <Button\n      variant=\"contained\"\n      color=\"primary\"\n      disabled={isClientAdded || isEmailCreated}\n      onClick={toggleIsClientAdded}\n      startIcon={<AddIcon />}\n    >\n      {languages.en.add}\n    </Button>\n    <Button\n      variant=\"contained\"\n      color=\"primary\"\n      onClick={toggleIsEmailCreated}\n      disabled={clientsAreNotChecked || isEmailCreated || isClientAdded}\n      startIcon={<EmailIcon />}\n    >\n      {languages.en.email}\n    </Button>\n    <Button\n      variant=\"contained\"\n      color=\"secondary\"\n      disabled={clientsAreNotChecked}\n      onClick={deleteMultipleClients}\n      startIcon={<DeleteIcon />}\n    >\n      {languages.en.delete}\n    </Button>\n  </Box>\n);\n\nexport default Buttons;\n","import { useContext } from \"react\";\nimport Link from \"next/link\";\nimport uniqid from \"uniqid\";\nimport UserContext from \"../UserContext\";\nimport languages from \"../../library/languages\";\nimport PersonIcon from '@material-ui/icons/Person';\nimport {TableCell, TableRow, Checkbox, Button } from '@material-ui/core';\n\nconst TableBody = ({ clients, sort, fields, handleCheckbox }: any) => {\n  const { sortBy, reverse } = sort;\n  const user = useContext(UserContext);\n  // field we want to filter is type number -> return true and filter it correctly -> 23 > 4\n  if (fields.some(e => e.fieldName === sortBy && e.fieldType === \"number\")) {\n    clients.sort((a: any, b: any) =>\n      reverse ? b[sortBy] - a[sortBy] : a[sortBy] - b[sortBy]\n    );\n  } else {\n    clients.sort((a: any, b: any) =>\n      reverse\n        ? b[sortBy] > a[sortBy]\n          ? -1\n          : 1\n        : b[sortBy] < a[sortBy]\n        ? -1\n        : 1\n    );\n  }\n\n  const fieldNames = [];\n  fields.forEach((e: any) => fieldNames.push(e.fieldName));\n\n  const tableClients = clients.map((client: any) => {\n    let items = [];\n\n    for (let i = 0; i < fieldNames.length; i++) {\n      items[i] = null;\n    }\n\n    const tableItem = () => {\n      for (let key in client) {\n        //show only clients data with existing fields\n        if (client[key] !== client._id && fieldNames.includes(key)) {\n          items[fieldNames.indexOf(key)] = (\n            <TableCell key={uniqid()}>{client[key]}</TableCell>\n          );\n        }\n      }\n      // add put checkbox at first position\n      items.unshift(\n        <TableCell padding=\"checkbox\" key={uniqid()}>\n        <Checkbox\n        color=\"primary\"\n        checked={!!client.isChecked || client.isChecked}\n        onChange={() => handleCheckbox(client._id)}\n        inputProps={{\n          'aria-label': 'primary checkbox',\n        }}\n      />\n      </TableCell>\n      );\n      // add put profile link at last position\n      items.push(\n        <TableCell key={uniqid()}>\n          <Link\n            href={`/client/[id]/?key=${user.user.userkey}`}\n            as={`/client/${client._id}/?key=${user.user.userkey}`}\n          >\n            <Button startIcon={<PersonIcon/>}>{languages.en.go}</Button>\n          </Link>\n        </TableCell>\n      );\n\n      items = items.map(e =>\n        !!!e ? <TableCell key={uniqid()}></TableCell> : e\n      );\n\n      return items;\n    };\n\n    return <TableRow key={client._id} hover={true}>{tableItem()}</TableRow>;\n  });\n  return tableClients;\n};\n\nexport default TableBody;\n","import uniqid from \"uniqid\";\nimport languages from \"../../library/languages\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport { Button, TableCell, Typography, Checkbox } from \"@material-ui/core\";\n\ninterface IProps {\n  sortBy: any;\n  fields: any;\n  sort: any;\n  handleCheckAll: any;\n  allCheck: boolean;\n}\n\nconst TableHeader = ({ fields, sortBy, sort, handleCheckAll, allCheck }: IProps) => {\n  const tableHeadings = fields.map((e: any) => {\n    return (\n        <TableCell key={uniqid()}>\n          <Button\n            onClick={() => sortBy(e.fieldName)}\n            startIcon={\n              <KeyboardArrowDownIcon\n                color={sort.sortBy === e.fieldName ? \"secondary\" : \"primary\"}\n                style={\n                  sort.reverse && sort.sortBy === e.fieldName\n                    ? { transform: \"rotate(180deg)\" }\n                    : null\n                }\n              />\n            }\n          >\n            {e.fieldName}\n          </Button>\n        </TableCell>\n    );\n  });\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell key={uniqid()}>\n          <Checkbox\n            color=\"primary\"\n            checked={allCheck}\n            onChange={() => handleCheckAll()}\n            inputProps={{\n              \"aria-label\": \"primary checkbox\"\n            }}\n          />\n        </TableCell>\n        {tableHeadings}\n        <TableCell>\n          <Typography variant=\"button\">{languages.en.clientProfile}</Typography>\n        </TableCell>\n      </TableRow>\n    </TableHead>\n  );\n};\n\nexport default TableHeader;\n","import { useState, useEffect, useReducer, useContext } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport Header from \"../../components/Header\";\nimport TableBody from \"../../components/clients/TableBody\";\nimport UserContext from \"../../components/UserContext\";\nimport stringMethods from \"../../library/stringMethods\";\nimport globalVars from \"../../library/globalVariables\";\nimport TableHead from \"../../components/clients/TableHead\";\nimport CreateClient from \"../../components/clients/CreateClient\";\nimport EmailForm from \"../../components/EmailForm\";\nimport Buttons from \"../../components/clients/Buttons\";\nimport LoadingSpinner from \"../../components/LoadingSpinner\";\nimport { Table, Typography, Box } from \"@material-ui/core\";\nimport TableBodyMui from \"@material-ui/core/TableBody\";\nimport languages from \"../../library/languages\";\n\nconst Clients = ({ fieldData, clientData }: any) => {\n  const router = useRouter();\n  const user = useContext(UserContext);\n  const [clients, setClients] = useReducer((state, action) => {\n    switch (action.type) {\n      case \"handleCheckedClients\":\n        return state.map(client =>\n          client._id === action.payload.id\n            ? !!!client.isChecked\n              ? { ...client, isChecked: true }\n              : { ...client, isChecked: false }\n            : client\n        );\n      case \"addClient\":\n        return [...state, action.payload.newClient];\n      case \"deleteCheckedClients\":\n        return state.filter(client => !client.isChecked);\n      case \"unCheckAll\":\n        return state.map(client => ({ ...client, isChecked: false }));\n        case \"toggleCheckAll\":\n        return state.map(client => ({ ...client, isChecked: !action.payload.checked }))\n      default:\n        return state;\n    }\n  }, clientData);\n\n  const [sort, setSort] = useState({\n    //default sort by \"date added\"\n    sortBy: \"Date added\",\n    reverse: true\n  });\n  \n  const [allCheck, setAllCheck] = useState(false);\n  const [initialized, setInitialized] = useState(false);\n  const [isClientAdded, setIsClientAdded] = useState(false);\n  const [isEmailCreated, setIsEmailCreated] = useState(false);\n\n  useEffect(() => {\n    // set page title\n    const title = new stringMethods(router.pathname)\n      .removeSlash()\n      .removeSlashAndTextAfter()\n      .firstCharUpperCase()\n      .addStringToEnd(globalVars.titleSubText)\n      .getString();\n    document.title = title;\n    setInitialized(true);\n    user.checkUser();\n  }, [router]);\n\n  useEffect(() => {\n    // reset email state, when user uncheck all recievers / clients\n    filterCheckedClients().length === 0 && isEmailCreated\n      ? setIsEmailCreated(!isEmailCreated)\n      : null;\n  }, [clients]);\n\n  // create H1\n  const h1 = new stringMethods(router.pathname)\n    .removeSlash()\n    .removeSlashAndTextAfter()\n    .firstCharUpperCase()\n    .getString();\n\n  const sortBy = fieldName => {\n    setSort({\n      ...sort,\n      sortBy: fieldName,\n      reverse:\n        fieldName === sort.sortBy\n          ? // if clicked again on same field ->Â reverse sort based on current reverse state\n            !sort.reverse\n            ? true\n            : false\n          : // if new field being clicked -> set reverse true to immediately sort column ASC\n            true\n    });\n  };\n\n  const handleCheckbox = id => {\n    setClients({\n      type: \"handleCheckedClients\",\n      payload: { id }\n    });\n  };\n\n  const handleCheckAll = () => {\n    setAllCheck(state => !state)\n    setClients({\n      type: \"toggleCheckAll\",\n      payload: {checked: allCheck}\n    });\n  };\n\n  const addNewClientToState = newClient => {\n    setClients({\n      type: \"addClient\",\n      payload: { newClient }\n    });\n  };\n\n  const filterCheckedClients = () => clients.filter(client => client.isChecked);\n\n  const unCheckAll = () => {\n    setClients({ type: \"unCheckAll\" });\n  };\n\n  const toggleIsEmailCreated = () => {\n    setIsEmailCreated(isEmailCreated ? false : true);\n  };\n\n  const toggleIsClientAdded = () => {\n    isClientAdded ? setIsClientAdded(false) : setIsClientAdded(true);\n  };\n\n  const deleteMultipleClients = async () => {\n    setClients({\n      type: \"deleteCheckedClients\"\n    });\n\n    await axios({\n      method: \"DELETE\",\n      data: filterCheckedClients().map(e => e._id),\n      url: `${globalVars.serverURL}/clients/`,\n      params: { key: user.user.userkey },\n      responseType: \"json\"\n    });\n  };\n\n  return !user.user.signedIn && !initialized ? (\n    <LoadingSpinner />\n  ) : (\n    <div>\n      <Header />\n      <Typography component=\"h1\" variant=\"h3\">\n        {h1}\n      </Typography>\n      <Typography variant=\"h5\" gutterBottom style={{ color: \"#535658\" }}>\n        {languages.en.saved} {clients.length}\n      </Typography>\n      <EmailForm\n        to={filterCheckedClients().map(e => e[\"Email\"])}\n        isEmailCreated={isEmailCreated}\n        toggleIsEmailCreated={toggleIsEmailCreated}\n        unCheckAll={unCheckAll}\n      />\n      <CreateClient\n        fields={fieldData}\n        isClientAdded={isClientAdded}\n        toggleIsClientAdded={toggleIsClientAdded}\n        addNewClientToState={addNewClientToState}\n      />\n      <Buttons\n        clientsAreNotChecked={!clients.some(client => client.isChecked)}\n        deleteMultipleClients={deleteMultipleClients}\n        toggleIsClientAdded={toggleIsClientAdded}\n        isClientAdded={isClientAdded}\n        toggleIsEmailCreated={toggleIsEmailCreated}\n        isEmailCreated={isEmailCreated}\n      />\n      <Box width=\"1\" overflow=\"auto\">\n        <Table\n          aria-label=\"clients table\"\n          size=\"small\"\n          style={{ backgroundColor: \"white\", border: \"1px solid #e0e0e0\" }}\n        >\n          <TableHead\n            fields={fieldData}\n            handleCheckAll={handleCheckAll}\n            allCheck={allCheck}\n            sortBy={sortBy}\n            sort={sort}\n          />\n          <TableBodyMui>\n            <TableBody\n              clients={clients}\n              fields={fieldData}\n              sort={sort}\n              handleCheckbox={handleCheckbox}\n            />\n          </TableBodyMui>\n        </Table>\n      </Box>\n    </div>\n  );\n};\n\nClients.getInitialProps = async (context: any) => {\n  //fetch clients\n  const clientRes = await axios({\n    method: \"GET\",\n    url: `${globalVars.serverURL}/clients/`,\n    params: { key: context.query.key },\n    responseType: \"json\"\n  });\n  const clientData = await clientRes.data;\n\n  //fetch fields\n  const fieldRes = await axios({\n    method: \"GET\",\n    url: `${globalVars.serverURL}/fields`,\n    params: { key: context.query.key },\n    responseType: \"json\"\n  });\n  const fieldData = await fieldRes.data;\n\n  //? fetch clients counter -> unsued -> takes number from main clients\n  // const resClientCount = await axios(\n  //   `${globalVars.serverURL}/clients/count?key=${context.query.key}`\n  // );\n  // const clientCount = await resClientCount.data\n\n  return {\n    clientData,\n    fieldData\n  };\n};\n\nexport default Clients;\n"],"mappings":"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","sourceRoot":""}