{"version":3,"file":"static/webpack/static/development/pages/settings.js.401b4fbfecf83d656475.hot-update.js","sources":["webpack:///./components/settings/webform/WebForm.tsx"],"sourcesContent":["import { useReducer, useEffect } from \"react\";\nimport WebFormSelect from \"./WebFormSelect\";\nimport WebFormList from \"./WebFormList\";\nimport WebFormOptionSelect from \"./WebFormOptionSelect\";\nimport WebFormOptions from \"./WebFormOptions\";\n\n//TODO: po odstranění z listu: preselected = false a fieldFormVisible = false\n//TODO: Order in list podle přidání\n//TODO: dismount komponenty se subselectem po vybrání možnosti\n\nconst WebForm = ({ fields }) => {\n  const [webFields, setWebFields] = useReducer((state, action) => {\n    switch (action.type) {\n      case \"add\":\n        return state.map(field =>\n          field.fieldName === action.payload.fieldName\n            ? { ...field, fieldInForm: true }\n            : field\n        );\n    //   case \"remove\":\n    //     return state.map(field =>\n    //       field.fieldName === action.payload.fieldName\n    //         ? field.fieldType !== \"select\"\n    //           ? { ...field, fieldInForm: false }\n    //           : {\n    //               ...field,\n    //               fieldInForm: false,\n    //               fieldFormVisible: false,\n    //               fieldOptions: field.fieldOptions.map(option =>\n    //                 option.preselected\n    //                   ? { ...option, preselected: false }\n    //                   : option\n    //               )\n    //             }\n    //         : field\n    //     );\n    case \"remove\":\n            return state.map(field =>\n              field.fieldName === action.payload.fieldName\n                // ? field.fieldType !== \"select\"\n                //   ? { ...field, fieldInForm: false }\n                   ? {\n                      ...field,\n                      fieldInForm: false,\n                      fieldFormVisible: false,\n                      fieldOptions: field.fieldOptions.map(option =>\n                        option.preselected\n                          ? { ...option, preselected: false }\n                          : option\n                      )\n                    }\n                : field\n            );\n\n      case \"addVisibleSelect\":\n        return state.map(field =>\n          field.fieldName === action.payload.fieldName\n            ? {\n                ...field,\n                fieldInForm: true,\n                fieldFormVisible: true,\n                pause: false\n              }\n            : field\n        );\n\n      case \"pauseSelect\":\n        return state.map(field =>\n          field.fieldName === action.payload.fieldName\n            ? { ...field, pause: true }\n            : field\n        );\n\n      case \"addHiddenSelect\":\n        return state.map(field =>\n          field.pause\n            ? {\n                ...field,\n                fieldInForm: true,\n                fieldFormVisible: false,\n                pause: false,\n                fieldOptions: field.fieldOptions.map(option =>\n                  option.value === action.payload.optionValue\n                    ? { ...option, preselected: true }\n                    : option\n                )\n              }\n            : field\n        );\n\n      default:\n        return state;\n    }\n  }, fields);\n\n  const addNotSelect = e => {\n    webFields.map(field =>\n      field.fieldName === e.target.value\n        ? field.fieldType !== \"select\"\n          ? setWebFields({\n              type: \"add\",\n              payload: { fieldName: e.target.value }\n            })\n          : setWebFields({\n              type: \"pauseSelect\",\n              payload: { fieldName: e.target.value }\n            })\n        : null\n    );\n  };\n\n  const addVisibleSelect = e => {\n    setWebFields({\n      type: \"addVisibleSelect\",\n      payload: { fieldName: e.target.id }\n    });\n  };\n\n  const addHiddenSelect = e => {\n    setWebFields({\n      type: \"addHiddenSelect\",\n      payload: { optionValue: e.target.value }\n    });\n  };\n\n  const removeFromList = e => {\n    setWebFields({\n      type: \"remove\",\n      payload: { fieldName: e.target.id }\n    });\n  };\n\n  useEffect(() => {\n    console.log(webFields);\n  }, [webFields]);\n\n  return (\n    <>\n      <h3>Select field:</h3>\n      <WebFormSelect webFields={webFields} addNotSelect={addNotSelect} />\n      <WebFormOptionSelect\n        webFields={webFields}\n        addVisibleSelect={addVisibleSelect}\n        WebFormOptions={\n          <WebFormOptions\n            webFields={webFields}\n            addHiddenSelect={addHiddenSelect}\n          />\n        }\n      />\n      <h3>Selected fields:</h3>\n      <WebFormList webFields={webFields} removeFromList={removeFromList} />\n    </>\n  );\n};\n\nexport default WebForm;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AADA;AAEA;AACA;AACA;AAAA;AAEA;AADA;AADA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AAFA;AAKA;AACA;AACA;AAAA;AAEA;AADA;AADA;AAPA;AADA;AACA;AAgBA;AACA;AAAA;AAIA;AACA;AACA;AALA;AADA;AACA;AAUA;AACA;AAAA;AAEA;AADA;AADA;AACA;AAKA;AACA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAEA;AADA;AADA;AANA;AADA;AACA;AAeA;AACA;AA/EA;AAiFA;AAnFA;AAAA;AACA;AAoFA;AACA;AAAA;AAIA;AACA;AAAA;AAAA;AAFA;AAKA;AACA;AAAA;AAAA;AAFA;AAPA;AAaA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;A","sourceRoot":""}